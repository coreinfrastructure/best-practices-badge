version: 2.1
# This CircleCI orb doesn't seem to work, so I gave up:
# orbs:
#   browser-tools: circleci/browser-tools@1.1.1
# When I try to later run "browser-tools/install-browser-tools" or similar,
# CircleCI reports that the file doesn't exist (which is true).
# It's not clear *why* the file doesn't exist. So we instead force-install
# a browser for testing below.
jobs:
  build:
    working_directory: ~/coreinfrastructure/best-practices-badge
    parallelism: 1
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    docker:
    - image: drdavidawheeler/cii-bestpractices:2.7.2-browsers
      environment:
        PG_HOST: localhost
        PG_USER: ubuntu
        RAILS_ENV: test
        RACK_ENV: test
    - image: circleci/postgres:11.5-ram
      environment:
        POSTGRES_USER: ubuntu
        POSTGRES_DB: circle_ruby_test
    steps:
    - checkout
    - run: pwd
    - run: ls -l
    # This should install the orb, but it doesn't work.
    # - run:
    #     name: Install browser tools
    #     command: browser-tools/install-browser-tools
    #
    # We instead manually force installation of Chrome using a code
    # snippet from the browser tools. See:
    # https://github.com/CircleCI-Public/browser-tools-orb/blob/master/src/commands/install-chrome.yml#L131
    - run:
        name: Install Chrome
        command: |
          SUDO='sudo'
          CHROME_VERSION='latest'
          if [[ "$CHROME_VERSION" == "latest" ]]; then
            CHROME_URL="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
          else
            CHROME_URL="https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION}-1_amd64.deb"
          fi
          curl --silent --show-error --location --fail --retry 3 \
            --output google-chrome.deb $CHROME_URL
          $SUDO apt-get update
          # The pipe will install any dependencies missing
          $SUDO dpkg -i google-chrome.deb || $SUDO apt-get -fy install
          rm -rf google-chrome.deb
          $SUDO sed -i 's|HERE/chrome"|HERE/chrome" --disable-setuid-sandbox --no-sandbox|g' "/opt/google/chrome/google-chrome"
          which google-chrome
          google-chrome --version
    # Prepare for artifact and test results
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    # Force cleanup to make deterministic.
    # See https://circleci.com/docs/2.0/caching
    # - run: bundle clean --force
    # Dependencies
    # Restore the dependency cache
    - restore_cache:
        keys:
        # Find the most recently generated cache used
        # Find a cache corresponding to this particular Gemfile.lock checksum
        - v7-dep-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        - v7-dep-{{ arch }}-{{ .Branch }}-
        - v7-dep-{{ arch }}-
        # This was suggested, but it seems like a bad idea to me:
        # - v7-dep-
    # This would show what we restored
    # - run: find ~/.rubygems || true
    - run:
        name: Update Rubygems
        command: sudo gem update --system --silent --no-document
        environment:
          REALLY_GEM_UPDATE_SYSTEM: 1
    - run:
        name: Update bundler to match Gemfile.lock
        command: >
          sudo sh -c 'yes | gem install bundler --force --no-document
          -v "$(cat Gemfile.lock | tail -1 | tr -d \\\\" \\\\")"'
    - run:
        name: Bundler Version
        command: bundle --version
    - run:
        name: Install Bundle
        # Note: --path=vendor/bundle removed, we don't need it.
        command: >
          bundle check ||
          bundle install --jobs=4 --retry=3
    - run:
       name: Update Chromedriver
       command: bundle exec rake update_chromedriver
    # Here's how we could show more:
    # - run: find ~/.rubygems || true
    # - run: find ~/.bundle || true
    # - run: find ~/.rbenv || true
    # - run: find vendor/bundle || true
    # - run: find ~ -name "*rack-timeout*" || true
    # Save dependency cache
    - save_cache:
        key: v7-dep-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        paths:
          - ~/.rubygems
          - ~/.bundle
          # Not used in current config; we include these just in case they
          # get used later:
          - ~/.rbenv/versions
          - vendor/bundle
    - run:
        name: Configure database
        command: |
          cd config/
          cp {database.ci,database}.yml
    - run:
        name: Create database
        command: bundle exec rake db:create db:schema:load --trace
    # Start testing
    - run:
        name: Check for whitespace issues.
        command: '[[ ! -s "$(git rev-parse --git-dir)/shallow" ]] || git fetch --unshallow'
    - run:
        name:  Run test suite
        command: bundle exec rake test
    - run:
        name:  Run pronto GitHub
        command: >
          bundle exec pronto run -f github text
          -c=$(git log --pretty=format:%H | tail -1) --exit-code
    # Temporarily disable bundle doctor; trying to run it produces an error.
    # - run: bundle exec bundle doctor
    # Ignore CVE-2015-9284 (omniauth); We have mitigated this with a
    # third-party countermeasure (omniauth-rails_csrf_protection) in:
    # https://github.com/coreinfrastructure/best-practices-badge/pull/1298
    # - run: bundle exec bundle audit check --update
    - run: bundle exec bundle audit check --update --ignore CVE-2015-9284
    - run: bundle exec rake whitespace_check
    - run: bundle exec rake license_finder_report.html
    - run: script/report_code_statistics
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: coverage
    - store_artifacts:
        path: license_finder_report.html
    - store_artifacts:
        path: log/test.log
    - store_artifacts:
        path: tmp/capybara
    - store_artifacts:
        path: test/html_reports
    - store_artifacts:
        path: /tmp/circleci-test-results
  deploy-master:
    docker:
      - image: buildpack-deps:bionic
    environment:
      HEROKU_APP: "master-bestpractices"
    steps:
      - checkout
      - run:
          name: Deploy Master to Heroku
          command: |
            echo 'heroku.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAu8erSx6jh+8ztsfHwkNeFr/SZaSOcvoa8AyMpaerGIPZDB2TKNgNkMSYTLYGDK2ivsqXopo2W7dpQRBIVF80q9mNXy5tbt1WE04gbOBB26Wn2hF4bk3Tu+BNMFbvMjPbkVlC2hcFuQJdH4T2i/dtauyTpJbD/6ExHR9XYVhdhdMs0JsjP/Q5FNoWh2ff9YbZVpDQSTPvusUp4liLjPfa/i0t+2LpNCeWy8Y+V9gUlDWiyYwrfMVI0UwNCZZKHs1Unpc11/4HLitQRtvuk0Ot5qwwBxbmtvCDKZvj1aFBid71/mYdGRPYZMIxq1zgP1acePC1zfTG/lvuQ7d0Pe0kaw==' >> ~/.ssh/known_hosts
            git push git@heroku.com:master-bestpractices.git $CIRCLE_SHA1:refs/heads/master
      - run:
          name: Setup Heroku
          command: bash .circleci/setup-heroku.sh
      - run:
          name: Migrate DB for Master
          command: |
            heroku run rake db:migrate --app master-bestpractices
          no_output_timeout: 400s
      - run:
          name: Test Fastly
          command: script/fastly_test
  deploy-staging:
    docker:
      - image: buildpack-deps:bionic
    steps:
      - checkout
      - run:
          name: Deploy Staging to Heroku
          command: |
            echo 'heroku.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAu8erSx6jh+8ztsfHwkNeFr/SZaSOcvoa8AyMpaerGIPZDB2TKNgNkMSYTLYGDK2ivsqXopo2W7dpQRBIVF80q9mNXy5tbt1WE04gbOBB26Wn2hF4bk3Tu+BNMFbvMjPbkVlC2hcFuQJdH4T2i/dtauyTpJbD/6ExHR9XYVhdhdMs0JsjP/Q5FNoWh2ff9YbZVpDQSTPvusUp4liLjPfa/i0t+2LpNCeWy8Y+V9gUlDWiyYwrfMVI0UwNCZZKHs1Unpc11/4HLitQRtvuk0Ot5qwwBxbmtvCDKZvj1aFBid71/mYdGRPYZMIxq1zgP1acePC1zfTG/lvuQ7d0Pe0kaw==' >> ~/.ssh/known_hosts
            git push git@heroku.com:staging-bestpractices.git $CIRCLE_SHA1:refs/heads/master
      - run:
          name: Setup Heroku
          command: bash .circleci/setup-heroku.sh
      - run:
          name: Migrate DB for Staging
          command: |
            heroku run rake db:migrate --app staging-bestpractices
          no_output_timeout: 400s
  deploy-production:
    docker:
      - image: buildpack-deps:bionic
    steps:
      - checkout
      - run:
          name: Deploy Production to Heroku
          command: |
            echo 'heroku.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAu8erSx6jh+8ztsfHwkNeFr/SZaSOcvoa8AyMpaerGIPZDB2TKNgNkMSYTLYGDK2ivsqXopo2W7dpQRBIVF80q9mNXy5tbt1WE04gbOBB26Wn2hF4bk3Tu+BNMFbvMjPbkVlC2hcFuQJdH4T2i/dtauyTpJbD/6ExHR9XYVhdhdMs0JsjP/Q5FNoWh2ff9YbZVpDQSTPvusUp4liLjPfa/i0t+2LpNCeWy8Y+V9gUlDWiyYwrfMVI0UwNCZZKHs1Unpc11/4HLitQRtvuk0Ot5qwwBxbmtvCDKZvj1aFBid71/mYdGRPYZMIxq1zgP1acePC1zfTG/lvuQ7d0Pe0kaw==' >> ~/.ssh/known_hosts
            git push git@heroku.com:production-bestpractices.git $CIRCLE_SHA1:refs/heads/master
      - run:
          name: Setup Heroku
          command: bash .circleci/setup-heroku.sh
      - run:
          name: Migrate DB for Production
          command: |
            heroku run rake db:migrate --app production-bestpractices
          no_output_timeout: 400s
workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy-master:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy-staging:
          requires:
            - build
          filters:
            branches:
              only: staging
      - deploy-production:
          requires:
            - build
          filters:
            branches:
              only: production
