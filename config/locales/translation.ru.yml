# WARNING. THIS FILE WAS AUTO-GENERATED BY THE TRANSLATION GEM.
# IF YOU UPDATE IT, YOUR CHANGES WILL BE LOST AT THE NEXT SYNC.
#
# To update this file, use this translation interface:
# http://translation.io/david-a-wheeler/cii-best-practices-badge/ru
#
---
ru:
  helpers:
    select:
      prompt: 'Выберите: '
    submit:
      create: Создать %{model}
      update: Обновить %{model}
      submit: Сохранить %{model}
  hello: Здравствуй, мир
  submit:
  projects_count:
    one: "%{count} проект"
    other: "%{count} проекта"
    zero: Нет проектов
    few: "%{count} проекта"
    many: "%{count} проектов"
  feed_title: Значок "Передовая практика CII" - обновленные проекты
  project_name_unknown: "(Название неизвестно)"
  locale_name:
    en: Английский / English (en)
    de: Немецкий / Deutsch (de)
    fr: Французский / Français (fr)
    ja: Японский / 日本語 (ja)
    ru: Русский (ru)
    zh-CN: Китайский (упрощенный) / 简体 中文 (zh-CN)
  layouts:
    cii_best_practices: Передовая практика CII
    projects: Проекты
    users: Пользователи
    account: Учетная запись
    profile: Профиль
    settings: Настройки
    logout_html: <span class="glyphicon glyphicon-log-out"></span> Выйти
    signup_html: <span class="glyphicon glyphicon-user"></span> Зарегистрироваться
    login_html: <span class="glyphicon glyphicon-log-in"></span> Войти в систему
    footer_text_html: '<small> <strong>Нужна помощь? Есть вопрос? Видите ошибку? Пожалуйста,
      отправьте <em><a href="mailto:&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;">электронное
      письмо</a></em> или <em><a href="https://github.com/coreinfrastructure/best-practices-badge/issues"
      target="_blank">вопрос на GitHub</a></em>.</strong> © 2015-2017 <a href="https://www.coreinfrastructure.org/"
      target="_blank">Core Infrastructure Initiative</a>, a <a href="https://www.linuxfoundation.org/"
      target="_blank">Linux Foundation</a> Collaborative Project. All Rights Reserved.
      Please see our <a href="https://www.linuxfoundation.org/privacy" target="_blank">privacy
      policy</a> and <a href="https://www.linuxfoundation.org/terms" target="_blank">terms
      of use</a>. </small>

'
    choose_locale: Выберите язык
  admin_only: Только администратор.
  account_activations:
    activated: Учетная запись активирована!
    failed_activation: Недействительная ссылка активации
  password_resets:
    forgot_password: Забыли пароль?
    reset_password: Сброс пароля
    password_confirmation: Подтверждение
    email_not_found: Адрес электронной почты не найден
    password_empty: Пароль не может быть пустым
    password_reset: Пароль был сброшен
    instructions_sent: Вам отправлено электронное письмо с инструкцией по сбросу пароля
    cant_reset_nonlocal: К сожалению, сбросить пароль для другого пользователя невозможно.
    reset_expired: Истекло время на сброс пароля.
    update_password: Обновление пароля
  sessions:
    login_header:
    login_with_github_html:
    or:
    email: Электронная почта
    password: Пароль
    forgot_password: Забыли пароль?
    remember_me: Помнить меня
    login_custom:
    no_custom:
    already_logged_in:
    incorrect_login_info:
    invalid_combo:
    signed_in: Вы вошли в систему!
    not_activated:
    signed_out: Вы вышли из системы!
  static_pages:
    home:
      badge_program: Программа значков "Передовая практика CII"
      get_your_badge: Получите ваш значок сейчас!
      p1_html: 'Значок "Передовая практика <a href="https://www.coreinfrastructure.org/">Core
        Infrastructure Initiative (CII)</a>" от <a href="https://www.linuxfoundation.org/">Linux
        Foundation (LF)</a> - это возможность для проектов свободного и открытого
        ПО (Free/Libre and Open Source Software - FLOSS) показать, что они следуют
        передовым наработкам в отрасли. С помощью данного веб-приложения проекты могут
        добровольно и бесплатно оценить, насколько они используют передовые методы
        организации разработки свободного и открытого ПО, и опубликовать результат.
        Идея значка "Передовая практика CII" навеяна многими другими значками, доступными
        для проектов на GitHub. Видящие значок смогут быстро определить, какие проекты
        FLOSS используют передовые методы и в результате с большей вероятностью создают
        более качественное и защищенное программное обеспечение.

'
      p2_html: 'Более подробную информацию о программе значков CII "Передовая практика",
        в том числе о происхождении программы и <a href=''https://github.com/coreinfrastructure/best-practices-badge/blob/master/doc/criteria.md''>критериях</a>,
        можно найти на <a href=''https://github.com/coreinfrastructure/best-practices-badge''>странице
        проекта на GitHub</a>. Имеются <a href="/ru/project_stats">проектная статистика</a>
        и <a href="/ru/criteria">статистика по критериям</a>. <a href="/ru/projects">Страница
        проектов</a> показывает участвующие проекты и позволяет делать запросы по
        базе проектов (например, вы можете найти <a href="/ru/projects?gteq=100">проекты
        со значком Passing</a>). Вы также можете взглянуть на <a href=''/ru/projects/1''>пример
        (в котором мы пытаемся получить наш собственный значок)</a>.

'
      p3_html: '<em>Конфиденциальность и юридические вопросы</em>: см. нашу <a href="https://www.linuxfoundation.org/privacy">политику
        конфиденциальности</a> и <a href="https://www.linuxfoundation.org/terms">условия
        использования</a>. Все общедоступное содержимое, не являющееся программным
        кодом, выпущено под лицензией как минимум <a href="https://creativecommons.org/licenses/by/3.0/">Creative
        Commons Attribution версии 3.0 (CC-BY-3.0)</a>; более новый содержимое, не
        являющееся кодом, выпущено под CC-BY версии 3.0 или выше (CC-BY-3.0+). Для
        коллективной ссылки или если не указано иное, пожалуйста, ссылайтесь на "CII
        Best Practices badge contributors".

'
    criteria:
      criteria: Критерии
      detailed_criteria_on_github: Подробные критерии приведены на GitHub.
      current_criteria: 'Текущее количество критериев: %{active} (действующие) + %{future}
        (будущие) = %{total} (всего).'
      criteria_must_should_suggested: 'В действующих критериях используются следующие
        ключевые слова: %{must} ОБЯЗАН (антоним - НЕДОПУСТИМО), %{should} СЛЕДУЕТ
        и %{suggested} РЕКОМЕНДУЕТСЯ.'
      criteria_na_met_details: В действующих критериях %{na_allowed} разрешает вариант
        "неприменимо" (N/A), %{met_url_required} требует URL, для удовлетворения критерию,
        %{details_present} содержит подробности в описании.
      project_counts: 'Всего записей о проектах: %{projects}; %{passing} полностью
        соответствуют критериям, и %{in_progress} в процессе.'
      project_stats_html: Вы можете просмотреть статистику по проектам с течением
        времени на странице со <a href="/project_stats">проектной статистикой</a>.
      level: Уровень
      must: '"ОБЯЗАН"'
      should: '"СЛЕДУЕТ"'
      suggested: '"РЕКОМЕНДУЕТСЯ"'
      total_active: Всего активных
      allow_na: Допускают N/A
      require_url: Требуют URL
      details: Есть подробности
      future: Будущие
      new_this_level:
  users:
    new:
      signup_header: Зарегистрироваться
      intro_html: |
        Если вы не хотите входить в систему через учетную запись GitHub,
        вы можете зарегистрироваться здесь. <br> <br> Если вы не получили свою ссылку активации,
        пожалуйста, зарегистрируйтесь снова, и мы вышлем вам новую.
      name: Имя
      email: Электронная почта
      preferred_locale: Предпочтительная локаль
      password: Пароль
      password_confirmation: Пароль ещё раз
      create_account: Создать мою учетную запись
      intro_github: 'Если у вас есть учетная запись GitHub, вы можете просто использовать
        ее для входа в систему.

'
    edit:
      update_user_info: Обновление информации о пользователе
      save_changes: Сохранить изменения
    update:
      profile_updated: Профиль обновлен
    show:
      edit_user: Изменить учетную запись
      other_projects_edit: Другие проекты, которые вы можете изменять
      see_external:
      as_admin:
      send_email_to:
      delete_link_name:
      confirm_delete: Вы уверены, что хотите удалить этого пользователя?
    destroy:
      cannot_delete_self: Удалить себя невозможно.
      user_deleted: Пользователь удален.
    redirect_existing: 'Этот пользователь уже существует. Вы хотели зайти под ним?

'
    new_activation_link_created: 'Создана новая ссылка для активации. Проверьте свою
      электронную почту, чтобы активировать учетную запись.

'
    please_log_in: Пожалуйста, войдите в систему.
  project_stats:
    index:
      project_stats_header: Статистика проектов
      all_projects: Все проекты
      projects_nontrivial: Проекты с заметным прогрессом
      projects_activity_30: Проекты, вводившие данные для значка в последние 30 дней
      daily_activity: Ежедневная активность ввода данных для значка
      reminders: Напоминания
      active_projects: Активные проекты (созданы/обновлялись в течение 30 дней)
      active_in_progress: 'Активные незавершенные проекты (созданы/обновлялись в течение
        30 дней)

'
      active_edited: 'Активные меняющиеся проекты (обновлялись в течение 30 дней)

'
      active_edited_in_progress: 'Активные меняющиеся незавершенные проекты (обновлялись
        в течение 30 дней)

'
      projects_created_since_yesterday: создано проектов за последние сутки
      projects_updated_since_yesterday: обновлено проектов за последние сутки
      projects_created_average_7_days: создано проектов в среднем за неделю
      projects_updated_average_7_days: обновлено проектов в среднем за неделю
      reminders_sent_since_yesterday: 'Напоминания, отправленные со вчерашнего дня

'
      reactivated_projects: 'Проекты с активностью, возобновившейся в пределах 14
        дней после получения напоминания

'
      admin_html: 'Как администратор вы также можете увидеть <a href="/reminders">подробности
        о напоминаниях</a>.

'
      raw_data: 'Вы также можете посмотреть на исходные данные:

'
      json_format: формат JSON
      csv_format: загружаемый формат CSV
      projects_created_updated_daily: 'Набор данных «создано проектов за последние
        сутки» означает число проектов, созданных в течение 24 часов с данного момента
        (не считая проектов, которые также были удалены в течение того же 24-часового
        периода). Аналогичным образом, «обновлено проектов за последние сутки» означает
        количество проектов, обновленных в течение 24 часов с данного момента (не
        включая проекты, которые были созданы или удалены в течение того же 24-часового
        периода). Средние значения за 7 дней показывают соответствующие средние значения
        в течение 7 дней. Вы можете выбрать цвета в легенде, чтобы скрыть и отобразить
        соответствующие данные.

'
      projects_silver:
      projects_gold:
      projects_completed_silver_and_gold:
      percent_projects_earning_badges:
  projects:
    index:
      all: Все
      passing_100:
      in_progress_variable:
      add_link: Добавить
      add_new: Добавить новый проект
      badge_status: Состояние значка
      exclude_passing:
      text_search:
      name_or_description:
      search:
    table:
      id:
      name:
      description:
      website:
      license:
      owner:
      last_achieved:
      pachieved:
      can_also_sort:
      repository_url:
      create_time:
      update_time:
      user_id:
      paren_name_unknown:
      badge_level:
    new:
      thanks_adding:
      post_delay_warning:
      new_badge:
      may_select_html:
      select_one_github:
      submit_github:
      project_already_exists:
      url_of_homepage:
      placeholder_of_homepage:
      url_of_repo:
      placeholder_of_repo:
      submit_urls:
      final_text_html:
      sign_in_first:
      new_badge_or:
      original_repos:
      fork_repos:
    edit:
      repo_url_limits: 'Можно изменить repo_url только с http на https

'
      changed_since_html: Другой пользователь внес изменения в эту запись, пока вы
        с ней работали. <br>Пожалуйста, откройте новую <a href="%{edit_url}" target="_blank">форму</a>
        и перенесите в неё свои изменения.
      successfully_updated: Проект был успешно обновлен.
      congrats_new: 'ПОЗДРАВЛЯЕМ с получением значка %{new_badge_level}! Если вы еще
        этого не сделали, пожалуйста, покажите свой значок на странице вашего проекта
        (см. ниже текст «как вставить его», если вы не знаете, как это сделать).

'
      lost_badge: Проект потерял значок.
      static_analysis_updated_html: 'Мы обновили наши требования к критерию <a href="#static_analysis">static_analysis</a>.
        Пожалуйста, добавьте обоснование для этого критерия.

'
      save_and_continue: Сохранить (и продолжить)
      submit_and_exit: Отправить (и выйти)
      submit_cc_by_3plus_html: 'Предоставляя эти данные о проекте, вы соглашаетесь
        на их публикацию как минимум под <a href="https://creativecommons.org/licenses/by/3.0/us/deed.ru"
        target="_blank">лицензией Creative Commons Attribution версии 3.0 или новее
        (CC-BY-3.0+)</a>. Это означает, что все могут свободно распространять и адаптировать
        эти данные, но они обязаны указывать авторство. Авторские права (если есть)
        сохраняются за вами, а лицензия на проект не изменяется. <br> <br>

'
      edit_status: Изменить данные для значка проекта
    show:
      edit: Изменить
      delete: Удалить
      confirm_delete: 'Вы УВЕРЕНЫ, что хотите УДАЛИТЬ ВЕСЬ проект %{project_id}?

'
      back: Назад
      owned_by:
      created_at_html:
      updated_at_html:
      last_lost_html:
      last_achieved_html:
      cc_by_3plus_html:
      cc_by_3only_html:
    form_early:
      badge_intro:
        description:
        details_html:
      level:
        0_html:
        1_html:
        2_html:
        '0': Passing
        '1': Silver
        '2': Gold
      got_badge:
        description_1:
        badge_alt:
        description_2:
        details_html:
        editing_description_html:
    form_basics:
      project_name:
        description: Каково человекочитаемое название проекта?
        details: Обратите внимание, что другие проекты могут использовать то же имя.
        placeholder: Название проекта СПО
      description:
        description: Каково краткое описание проекта?
        details: 'Укажите ключевые сведения о проекте. Используйте разметку markdown.
          Эта информация используется при отображении информации о значке.

'
        placeholder: Описание проекта
      homepage_url:
        description: Какой URL у проекта (целиком)?
        placeholder: URL веб-сайта проекта
      repo_url:
        description:
        placeholder:
      implementation_languages:
        description: 'Какие языки программирования используются для реализации проекта?

'
        details: 'Если используется более одного языка, перечислите их через запятую
          (пробелы необязательны), и отсортируйте их от наиболее до наименее используемого.
          Если список длинный, пожалуйста, перечислите по крайней мере три наиболее
          распространенных. Если языка нет (например, это проект только для документации
          или только для тестирования), используйте один символ «-» (минус). Для каждого
          языка используйте общепринятую капитализацию названия, например «JavaScript».

'
        placeholder: 'Язык(и) реализации списком через запятую, отсортированным по
          объему использования

'
      cpe:
        description_html: 'Какой код <a href="https://nvd.nist.gov/cpe.cfm">Common
          Platform Enumeration (CPE)</a> используется для проекта (если он есть)?

'
        details_html: '<a href="https://nvd.nist.gov/cpe.cfm">Common Platform Enumeration
          (CPE)</a> - это структурированная схема именования для информационных систем,
          программного обеспечения и пакетов. Она используется в ряде систем и баз
          данных для отчетов об уязвимостях.

'
        placeholder: "(Необязательно) Название в нотации CPE"
      license:
        description_html: Под какой/какими лицензией/ями выпускается проект?
        details_html: 'Используйте <a href="https://spdx.org/licenses/">формат выражения
          лицензии SPDX</a>; примеры включают «Apache-2.0», «BSD-2-Clause», «BSD-3-Clause»,
          «GPL-2.0+», «LGPL-3.0+», «MIT» и «(BSD-2-Clause OR Ruby) ".

'
        placeholder: Свободная лицензия
    misc:
      in_javascript:
        collapse_all_title:
        collapse_all:
        expand_all_title:
        expand_all:
        show_details:
        hide_details:
        show_all_details:
        hide_all_details:
        show_met_title:
        show_met_html:
        hide_met_title:
        hide_met_html:
        passing_alt: Достаточно для значка!
        barely_alt: Едва достаточно для значка.
        failing_alt: Недостаточно для значка.
        unknown_alt:
        met_url_placeholder:
        met_justification_placeholder:
        met_placeholder:
        unmet_placeholder:
        na_justification_placeholder:
        na_placeholder:
        unknown_placeholder:
      disabled_reminders:
      general_comments:
        description:
        placeholder:
      some_not_crypto_html:
      dont_use_crypto:
      future_header_html:
      toggle_details_title:
      details:
      url_required: Требуется URL
      future_criterion: Будущий критерий
      url_required_warning:
      justification_required_warning:
    delete:
      done: Проект успешно удален.
  report_mailer:
    subject_achieved_passing:
    subject_no_longer_passing:
    subject_new_project:
    subject_reminder:
    subject_project_deleted:
    new_project_heading:
    new_project_part1:
    new_project_part2:
    new_project_part3_html:
    new_project_part3_text:
    gained_level_part1:
    gained_level_part2:
    gained_level_part3:
    in_markdown_add:
    in_html_add:
    lost_level_message:
    ending:
  user_mailer:
    account_activation:
      before_html: |
        <h1>Программа значков "Передовая практика CII"</h1>
        <p>Здравствуйте, и добро пожаловать в Программу!
        Пожалуйста, перейдите по ссылке внизу для активации учетной записи:
        </p>
      before_text: |
        Здравствуйте, и добро пожаловать в Программу значков "Передовая практика CII"!

        Чтобы активировать свою учетную запись, используйте ссылку ниже:
      activate: Активировать
      subject:
    github_welcome:
      before_html:
      before_text:
      subject: Добро пожаловать в программу значков CII
    user_update:
      before_text:
      username_changed: Имя пользователя изменено.
      email_changed: Адрес электронной почты изменен.
      password_changed: Пароль изменен.
      locale_changed:
      current_state:
      after_text: Если у вас возникнут проблемы, сообщите нам об этом.
      subject:
    password_reset:
      before_html: |
        <h1>Сброс пароля</h1>

        <p>Чтобы сбросить пароль, перейдите по ссылке ниже:</p>
      before_text: 'Чтобы сбросить свой пароль, перейдите по ссылке ниже:

'
      after_html: |
        <p>Срок действия этой ссылки истечет через два часа.</p>

        <p>
        Если вы не запрашивали сброс пароля,
        пожалуйста, проигнорируйте это письмо и
        пароль останется таким, какой он есть.
        </p>
      after_text: |
        Срок действия этой ссылки истечет через два часа.

        Если вы не запрашивали сброс пароля,
        пожалуйста, проигнорируйте это письмо и
        пароль останется таким, какой он есть.
      subject: Сброс пароля
      reset_password: Сбросить пароль
  criteria:
    '0':
      description_good:
        description: Веб-сайт проекта ОБЯЗАН кратко описывать, что делает программное
          обеспечение (какую проблему решает?).
        details: Описание ОБЯЗАНО быть на языке, который могут понять потенциальные
          пользователи (например, с минимумом жаргона).
        met_placeholder: "(Необязательно) Где находится краткое описание? Возможно,
          стоит указать URL."
      interact:
        description: 'Веб-сайт проекта ОБЯЗАН предоставлять информацию о том, как:
          получать и предоставлять обратную связь (например, отчеты об ошибках или
          улучшения) и вносить свой вклад в программное обеспечение.

'
        met_placeholder: "(Необязательно) Где находится краткое описание? Возможно,
          стоит указать URL."
      contribution:
        description: 'Описание того, как сделать вклад, ОБЯЗАНО объяснять процесс
          внесения вклада (например, используются ли pull request''ы).

'
        details: Мы предполагаем, что <a href="https://guides.github.com/activities/contributing-to-open-source/">проекты
          на GitHub используют issues и pull requests</a>, если не указано иное. Эта
          информация может быть короткой, например, ограничиваясь лишь указанием,
          что проект использует pull requests, issue tracker или сообщения в список
          рассылки (какой?).
        met_placeholder: "(Требуется URL) Каков процесс? По какому URL можно найти
          его объяснение?"
      contribution_requirements:
        description: В информацию о том, как внести вклад, СЛЕДУЕТ включать требования
          к приемлемым взносам (например, ссылку на любой требуемый стандарт кодирования).
        unmet_placeholder: Почему требования настолько очевидны, что эта информация
          не нужна?
      floss_license:
        description: ПО, создаваемое проектом, ОБЯЗАНО быть выпущено под свободной
          (FLOSS) лицензией.
        details: 'Свободное ПО (далее СПО) - это программное обеспечение, которое
          соответствует <a href="https://ru.wikipedia.org/wiki/%D0%9E%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_Open_Source">Определению
          Открытого ПО</a> (<a href="https://opensource.org/osd-annotated">официальный
          текст на англ.</a>) или <a href="https://www.gnu.org/philosophy/free-sw.ru.html">Определению
          Свободного Программного Обеспечения</a>. Примеры таких лицензий включают
          <a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>, <a
          href="https://opensource.org/licenses/MIT">MIT</a>, <a href="https://opensource.org/licenses/BSD-2-Clause">BSD
          2-Clause</a>, <a href="https://opensource.org/licenses/BSD-3-Clause">BSD
          3-Clause</a>, <a href="https://opensource.org/licenses/Apache-2.0">Apache
          2.0</a>, <a href="https://opensource.org/licenses/lgpl-license">Меньшая
          стандартная общественная лицензия GNU (LGPL)</a> и <a href="https://opensource.org/licenses/gpl-license">Стандартная
          общественная лицензия GNU (GPL)</a>. Для наших целей это означает, что лицензия
          ОБЯЗАНА быть: <ul> <li><a href="https://opensource.org/licenses">одобренной
          Open Source Initiative (OSI)</a>, или</li> <li><a href="https://www.gnu.org/licenses/license-list.html">свободной
          лицензией, одобренной Фондом Свободного Программного Обеспечения (FSF)</a>,
          или</li> <li><a href="https://www.debian.org/legal/licenses/">свободной
          лицензией, приемлемой для ветки main проекта Debian</a>, или</li> <li><a
          href="https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing">«хорошей»
          лицензией в понимании Fedora</a>.</li> </ul> ПО МОЖЕТ одновременно лицензироваться
          на других условиях (например, приемлема комбинация «GPLv2 или закрытая лицензия»).

'
      floss_license_osi:
        description: 'РЕКОМЕНДУЕТСЯ, чтобы все варианты лицензий для ПО, создаваемого
          проектом, были <a href="https://opensource.org/licenses">одобрены Open Source
          Initiative (OSI).</a>

'
        details: 'Для одобрения OSI используется строгий процесс, чтобы определить,
          какие лицензии соответствуют Открытому ПО.

'
      license_location:
        description: 'Проект ОБЯЗАН публиковать лицензию или лицензии своих результатов
          в стандартном расположении в своем репозитории исходного кода.

'
        details: 'Например, в качестве файла верхнего уровня с именем LICENSE или
          COPYING. Имена файлов лицензии МОГУТ сопровождаться расширением, таким как
          «.txt» или «.md».

'
      documentation_basics:
        description: Проект ОБЯЗАН предоставлять базовую документацию для программного
          обеспечения, создаваемого проектом.
        details: 'Эта документация должна быть в некоторых формах (таких как текст
          или видео), которые включают в себя: как установить программное обеспечение,
          как его запустить, как его использовать (возможно, с помощью учебника с
          примерами) и как использовать его безопасно (например, что делать и чего
          не делать), если эти темы применимы для данного программного обеспечения.
          Документация по безопасности не обязательно должна быть длинной. Проект
          МОЖЕТ использовать гипертекстовые ссылки для не-проектных материалов в качестве
          документации. Если проект не создает программное обеспечение, выберите «неприменимо»
          (N/A).

'
        met_placeholder: "(Необязательно) Какие URL-адреса являются отправными точками
          для документации?"
      documentation_interface:
        description: Проект ОБЯЗАН предоставлять справочную документацию, описывающую
          внешний интерфейс (как входной, так и выходной) программного обеспечения,
          создаваемого проектом.
        details: 'Документация внешнего интерфейса объясняет конечному пользователю
          или разработчику, как его использовать. Это может включать в себя интерфейс
          прикладного программирования (API), если программное обеспечение его имеет.
          Если это библиотека, документируйте основные классы/типы и методы/функции,
          которые можно вызвать. Если это веб-приложение, определите его URL-интерфейс
          (часто его интерфейс REST). Если это интерфейс командной строки, документируйте
          параметры и настройки, которые он поддерживает. Во многих случаях лучше
          всего, если большая часть этой документации будет автоматически сгенерирована,
          чтобы эта документация была синхронизирована с программным обеспечением
          по мере его изменения, но это не требуется. Проект МОЖЕТ использовать гипертекстовые
          ссылки для не-проектных материалов в качестве документации. Документация
          МОЖЕТ быть автоматически сгенерирована (там, где это применимо, это часто
          наилучший способ создания документации). Документация интерфейса REST может
          быть сгенерирована с использованием Swagger/OpenAPI. Документация по интерфейсу
          кода МОЖЕТ быть сгенерирована с использованием таких инструментов, как <a
          href="http://usejsdoc.org/">JSDoc</a> (JavaScript), <a href="https://esdoc.org/">ESDoc</a>
          (JavaScript), pydoc (Python) и Doxygen (многие языки). Просто иметь комментарии
          в коде реализации недостаточно для выполнения этого критерия; должен быть
          простой способ увидеть информацию без чтения всего исходного кода. Если
          проект не создает программное обеспечение, выберите «неприменимо» (N/A).

'
      sites_https:
        description: 'Сайты проекта (веб-сайт, репозиторий и URL-адреса для загрузки)
          ОБЯЗАНЫ поддерживать HTTPS с использованием TLS.

'
        details: 'Вы можете получить бесплатные сертификаты от <a href="https://letsencrypt.org/">проекта
          Let''s Encrypt</a>. Проекты МОГУТ реализовать этот критерий, используя (например)
          <a href="https://help.github.com/articles/securing-your-github-pages-site-with-https/">GitHub
          Pages</a>, <a href="https://about.gitlab.com/2016/12/24/were-bringing-gitlab-pages-to-community-edition/">GitLab
          Pages</a> или <a href="https://sourceforge.net/blog/introducing-https-for-project-websites/">проектные
          страницы SourceForge</a>. Если вы используете GitHub Pages с пользовательскими
          доменами, вы МОЖЕТЕ использовать сеть доставки контента (CDN) в качестве
          прокси для поддержки HTTPS, например, описанную в <a href="https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/">записи
          «Secure and fast GitHub Pages with CloudFlare»</a>, чтобы удовлетворить
          этот критерий. Если вы поддерживаете HTTP, мы настоятельно рекомендуем перенаправить
          HTTP-трафик на HTTPS.

'
      discussion:
        description: Проект ОБЯЗАН иметь один или несколько механизмов для обсуждения
          (включая предлагаемые изменения и проблемы), которые доступны для поиска,
          позволяют ссылаться на сообщения и темы по URL, позволяют новым людям участвовать
          в некоторых обсуждениях и не требуют установки на стороне клиента проприетарного
          программного обеспечения.
        details: Примерами приемлемых механизмов являются архивируемые списки рассылки,
          обсуждения в GitHub issues и pull requests, Bugzilla, Mantis и Trac. Асинхронные
          механизмы обсуждения (например, IRC) приемлемы, если они отвечают этим критериям;
          убедитесь, что есть механизм архивирования URL-адресов. Разрешено, хотя
          и не рекомендуется, использовать проприетарный JavaScript.
      english:
        description: 'Проекту СЛЕДУЕТ предоставлять документацию на английском языке
          и иметь возможность принимать отчеты об ошибках и комментарии о коде на
          английском языке.

'
        details: 'Английский в настоящее время является <a href="https://ru.wikipedia.org/wiki/%D0%9B%D0%B8%D0%BD%D0%B3%D0%B2%D0%B0_%D1%84%D1%80%D0%B0%D0%BD%D0%BA%D0%B0">лингва
          франка</a> компьютерной техники; Поддержка английского языка увеличивает
          число потенциальных разработчиков и рецензентов во всем мире. Проект может
          соответствовать этому критерию, даже если английский не является основным
          языком его ключевых разработчиков.

'
      repo_public:
        description: 'Проект ОБЯЗАН иметь репозиторий исходного кода с контролем версий,
          который является общедоступным и имеет URL.

'
        details: 'URL МОЖЕТ быть таким же, как URL проекта. Проект МОЖЕТ использовать
          частные (непубличные) ветви в конкретных случаях, когда изменение не выпускается
          публично (например, для устранения уязвимости до того, как она будет открыта
          для публики).

'
      repo_track:
        description: 'Проектный репозиторий исходного кода ОБЯЗАН отслеживать, какие
          изменения были внесены, кто внес изменения и когда изменения были сделаны.

'
      repo_interim:
        description: 'Чтобы обеспечить возможность для проверки другими участниками,
          проектный репозиторий исходного кода ОБЯЗАН включать промежуточные версии
          для проверки между релизами; НЕДОПУСТИМО хранить в репозитории лишь финальные
          версии.

'
        details: 'Проекты МОГУТ опускать отдельные промежуточные версии из своих публичных
          репозиториев (например, те, которые фиксируют отдельные не обнародованные
          уязвимости, никогда не будут публично выпущены или включают материалы, которые
          не могут быть опубликованы на законных основаниях и не находятся в финальной
          версии).

'
      repo_distributed:
        description: 'РЕКОМЕНДУЕТСЯ, использовать распространенное программное обеспечение
          для управления версиями (например, git) для репозитория исходного кода проекта.

'
        details: 'Не требуется именно git, и проекты могут использовать централизованное
          программное обеспечение для управления версиями (например, Subversion) с
          обоснованием.

'
      version_unique:
        description: 'Результаты проекта ОБЯЗАНЫ иметь уникальный идентификатор версии
          для каждой версии, предназначенной для конечных пользователей.

'
        details: 'Это МОЖНО выполнить различными способами, включая идентификаторы
          коммита (например, идентификатор коммита git или идентификатор набора изменений
          mercurial) или номер версии (включая номера версий, которые используют семантическое
          версионирование или схемы на основе даты, такие как YYYYMMDD).

'
      version_semver:
        description: 'РЕКОМЕНДУЕТСЯ использовать <a href="http://semver.org/lang/ru/">семантическое
          версионирование</a>.

'
        details: 'МОЖНО использовать в качестве номеров версий другие схемы нумерации
          версий, такие как идентификаторы коммитов (например, идентификатор коммита
          в git или идентификатор набора изменений в mercurial) или схемы на основе
          даты, такие как YYYYMMDD, поскольку они уникальны. Некоторые альтернативы
          могут вызвать трудности, поскольку пользователи могут быть не в состоянии
          легко определить, используют ли они последнюю версию. SemVer может оказаться
          менее полезным для идентификации версий программного обеспечения, если все
          получатели используют только последнюю версию (например, это код для одного
          веб-сайта или интернет-сервиса, который постоянно обновляется с помощью
          непрерывной доставки).

'
      version_tags:
        description: 'Проектам РЕКОМЕНДУЕТСЯ идентифицировать каждый выпуск в своей
          системе контроля версий. Например, при использовании git РЕКОМЕНДУЕТСЯ идентифицировать
          каждую версию, используя теги git.

'
      release_notes:
        description: 'Проект ОБЯЗАН предоставлять с каждой выпускаемой версией замечания
          к выпуску - удобочитаемые человеком сведения об основных изменениях в этом
          выпуске, помогающие пользователям определить, должны ли они обновляться
          и какими будут последствия обновления. НЕДОПУСТИМО делать замечания к выпуску
          сырым выводом журнала управления версиями (например, результаты команды
          «git log» не являются замечаниями к выпуску). Проекты, результаты которых
          не предназначены для повторного использования в нескольких местах (например,
          программное обеспечение для одного веб-сайта или службы) И выдаются через
          непрерывную доставку (continuous delivery) МОГУТ выбрать «неприменимо» (N/A).

'
        details: 'Замечания к выпуску МОГУТ быть реализованы различными способами.
          Многие проекты предоставляют их в файле с именем «NEWS», «CHANGELOG» или
          «ChangeLog», возможно с расширениями, такими как «.txt», «.md» или «.html».
          Исторически термин «журнал изменений» означал журнал <em>для каждого</em>
          изменения, но для соответствия этим критериям требуется человекочитаемая
          сводка. Замечания к выпуску МОГУТ вместо этого быть предоставлены механизмами
          системы контроля версий, такими как <a href="https://github.com/blog/1547-release-your-software">процесс
          GitHub Releases</a>.

'
      release_notes_vulns:
        description: 'Замечания по выпуску ОБЯЗАНЫ упоминать каждую общеизвестную
          уязвимость, исправленную ​​в каждой новой версии. Это «неприменимо» (N/A),
          если нет заметок о выпуске или не было обнародованных уязвимостей.

'
      report_process:
        description: 'Проект ОБЯЗАН предоставить пользователям возможность отправлять
          сообщения об ошибках (например, используя систему отслеживания ошибок или
          список рассылки).

'
      report_tracker:
        description: 'СЛЕДУЕТ использовать трекер вопросов (issue tracker) для отслеживания
          отдельных вопросов.

'
        unmet_placeholder: Почему нет трекера?
      report_responses:
        description: 'Проект ОБЯЗАН подтверждать получение большинства сообщений об
          ошибках, отправленных за последние 2-12 месяцев (включительно); подтверждение
          не обязательно включает исправление.

'
      enhancement_responses:
        description: 'Проекту СЛЕДУЕТ реагировать на большинство (&gt;50%) запросов
          на улучшения в течение последних 2-12 месяцев (включительно).

'
        details: 'В качестве ответа МОЖЕТ быть «нет» или обсуждение выгод от данного
          улучшения. Цель состоит в том, чтобы по крайней мере на некоторые запросы
          был какой-то ответ, что указывает на то, что проект все еще жив. Для целей
          этого критерия не нужно учитывать поддельные запросы (например, от спамеров
          или автоматизированных систем). Если проект больше не принимает улучшения,
          выберите «неудовлетворенный» и укажите URL, проясняющий ситуацию для пользователей.
          Если проект большую часть времени перегружен количеством запросов на улучшения,
          выберите «не удовлетворяет» и объясните.

'
      report_archive:
        description: 'Проект ОБЯЗАН иметь общедоступный архив для отчетов и ответов
          для последующего поиска.

'
      vulnerability_report_process:
        description: 'Проект ОБЯЗАН публиковать процесс уведомления об уязвимостях
          на сайте проекта.

'
        details: 'Например, четко обозначенный почтовый адрес на https://PROJECTSITE/security,
          часто в форме security@example.org. Процесс МОЖЕТ быть таким же, как и процесс
          для отчетов об ошибках. Отчеты об уязвимостях МОГУТ быть всегда общедоступными,
          но многие проекты имеют приватный механизм для отправки отчетов об уязвимостях.

'
      vulnerability_report_private:
        description: 'Если поддерживаются приватные отчеты об уязвимости, проект ОБЯЗАН
          включить описание того, как отправлять сведения конфиденциальным способом.

'
        details: 'Примеры включают приватный отчет о дефектах, отправленный в Интернете
          с использованием HTTPS (TLS) или электронной почты, зашифрованной с использованием
          OpenPGP. Если отчеты об уязвимостях всегда являются общедоступными (поэтому
          нет приватных отчетов об уязвимостях), выберите «неприменимо» (N/A).

'
      vulnerability_report_response:
        description: 'Время первоначального отклика проекта на любой отчет об уязвимости,
          полученный за последние 6 месяцев, ДОЛЖНО быть 14 дней или меньше.

'
        details: 'Если за последние 6 месяцев не было обнаружено никаких уязвимостей,
          выберите «неприменимо» (N/A).

'
      build:
        description: Если программное обеспечение, создаваемое проектом, требует сборки
          для использования, проект ОБЯЗАН предоставить рабочую систему сборки, которая
          может автоматически пересобирать программное обеспечение из исходного кода.
        details: Система сборки определяет, какие действия необходимо предпринять
          для пересборки программного обеспечения (и в каком порядке), а затем выполняет
          эти действия. Например, она может вызывать компилятор для компиляции исходного
          кода. Если исполняемый файл создается из исходного кода, должна иметься
          возможность изменить исходный код проекта, а затем сгенерировать обновленный
          исполняемый файл с этими изменениями. Если программное обеспечение, создаваемое
          проектом, зависит от внешних библиотек, система сборки <em>не</em> обязана
          пересобирать эти внешние библиотеки. Если для использования программного
          обеспечения после изменения его исходного кода пересборка не требуется,
          выберите «неприменимо» (N/A).
      build_common_tools:
        description: 'РЕКОМЕНДУЕТСЯ использовать общеупотребительные инструменты для
          сборки программного обеспечения.

'
        details: Например, Maven, Ant, cmake, autotools, make или rake.
      build_floss_tools:
        description: Для сборки проекта СЛЕДУЕТ использовать только инструменты со
          свободными (FLOSS) лицензиями.
      test:
        description: 'Проект ОБЯЗАН использовать по крайней мере один автоматизированный
          набор тестов, опубликованный как свободное ПО (этот набор тестов может поддерживаться
          как отдельный проект свободного ПО).

'
        details: 'Проект МОЖЕТ использовать несколько автоматизированных наборов тестов
          (например, тот, который работает быстро, а другой - более тщательный, но
          требует специального оборудования).

'
      test_invocation:
        description: 'Набор тестов СЛЕДУЕТ запускать стандартным способом для этого
          языка.

'
        details: 'Например, «make check», «mvn test» или «rake test».

'
      test_most:
        description: 'РЕКОМЕНДУЕТСЯ охватывать набором тестов большинство (а в идеале
          все) ветви кода, поля ввода и функциональные возможности.

'
      test_continuous_integration:
        description: 'РЕКОМЕНДУЕТСЯ реализовать непрерывную интеграцию (при которой
          новый или измененный код с высокой частотой включается в центральный репозиторий
          кода, и на получившейся базе кода запускаются автоматические тесты).

'
      test_policy:
        description: 'Проект ОБЯЗАН иметь общую политику (формальную или нет), обязывающую
          добавлять тесты в набор автоматических тестов по мере добавления новых функциональных
          возможностей к программному обеспечению, создаваемому проектом.

'
        details: 'Если есть действующая политика, хотя бы «из уст в уста», которая
          говорит, что разработчики должны добавлять тесты в набор автотестов для
          новой функциональности, указывайте «соответствует».

'
      tests_are_added:
        description: 'Проект ОБЯЗАН иметь доказательства того, что критерий <a href="#test_policy">test_policy</a>
          о добавлении тестов соблюдался при недавних крупных изменениях ПО, создаваемого
          проектом.

'
        details: 'Крупная функциональность обычно упоминается в замечаниях к выпуску.
          Совершенство не требуется, просто доказательство того, что на практике тесты
          обычно добавляются в набор автотестов, когда к ПО, создаваемому проектом,
          добавляются новые крупные функции.

'
      tests_documented_added:
        description: 'РЕКОМЕНДУЕТСЯ, чтобы эта политика добавления тестов (см. <a
          href="#test_policy">критерий test_policy</a>) была <em>задокументирована
          </em> в инструкции к предложениям об изменениях.

'
        details: 'Однако даже неформальное правило приемлемо, если тесты добавляются
          на практике.

'
      warnings:
        description: 'Проект ОБЯЗАН включать один или несколько предупреждающих флагов
          компилятора, «безопасный» языковой режим или использовать отдельный инструмент
          «linter» для поиска ошибок качества кода или типовых простых ошибок, если
          есть хотя бы один инструмент на свободном ПО, который может реализовать
          этот критерий на выбранном языке.

'
        details: 'Примером предупреждающего флага компилятора может служить "-Wall"
          для gcc/clang. Примеры «безопасного» языкового режима включают «use strict»
          в JavaScript и «use warnings» в perl5. Отдельный инструмент «linter» - это
          просто инструмент, который исследует исходный код для поиска ошибок качества
          кода или типовых простых ошибок. Всё это обычно включается в исходный код
          или инструкции сборки.

'
      warnings_fixed:
        description: 'Проект ОБЯЗАН обращать внимание на предупреждения.

'
        details: 'Речь о предупреждениях, найденных при выполнении критерия <a href="#warnings">warnings</a>.
          Проект должен исправлять предупреждения или отмечать их в исходном коде
          как ложные срабатывания. В идеале не должно быть никаких предупреждений,
          но проект МОЖЕТ принимать существование каких-то предупреждений (обычно
          менее 1 предупреждения на 100 строк или менее 10 предупреждений).

'
      warnings_strict:
        description: ЖЕЛАТЕЛЬНО, чтобы проекты использовали наиболее жёсткий режим
          предупреждений в производимом ПО там, где это целесообразно.
        details: 'Некоторые предупреждения не могут быть эффективно задействованы
          в некоторых проектах. Что необходимо в этом критерии - это доказательства
          того, что проект стремится включать флаги предупреждений там, где это возможно,
          чтобы ошибки обнаруживались на ранней стадии.

'
      know_secure_design:
        description: 'По крайней мере один основной разработчик на проекте ОБЯЗАН
          знать, как проектировать безопасное программное обеспечение.

'
        details: 'Это требует понимания следующих принципов проектирования, в том
          числе 8 принципов из <a href="http://web.mit.edu/Saltzer/www/publications/protection/">Saltzer
          and Schroeder</a>: <ul> <li>экономичность механизма (поддерживать дизайн
          ПО как простым и компактным, так и практичным, например, с помощью массовых
          упрощений) <li>отказобезопасные значения по умолчанию (доступ по умолчанию
          должен быть запрещен, а установка проектов по умолчанию должна быть в защищенной
          конфигурации) <li>полное отграничение (любой доступ, который может быть
          ограничен, должен проверяться на достаточность прав доступа и не иметь обходных
          путей) <li>открытый дизайн (механизмы безопасности должны полагаться не
          на незнание их злоумышленником, а на более простым образом защищаемые и
          изменяемые  данные, типа ключей и паролей) <li>разделение привилегий (в
          идеале доступ к важным объектам должен зависеть от более чем одного условия,
          так чтобы взлом одной системы защиты не приводил к полному доступу; напр.,
          многофакторная аутентификация, такая как требование и пароля, и аппаратного
          токена, сильнее однофакторной) <li>минимальные привилегии (процессы должны
          работать с минимальными привилегиями, необходимыми для выполнения ими своих
          функций) <li>наименее общий механизм (дизайн должен минимизировать механизмы,
          общие для нескольких пользователей, и следовательно зависящие от всех этих
          пользователей, например, каталоги для временных файлов) <li>психологическая
          приемлемость (человеческий интерфейс должен быть спроектирован для удобства
          использования - может помочь разработка для «наименьшего удивления») <li>ограничение
          периметра атаки (периметр атаки - множество разных точек, в которых злоумышленник
          может попытаться ввести или извлечь данные - должен быть ограничен) <li>подтверждение
          ввода с помощью белых списков (входы обычно должны проверяться, на корректность
          до их принятия; эта проверка должна использовать белые списки (которые принимают
          только известные значения), а не черные списки (которые пытаются перечислить
          известные плохие значения)). </ul> «Основной разработчик» в проекте - это
          любой, кто знаком с базой кода проекта, без затруднений может вносить в
          него изменения и признан таковым большинством других участников проекта.
          Основной разработчик, как правило, неоднократно вносит вклад в течение последнего
          года (через код, документацию или ответы на вопросы). Разработчики обычно
          считаются основными разработчиками, если они инициируют проект (и не покинули
          проект более трех лет назад), имеют возможность получать информацию по закрытому
          каналу для отчетов об уязвимостях (если таковой имеется), могут принимать
          коммиты от имени проекта или делать финальные релизы программного обеспечения
          проекта. Если есть только один разработчик, этот человек является основным
          разработчиком.

'
      know_common_errors:
        description: 'По крайней мере, один из основных разработчиков проекта ОБЯЗАН
          знать об общих видах ошибок, которые приводят к уязвимостям в этом виде
          программного обеспечения, а также по крайней мере одному методу противодействия
          или смягчения каждого из них.

'
        details: 'Примеры (в зависимости от типа ПО) включают внедрение SQL-кода (injection),
          внедрение на уровне ОС, классическое переполнение буфера, межсайтовый скриптинг,
          отсутствие проверки подлинности и отсутствие авторизации. Обычно используемые
          списки уязвимостей можно найти в <a href="http://cwe.mitre.org/top25/">CWE/SANS
          top 25</a> или <a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project">OWASP
          Top 10</a>.

'
      crypto_published:
        description: 'Программное обеспечение, созданное проектом, ОБЯЗАНО использовать
          по умолчанию только публикуемые криптографические протоколы и алгоритмы,
          которые анализируются экспертами (если используются криптографические протоколы
          и алгоритмы).

'
        details: 'Эти криптографические критерии не всегда применяются, поскольку
          некоторые программы не нуждаются в прямом использовании криптографических
          возможностей.

'
      crypto_call:
        description: Если программное обеспечение, создаваемое проектом, является
          приложением или библиотекой, и его основной целью является не внедрение
          криптографии, тогда для реализации криптографических функций СЛЕДУЕТ обращаться
          к программному обеспечению, специально предназначенному для этого; НЕ СЛЕДУЕТ
          повторно реализовывать свои собственные функции.
      crypto_floss:
        description: Вся функциональность программного обеспечения, создаваемого проектом,
          которая зависит от криптографии, ОБЯЗАНА быть реализована с использованием
          свободного ПО.
        details: См. <a href="https://opensource.org/osr">Требования к открытым стандартам
          для программного обеспечения в рамках Open Source Initiative (на англ.)</a>.
      crypto_keylength:
        description: Механизмы безопасности в программном обеспечении, создаваемом
          проектом, ОБЯЗАНЫ использовать стандартные длины криптографических ключей,
          которые, по крайней мере, соответствуют минимальным требованиям NIST до
          2030 года (как указано в 2012 году). Проект ОБЯЗАН предоставлять возможность
          настройки ПО таким образом, чтобы уменьшенные длины ключей были полностью
          отключены.
        details: 'Эти минимальные длины в битах перечислены далее: симметричный ключ
          - 112, модуль факторизации - 2048, дискретный логарифмический ключ - 224,
          дискретная логарифмическая группа - 2048, эллиптическая кривая - 224 и хеш
          - 224 (хеширование пароля не покрывается этой длиной, больше информации
          о хешировании пароля можно найти в <a href="#crypto_password_storage">критерии
          crypto_password_storage</a>). См. <a href="http://www.keylength.com">http://www.keylength.com</a>
          для сравнения рекомендаций по длинам криптографических ключей от различных
          организаций. Программное обеспечение МОЖЕТ допускать меньшие длины ключей
          в некоторых конфигурациях (в идеале не должно, поскольку это позволяет атаки
          через понижение длины ключа, но иногда требуется более короткая длина ключа
          для обеспечения взаимодействия с другими системами).'
      crypto_working:
        description: Механизмы безопасности по умолчанию в программном обеспечении,
          создаваемом проектом, НЕДОПУСТИМО делать зависимыми от сломанных криптографических
          алгоритмов (например, MD4, MD5, single DES, RC4, Dual_EC_DRBG) или использовать
          режимы шифрования, которые не подходят для контекста (например, режим ECB
          почти никогда не подходит, потому что внутри зашифрованного ECB текста обнаруживаются
          идентичные блоки, как можно видеть на примере <a href="https://blog.filippo.io/the-ecb-penguin/">«пингвина
          ECB»</a>, а режим CTR часто неприемлем, поскольку не выполняет аутентификацию
          и приводит к дубликатам, если состояние ввода повторяется).
        details: Во многих случаях лучше всего выбирать режим алгоритма с блочным
          шифром, предназначенный для сочетания секретности и аутентификации, например,
          Galois / Counter Mode (GCM) и EAX. Проекты МОГУТ разрешать пользователям
          включать сломанные механизмы, где это необходимо для совместимости, но в
          таких случаях пользователи знают, что они это делают.
      crypto_weaknesses:
        description: Механизмы безопасности по умолчанию в программном обеспечении,
          создаваемом проектом, НЕ СЛЕДУЕТ делать зависимыми от криптографических
          алгоритмов или режимов с известными серьезными слабостями (например, криптографический
          алгоритм хеширования SHA-1 или режим CBC в SSH).
        details: 'Проблемы, связанные с режимом CBC в SSH, обсуждаются в <a href="https://www.kb.cert.org/vuls/id/958563">описании
          уязвимости CERT: SSH CBC</a>.'
      crypto_pfs:
        description: В механизмах безопасности в программном обеспечении, создаваемом
          проектом, СЛЕДУЕТ реализовать совершенную прямую секретность для протоколов
          соглашений о ключах, чтобы ключ сеанса, произведенный из набора долгосрочных
          ключей, не мог быть скомпрометирован, если один из долгосрочных ключей скомпрометирован
          в будущем.
      crypto_password_storage:
        description: Если ПО, создаваемое проектом, требует хранить пароли для аутентификации
          внешних пользователей, НЕОБХОДИМО хранить пароли как итерированные хеши
          с солью для каждого пользователя с использованием алгоритма (итерированного)
          растяжения ключа (например, PBKDF2, Bcrypt или Scrypt).
        details: Этот критерий применяется только тогда, когда программное обеспечение
          требует проверки пользователей с использованием паролей, таких как серверные
          веб-приложения. Он не применяется в тех случаях, когда программное обеспечение
          хранит пароли для аутентификации в других системах (например, программное
          обеспечение реализует клиент для какой-либо другой системы), поскольку по
          крайней мере части этого программного обеспечения должны часто обращаться
          к нехешированному паролю.
      crypto_random:
        description: Механизмы безопасности в программном обеспечении, создаваемом
          проектом, ОБЯЗАНЫ генерировать все криптографические ключи и временные значения
          с использованием криптографически безопасного генератора случайных чисел;
          НЕДОПУСТИМО делать это с использованием генераторов, которые криптографически
          небезопасны.
        details: Криптографически безопасный генератор случайных чисел может быть
          аппаратным генератором случайных чисел или криптографически безопасным генератором
          псевдослучайных чисел (CSPRNG), использующим такие алгоритмы как Hash_DRBG,
          HMAC_DRBG, CTR_DRBG, Yarrow или Fortuna. Примеры вызовов <em>защищенных</em>
          генераторов случайных чисел включают java.security.SecureRandom в Java и
          window.crypto.getRandomValues в JavaScript. Примеры вызовов <em>небезопасных</em>
          генераторов случайных чисел включают java.util.Random в Java и Math.random
          в JavaScript.
      delivery_mitm:
        description: 'Проект ОБЯЗАН использовать механизм доставки, устойчивый против
          атак посредника (MITM). Использование https или ssh + scp является приемлемым.

'
        details: 'Еще более сильным механизмом является выпуск программного обеспечения
          в виде пакетов, подписанных цифровой подписью, поскольку это смягчает атаки
          на систему распространения, но это работает только в том случае, если пользователи
          могут быть уверены, что открытые ключи для подписей верны <em>и</em> если
          пользователи действительно проверяют подпись.

'
      delivery_unsigned:
        description: НЕДОПУСТИМО получать криптографические контрольные суммы (например,
          sha1sum) по HTTP и использовать их без проверки криптографической подписи.
        details: Эти хеши могут быть изменены при передаче.
      vulnerabilities_fixed_60_days:
        description: 'НЕДОПУСТИМО оставлять незакрытыми уязвимости средней или высокой
          степени серьезности, опубликованные более 60 дней назад.

'
        details: 'Уязвимость должна быть исправлена ​​и выпущена самим проектом (патчи
          могут быть разработаны в другом месте). Уязвимость считается опубликованной
          (для цели данного критерия) после того, как она имеет CVE с описанием, бесплатно
          доступным для общественности, (например, в <a href="https://nvd.nist.gov/">National
          Vulnerability Database</a>) или когда проект был проинформирован, и информация
          была опубликована для общественности (возможно, самим проектом). Уязвимость
          имеет среднюю и высокую степень серьезности, если ее базовая оценка по <a
          href="https://nvd.nist.gov/cvss.cfm">CVSS 2.0</a> равна 4 или выше. <strong>
          Примечание</strong>. Это означает, что пользователи могут оставаться уязвимыми
          для всех злоумышленников по всему миру на срок до 60 дней. Этот критерий
          часто намного легче удовлетворить, чем рекомендует Google в <a href="https://security.googleblog.com/2010/07/rebooting-responsible-disclosure-focus.html">Rebooting
          responsible disclosure</a>, поскольку Google рекомендует, чтобы 60-дневный
          период начинался, когда проект был уведомлен, <em>даже</em> если отчет не
          является общедоступным.

'
      vulnerabilities_critical_fixed:
        description: Проектам СЛЕДУЕТ оперативно исправлять критические уязвимости
          после сообщения о них.
      no_leaked_credentials:
        description: 'НЕДОПУСТИМА утечка действующих частных учетных данных (например,
          рабочий пароль или закрытый ключ), предназначенных для ограничения общего
          доступа, из публичных репозиториев.

'
        details: 'Проект МОЖЕТ пропускать «шаблонные» учетные данные для тестирования
          и несущественные базы данных, при условии что они не предназначены для ограничения
          общего доступа.

'
      static_analysis:
        description: 'По крайней мере, один инструмент анализа статического кода ОБЯЗАН
          применяться к любой предлагаемой основной версии создаваемого ПО до ее выпуска,
          если есть хотя бы один инструмент на свободном ПО, который реализует этот
          критерий на выбранном языке.

'
        details: 'Средство анализа статического кода анализирует программный код (как
          исходный код, промежуточный код или исполняемый файл), не выполняя его с
          конкретными входами. Для целей этого критерия предупреждения компилятора
          и «безопасные» языковые режимы не считаются инструментами анализа статического
          кода (они обычно избегают глубокого анализа, поскольку скорость имеет жизненно
          важное значение). Примеры таких статических инструментов анализа кода включают
          <a href="http://cppcheck.sourceforge.net/">cppcheck</a>, <a href="http://clang-analyzer.llvm.org/">статический
          анализатор Clang</a>, <a href="http://findbugs.sourceforge.net/">FindBugs</a>
          (включая <a href="https://h3xstream.github.io/find-sec-bugs/">FindSecurityBugs</a>),
          <a href="https://pmd.github.io/">PMD</a>, <a href="http://brakemanscanner.org/">Brakeman</a>,
          <a href="https://scan.coverity.com/">Анализатор качества Coverity</a>, и
          <a href="https://saas.hpe.com/en-us/software/sca">статический анализатор
          кода HP Fortify</a>. Более крупные списки инструментов можно найти в таких
          местах, как <a href="https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis">Wikipedia
          list of tools for static code analysis</a>, <a href="https://www.owasp.org/index.php/Static_Code_Analysis">OWASP
          information on static code analysis</a>, <a href="http://samate.nist.gov/index.php/Source_Code_Security_Analyzers.html">NIST
          list of source code security analyzers</a> и <a href="http://www.dwheeler.com/essays/static-analysis-tools.html">Wheeler''s
          list of static analysis tools</a>. <a href="https://continuousassurance.org/">SWAMP</a>
          является бесплатной платформой для оценки уязвимостей в программном обеспечении
          с использованием различных инструментов. Если для используемого языка(ов)
          реализации не используются инструменты статического анализа на свободном
          ПО, выберите «неприменимо» (N/A).

'
        na_placeholder: 'Почему этот критерий не может быть выполнен (например, для
          используемого языка не существует инструментов на свободном ПО)?

'
        met_placeholder: 'Какие инструменты статического анализа используются?

'
      static_analysis_common_vulnerabilities:
        description: 'РЕКОМЕНДУЕТСЯ, чтобы по крайней мере один из инструментов статического
          анализа, используемых для критерия static_analysis, включал правила или
          подходы для поиска распространенных уязвимостей в анализируемом языке или
          среде.

'
      static_analysis_fixed:
        description: 'Все уязвимости, связанные со средней и высокой степенью серьезности,
          обнаруженные при статическом анализе кода, ОБЯЗАНЫ своевременно исправляться
          после их подтверждения.

'
        details: 'Уязвимость имеет среднюю и высокую степень серьезности, если ее
          оценка по <a href="https://nvd.nist.gov/cvss.cfm">CVSS 2.0</a> - 4 или выше.

'
      static_analysis_often:
        description: 'РЕКОМЕНДУЕТСЯ выполнять анализ статического исходного кода при
          каждом коммите или по крайней мере ежедневно.

'
      dynamic_analysis:
        description: 'РЕКОМЕНДУЕТСЯ, чтобы к любой предлагаемой основной (major) версии
          программного обеспечения перед ее выпуском применялся по крайней мере один
          инструмент динамического анализа.

'
        details: 'Инструмент динамического анализа проверяет программное обеспечение,
          выполняя его с конкретными входными данными. Например, проект МОЖЕТ использовать
          инструмент фаззинг-тестирования (например, <a href="http://lcamtuf.coredump.cx/afl/">American
          Fuzzy Lop</a>) или сканер веб-приложений (например, <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">OWASP
          ZAP</a> или <a href="http://w3af.org/">w3af</a>). В некоторых случаях проект
          <a href="https://github.com/google/oss-fuzz#introduction">OSS-Fuzz</a> может
          быть готов применить фаззинг-тестирование к вашему проекту. Для целей этого
          критерия инструмент динамического анализа должен каким-то образом варьировать
          исходные данные, чтобы искать проблемы разного рода <em>или</em> быть автоматическим
          набором тестов с покрытием веток исполнения не менее 80%. Страница <a href="https://ru.wikipedia.org/wiki/%D0%94%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7_%D0%BA%D0%BE%D0%B4%D0%B0">Википедии
          о динамическом анализе</a> и <a href="https://www.owasp.org/index.php/Fuzzing">cтраница
          OWASP о фаззинг-тестировании</a> указывают некоторые инструменты динамического
          анализа. Использование инструмента/ов анализа МОЖЕТ, но не обязано быть
          сосредоточено на поиске уязвимостей в безопасности.

'
      dynamic_analysis_unsafe:
        description: 'РЕКОМЕНДУЕТСЯ регулярно использовать по меньшей мере один динамический
          инструмент (например, fuzzer или сканер веб-приложения) в сочетании с механизмом
          для обнаружения проблем безопасности памяти, таких как перезапись буфера,
          если программное обеспечение, создаваемое проектом, включает части, написанные
          на небезопасном языке (например, C или C++). Если проект не создает программное
          обеспечение, написанное на небезопасном языке, выберите «неприменимо» (N/A).

'
        details: 'Примерами механизмов обнаружения проблем безопасности памяти являются
          <a href="https://github.com/google/sanitizers/wiki/AddressSanitizer">Address
          Sanitizer (ASAN)</a> (доступен в GCC и LLVM), <a href="http://clang.llvm.org/docs/MemorySanitizer.html">Memory
          Sanitizer</a> и <a href="http://valgrind.org/">valgrind</a>. Другие потенциально
          используемые инструменты включают <a href="http://clang.llvm.org/docs/ThreadSanitizer.html">Thread
          Sanitizer</a> и <a href="http://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html">Undefined
          Behavior Sanitizer</a>. Достаточно широкое использование утверждений (assertions)
          тоже может подходить.

'
      dynamic_analysis_enable_assertions:
        description: 'РЕКОМЕНДУЕТСЯ, чтобы программное обеспечение, создаваемое проектом,
          включало в себя достаточно много утверждений (assertions) времени выполнения,
          проверяемых при динамическом анализе.

'
      dynamic_analysis_fixed:
        description: 'Проект ОБЯЗАН своевременно исправлять все уязвимости средней
          и высокой степени серьезности, обнаруженные при динамическом анализе кода,
          после их подтверждения.

'
        details: 'Уязвимость имеет среднюю либо высокую степень серьёзности, если
          ее базовая оценка по <a href="https://nvd.nist.gov/cvss.cfm">CVSS 2.0</a>
          равна 4. Если вы не используете динамический анализ кода и, следовательно,
          не обнаружили уязвимостей таким способом, выберите «неприменимо» (N/A).

'
      installation_common:
        description: 'СЛЕДУЕТ предоставлять возможность легко установить и удалить
          ПО, создаваемое проектом, с использованием общепринятых способов.

'
        details: 'Примеры включают использование менеджера пакетов (на уровне системы
          или языка), «make install/uninstall» (с поддержкой DESTDIR), контейнер в
          стандартном формате или образ виртуальной машины в стандартном формате.
          Процесс установки и удаления (например, его упаковка) МОЖЕТ быть реализован
          третьей стороной, при условии что он построен на свободном ПО.

'
      build_reproducible:
        description: 'Проекту РЕКОМЕНДУЕТСЯ обеспечивать <a href="https://reproducible-builds.org/">воспроизводимую
          сборку</a>.  Если сборка не требуется (например, в случае языков сценариев,
          где исходный код используется непосредственно вместо компиляции), выберите
          «N/A».

'
        details: 'Воспроизводимая сборка означает, что несколько сторон могут независимо
          повторить процесс генерации информации из исходных файлов и получить аналогичный
          результат с точностью до бита. В некоторых случаях воспроизводимости можно
          достичь путем принудительного выставления окружения. Разработчики JavaScript
          могут рассмотреть возможность использования npm shrinkwrap и webpack OccurenceOrderPlugin.
          Пользователи GCC и clang могут найти полезной опцию -frandom-seed. Среда
          сборки (включая набор инструментов) часто может быть определена для внешних
          сторон путём указания криптографической суммы (hash) для конкретного контейнера
          или виртуальной машины, которые они могут использовать для пересборки. <a
          href="https://reproducible-builds.org/docs/">В проекте reproducible-builds.org
          есть документация о том, как это сделать </a>.

'
      crypto_used_network:
        description: 'СЛЕДУЕТ поддерживать безопасные протоколы для всех сетевых коммуникаций
          в ПО, создаваемом проектом, такие как SSHv2 или новее, TLS1.2 или новее
          (HTTPS), IPsec, SFTP и SNMPv3. По умолчанию СЛЕДУЕТ отключать небезопасные
          протоколы, такие как FTP, HTTP, telnet, SSLv3 или более ранние версии, и
          SSHv1, и разрешать их только в том случае, если пользователь явным образом
          это задаёт. Если программное обеспечение, созданное проектом, не поддерживает
          сетевые коммуникации, выберите «неприменимо» (N/A).

'
      crypto_tls12:
        description: 'Если ПО, создаваемое проектом, поддерживает или использует TLS,
          ему СЛЕДУЕТ поддерживать как минимум версию TLS 1.2. Примечание: предшественник
          TLS называется SSL. Если программное обеспечение не использует TLS, выберите
          «неприменимо» (N/A).

'
      crypto_certificate_verification:
        description: Программное обеспечение, созданное проектом, ОБЯЗАНО, если оно
          поддерживает TLS, выполнять проверку сертификата TLS по умолчанию при использовании
          TLS, в том числе в подресурсах. Если программное обеспечение не использует
          TLS, выберите «неприменимо» (N/A).
        details: 'Обратите внимание, что неправильная проверка сертификата TLS является
          распространенной ошибкой. Для дальнейших сведений см. <a href="http://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html">"The
          Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser
          Software" Мартина Георгиева и др.</a> и <a href="https://blogs.gnome.org/mcatanzaro/2016/03/12/do-you-trust-this-application/">"Do
          you trust this application?" Майкла Катанзаро</a>.'
      crypto_verification_private:
        description: Если ПО, создаваемое проектом, поддерживает TLS, ему СЛЕДУЕТ
          выполнять проверку сертификата TLS по умолчанию при использовании TLS, в
          том числе в подресурсах. Если программное обеспечение не использует TLS,
          выберите «неприменимо» (N/A).
      hardened_site:
        description: 'РЕКОМЕНДУЕТСЯ, чтобы веб-сайт проекта, репозиторий (если он
          доступен через Интернет) и сайт загрузки (если он существует отдельно) включали
          в себя упрочняющие безопасность (hardening) заголовки с ужесточёнными значениями.

'
        details: 'Обратите внимание, что GitHub отвечает этому критерию. Такие сайты
          как https://securityheaders.io/ могут быстро проверить использование. Ключевыми
          заголовками для упрочнения являются: Content Security Policy (CSP), HTTP
          Strict Transport Security (HSTS), X-Content-Type-Options (выставленный в
          «nosniff»), X-Frame-Options и X-XSS-Protection.

'
      hardening:
        description: 'В ПО, создаваемом проектом, РЕКОМЕНДУЕТСЯ использовать механизмы
          упрочнения безопасности (hardening), чтобы дефекты программного обеспечения
          с меньшей вероятностью приводили к уязвимостям в безопасности.

'
        details: 'Механизмы упрочнения могут включать HTTP-заголовки, такие как Content
          Security Policy (CSP), флаги компилятора для противостояния атакам (например,
          -fstack-protector) или флаги компилятора, устраняющие неопределенное поведение.
          Для наших целей политика наименьших привилегий не считается механизмом упрочнения
          (использовать наименьшие достаточные привилегии важно, но этому посвящён
          отдельный критерий).

'
    '1':
      contribution_requirements:
        description: 'Информация о том, как внести вклад, ОБЯЗАНА включать требования
          к приемлемым взносам (например, ссылку на любой требуемый стандарт кодирования).

'
      dco:
        description: 'Проекту СЛЕДУЕТ иметь юридический механизм, через который все
          авторы содержательных взносов в ПО проекта подтверждают, что они имеют законное
          право на внесение этих взносов. Самый распространенный и легко реализуемый
          подход для этого заключается в использовании <a href="http://developercertificate.org/">Developer
          Certificate of Origin (DCO)</a>, при котором пользователи добавляют строку
          "signed-off-by" в свои коммиты, а проект ссылается на веб-сайт DCO. Но этот
          механизм МОЖЕТ быть реализован и в качестве Лицензионного соглашения с участниками
          (Contributor License Agreement, CLA) или другого правового механизма.

'
        details: 'DCO является рекомендуемым механизмом, потому что его легко реализовать
          и отслеживать в исходном коде, а git напрямую поддерживает функцию "signed-off"
          при помощи "commit -s". Для большей эффективности лучше всего, если проектная
          документация объясняет, что означает "signed-off" для этого проекта. CLA
          - это юридическое соглашение, которое определяет условия, на которых произведения
          умственного труда были лицензированы для организации или проекта. Соглашение
          о назначении участника (contributor assignment agreement, CAA) является
          юридическим соглашением, которое передает права на произведения умственного
          труда другой стороне; проекты не обязаны иметь CAA, поскольку CAA увеличивает
          риск того, что потенциальные участники не будут вносить свой вклад, особенно
          если получатель является коммерческой организацией. <a href="https://www.apache.org/licenses/">Лицензии
          CLA от Apache Software Foundation (лицензия отдельного участника и корпоративное
          соглашение CLA)</a> являются примерами CLA для проектов, считающих, что
          риски от такого рода CLA для проекта меньше, чем их преимущества.

'
      governance:
        description: 'Проект ОБЯЗАН четко определить и задокументировать модель управления
          проектом (способ принятия решений, включая ключевые роли).

'
        details: 'Требуется устоявшийся задокументированный способ принятия решений
          и разрешения споров. В небольших проектах это может быть просто вплоть до
          «владелец и лидер проекта принимает все окончательные решения». Существуют
          различные модели управления, включая благосклонное диктаторство и формальную
          меритократию; более подробно см. <a href="http://oss-watch.ac.uk/resources/governancemodels">Governance
          models</a>. В проектах успешно используются как централизованные подходы
          (например, с одним ведущим), так и децентрализованные (например, с групповыми
          ведущими). Не нужно указывать в сведениях об управлении возможность форка
          проекта, поскольку это всегда возможно для проектов СПО.

'
      code_of_conduct:
        description: 'Проект ОБЯЗАН определить правила поведения и разместить эти
          правила в стандартном месте.

'
        details: 'Проекты могут повысить цивилизованность их сообщества и установить
          ожидания относительно приемлемого поведения, приняв правила поведения. Это
          может помочь избежать проблем до их возникновения и сделать проект более
          привлекательным местом, поощряющим участие. Правила должны быть сосредоточены
          только на поведении в сообществе или на рабочем месте проекта. Примерами
          правил поведения являются <a href="http://contributor-covenant.org/">Contributor
          Covenant Code of Conduct</a> и <a href="https://www.kernel.org/doc/html/latest/process/code-of-conflict.html">правила
          конфликта</a> для проекта ядра Linux.

'
      roles_responsibilities:
        description: 'Проект ОБЯЗАН четко определять и публично документировать ключевые
          роли в проекте и их обязанности, включая любые задачи, которые должны выполнять
          эти роли. Должно быть ясно, кто имеет какую роль(и), хотя это может быть
          и не задокументировано соответствующим образом.

'
        details: 'Документация для критерия <a href="#governance">governance</a> может
          быть в одном месте с описанием ролей и обязанностей.

'
      access_continuity:
        description: 'Проект ОБЯЗАН быть в состоянии продолжать работу с минимальным
          прерыванием, если какой-либо человек окажется недееспособен или убит. В
          частности, проект ОБЯЗАН быть в состоянии создавать и закрывать вопросы
          в трекере, принимать предложенные изменения и выпускать версии программного
          обеспечения через неделю после подтверждения того, что данный человек недееспособен
          или убит. Это МОЖЕТ быть реализовано через обеспечение кого-то ещё необходимыми
          ключами, паролами и законными правами для продолжения проекта. Лица, которые
          запускают проект СПО, МОГУТ сделать это, оставив ключи в сейфе и завещание,
          передающее все необходимые юридические права (например, для имен DNS).

'
      bus_factor:
        description: Проект ОБЯЗАН иметь «коэффициент автобуса» 2 или более.
        details: '«Коэффициент автобуса» (или «коэффициент грузовика») - это минимальное
          количество участников проекта, которые должны внезапно исчезнуть из проекта
          («попасть под автобус») до того, как проект застрянет из-за отсутствия квалифицированного
          или компетентного персонала. Инструмент <a href="https://github.com/mtov/truck-factor">truck-factor</a>
          может оценить это для проектов на GitHub. Для получения дополнительной информации
          см. статью Cosentino et al. <a href="https://www.researchgate.net/publication/272824568_assessing_the_bus_factor_of_git_repositories">Assessing
          the Bus Factor of Git Repositories</a>.

'
      documentation_roadmap:
        description: 'Проект ОБЯЗАН иметь задокументированный долгосрочный план (roadmap),
          описывающий, что проект намеревается, а что не намеревается делать, по крайней
          мере на ближайший год.

'
        details: 'Проект может не достичь того, что описано в долгосрочном плане,
          и это нормально. Цель дорожной карты - помочь потенциальным пользователям
          и участникам понять намеченное направление проекта. Подробности не требуются.

'
      documentation_architecture:
        description: 'Проект ОБЯЗАН включать документацию по архитектуре (также называемой
          высокоуровневым дизайном) ПО, создаваемого проектом. Выберите «неприменимо»
          (N/A), если проект не создает программное обеспечение.

'
        details: 'Архитектура ПО объясняет фундаментальную структуру программы, то
          есть основные компоненты программы, отношения между ними и ключевые свойства
          этих компонентов и отношений.

'
      documentation_security:
        description: 'Проект ОБЯЗАН документировать то, что пользователь может и чего
          он не должен ожидать с точки зрения безопасности от ПО, создаваемого проектом
          (его «требования безопасности»).

'
        details: 'Это требования безопасности, удовлетворение которых ожидается от
          ПО.

'
      documentation_quick_start:
        description: 'Проект ОБЯЗАН предоставить руководство для быстрого начала работы
          для новых пользователей, чтобы помочь им быстро что-то сделать, используя
          ПО, создаваемое проект.

'
        details: 'Идея состоит в том, чтобы показать пользователям, как начать работу
          и и добиться, чтобы ПО что-то вообще сделало. Потенциальным пользователям
          это критически важно для начала работы.

'
      assurance_case:
        description: 'Проект ОБЯЗАН предоставить обоснование того, что требования
          безопасности соблюдаются проектом. Обоснование ДОЛЖНО включать: описание
          модели угроз, четкое указание границ доверия, доказательство того, что использовались
          принципы безопасного дизайна, и доказательство того, что слабости в безопасности
          реализации нейтрализованы.

'
        details: 'Обоснованием является «документальное подтверждение, которое дает
          убедительное и обоснованное доказательство того, что указанный набор критических
          заявлений относительно свойств системы адекватно оправдан для данного приложения
          в данной среде» (перевод выдержки из <a href="http://nvlpubs.nist.gov/nistpubs/ir/2009/ir7608.pdf">"Software
          Assurance Using Structured Assurance Case Models", Thomas Rhodes et al,
          NIST Interagency Report 7608</a>). Границы доверия - это границы, где данные
          или выполнение кода изменяют уровень доверия, например границы сервера в
          типичном веб-приложении. В обосновании обычно перечисляются принципы безопасного
          проектирования (такие как Saltzer and Schroeer) и общие слабости безопасности
          в реализации (такие как OWASP Top 10 или CWE/SANS Top 25), и показывают,
          как противодействовать каждой из них. Полезным примером может служить <a
          href="https://github.com/coreinfrastructure/best-practices-badge/blob/master/doc/security.md">BadgeApp
          assurance case</a>. Этот критерий связан с documentation_security, documentation_architecture
          и implement_secure_design.

'
      documentation_current:
        description: 'Проект ОБЯЗАН прилагать усилия к тому, чтобы документация соответствовала
          текущей версии результатов проекта (включая ПО, создаваемое проектом). Любые
          <em>известные</em> дефекты документации, делающие ее непоследовательной,
          ОБЯЗАНЫ исправляться. Если документация в целом актуальна, но ошибочно включает
          в себя некоторые более старые данные, которые больше не верны, просто рассматривайте
          это как дефект, отслеживайте и исправляйте, как обычно.

'
        details: 'Документация МОЖЕТ включать информацию о различиях или изменениях
          между версиями программного обеспечения и/или ссылку на более старые версии
          документации. Смысл этого критерия заключается в том, что прилагаются усилия
          для обеспечения согласованности документации, а не в том, чтобы документация
          была идеальной.

'
      documentation_achievements:
        description: 'Главная страница проекта и/или веб-сайта ОБЯЗАНА отмечать и
          размещать ссылку на любые свои достижения, включая этот значок передовой
          практики, в течение 48 часов после открытого признания достижения.

'
        details: 'Достижением является любой набор внешних критериев, над удовлетворением
          которых проект специально работал, включая некоторые значки. Эта информация
          не обязательно должна находиться на главной странице веб-сайта проекта.
          Проект с использованием GitHub может помещать достижения на главную страницу
          хранилища кода, добавляя их в файл README.

'
      accessibility_best_practices:
        description: 'Проекту (как на сайтах проекта, так и в результатах работы проекта)
          СЛЕДУЕТ следовать передовой практике общедоступности, чтобы люди с ограниченными
          возможностями могли участвовать в проекте и использовать результаты проекта,
          где это имеет смысл.

'
        details: |
          Для веб-приложений см. <a href="http://w3c.org.ru/wp-content/uploads/2011/10/%D1%80%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9-%D0%B0%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9-%D0%BF%D0%B5%D1%80%D0%B5%D0%B2%D0%BE%D0%B4-WCAG.pdf">Руководство по обеспечению доступности веб-контента (WCAG) 2.0</a> и его поддерживающий документ <a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/Overview.html">Understanding WCAG 2.0</a>; см. также <a href="https://www.w3.org/standards/webdesign/accessibility">W3C accessibility information</a>. Для приложений с графическим интерфейсом рассмотрите использование соответствующих вашему окружению рекомендаций по обеспечению доступности (таких как <a href="https://developer.gnome.org/accessibility-devel-guide/stable/">GNOME</a>, <a href="https://accessibility.kde.org/">KDE</a>, <a href="http://docs.xfce.org/xfce/xfce4-settings/accessibility">XFCE</a>, <href="https://developer.android.com/guide/topics/ui/accessibility/">Android</a>, <a href="https://developer.apple.com/accessibility/ios/">iOS</a>, <a href="https://developer.apple.com/accessibility/macos/">Mac</a> и <a href="https://docs.microsoft.com/ru-ru/windows/uwp/accessibility/accessibility-overview">Windows (на русском)</a>). Некоторые приложения с текстовым интерфейсом пользователя (например, программы на ncurses) могут сделать некоторые вещи, чтобы сделать себя более доступными (например, параметр `force-arrow-cursor` в `alpine`). Большинство приложений командной строки довольно общедоступны как они есть. Этот критерий часто неприменим, например, для библиотек программ. Вот несколько примеров действий или проблем, которые следует учитывать: <ul> <li>Должны предоставляться текстовые альтернативы для любого нетекстового контента, так чтобы его можно изменить на другие необходимые формы, например крупная печать, шрифт Брайля, озвучка текста, символы или упрощенный язык (<a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/text-equiv.html">Understanding WCAG 2.0 guideline 1.1</a>)
          <li>Цвет не должен использоваться в качестве единственного визуального средства передачи информации, указания на действие, запрос реакции пользователя или выделения визуальных элементов. (<a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-without-color.html">WCAG 2.0 guideline 1.4.1</a>)
          <li>Визуальное представление текста и изображений текста должно иметь контрастность не менее 4,5:1, за исключением большого текста, случайного текста и логотипов (<a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html">WCAG 2.0 guideline 1.4.3</a>)
          <li>Все функциональные возможности должны быть доступны с клавиатуры (WCAG guideline 2.1) <li>GUI или веб-проект ДОЛЖНЫ тестировать, по крайней мере, одно средство чтения экрана на целевой платформе(ах) (например, NVDA, Jaws или WindowEyes в Windows; VoiceOver на Mac и iOS; Orca на Linux/BSD; TalkBack на Android). Программы с текстовым интерфейсом пользователя МОГУТ по возможности сокращать переписывание текста на экране, чтобы предотвратить лишнее чтение средствами чтения экрана.
          </ul>
      internationalization:
        description: "Проекту СЛЕДУЕТ интернационализировать создаваемое ПО, чтобы
          обеспечить легкую локализацию под культуру, регион или язык целевой аудитории.
          Выберите «неприменимо» (N/A), если интернационализация (i18n) не применяется
          (например, ПО не генерирует текст, предназначенный для конечных пользователей,
          и не сортирует текст, читаемый человеком), \n"
        details: 'Локализация "относится к адаптации продукта, приложения или содержимого
          документа для соответствия языковым, культурным и другим требованиям конкретного
          целевого рынка (языковому стандарту)". Интернационализация - это «проектирование
          и разработка продукта, приложения или содержимого документа, которые позволяют
          легкую локализацию под целевые аудитории, различающиеся по культуре, региону
          или языку». (См. <a href="https://www.w3.org/International/questions/qa-i18n.ru">
          «Локализация по сравнению с интернационализацией» на веб-сайте W3C</a>.)
          Чтобы ПО соответствовало этому критерию, достаточно лишь интернационализации.
          Не требуется локализация для другого конкретного языка, так как после того,
          как программное обеспечение было интернационализировано, другие могут работать
          над локализацией.

'
      sites_password_security:
        description: 'Если на сайтах проекта (веб-сайт, хранилище и URL-адреса загрузки)
          хранятся пароли для аутентификации внешних пользователей, НЕОБХОДИМО хранить
          пароли как итерированные хеши с отдельной "солью" для каждого пользователя
          с использованием алгоритма (итерированного) растяжения ключа (например,
          PBKDF2, Bcrypt или Scrypt). Выберите «неприменимо» (N/A), если сайты проекта
          не хранят пароли для этой цели.

'
        details: 'Примечание: использование <a href="https://help.github.com/articles/github-security/">GitHub</a>
          автоматически удовлетворяет этот критерий. Этот критерий применяется только
          к паролям, используемым для аутентификации внешних пользователей на сайтах
          проекта. Если сайты проекта должны подключаться к другим сайтам, им может
          потребоваться хранить пароли для этой цели по-разному (поскольку использование
          такого алгоритма, как Bcrypt, сделает эти пароли бесполезными). В данном
          случае критерий crypto_password_storage применяется к сайтам проекта, по
          аналогии с критерием sites_https.

'
      maintenance_or_update:
        description: 'Проект ОБЯЗАН поддерживать наиболее часто используемые старые
          версии продукта <em>или</em> предоставлять возможность простого перехода
          на более новые версии (upgrade path). Если переход затруднен, проект ОБЯЗАН
          задокументировать порядок обновления (например, изменившиеся интерфейсы
          и подробные предлагаемые шаги для обновления).

'
      report_tracker:
        description: 'Проект ОБЯЗАН использовать трекер вопросов (issue tracker) для
          отслеживания отдельных вопросов.

'
      vulnerability_report_credit:
        description: Проект ОБЯЗАН отметить автора(-ов) всех отчетов об уязвимостях,
          разрешенных за последние 12 месяцев, за исключением авторов, которые просят
          об анонимности. Выберите «неприменимо» (N/A), если в течение последних 12
          месяцев не было обнаружено никаких уязвимостей.
      vulnerability_response_process:
        description: 'Проект ОБЯЗАН иметь документированный процесс реагирования на
          отчеты об уязвимостях.

'
        details: 'Этот критерий тесно связан с критерием vulnerability_report_process,
          который требует документированного способа для сообщения об уязвимостях.
          Он также связан с vulnerability_report_response, который требует ответа
          на отчеты об уязвимостях в течение определенного периода времени.

'
      coding_standards:
        description: 'Проект ОБЯЗАН определить определенное руководство по стилю кодирования
          для основных языков, которые он использует, и требовать его соблюдения от
          предлагаемого кода.

'
        details: 'В большинстве случаев это делается путем ссылки на некоторые существующие
          руководства по стилю, возможно, с перечислением различий. Эти руководства
          по стилю могут включать в себя способы повышения удобочитаемости и способы
          снижения вероятности дефектов (включая уязвимости). Многие языки программирования
          имеют один или несколько широко используемых руководств по стилю. Примеры
          руководств по стилю включают <a href="https://github.com/google/styleguide">Руководство
          по стилю Google</a> и <a href="https://www.securecoding.cert.org/">Стандарты
          кодирования SEI CERT</a>.

'
      coding_standards_enforced:
        description: 'Проект ОБЯЗАН автоматически применять свой выбранный стиль(и)
          кодирования, если есть хотя бы один инструмент на СПО, который может сделать
          это на выбранном языке (языках).

'
        details: 'Это МОЖЕТ быть реализовано при помощи инструмента(ов) статического
          анализа и/или путем пропускания кода через средства переформатирования.
          Во многих случаях конфигурация инструмента включена в репозиторий проекта
          (так как разные проекты могут выбирать разные конфигурации). Проекты МОГУТ
          (и, как правило, будут) допускать исключения стиля; там, где происходят
          исключения, они ОБЯЗАНЫ быть редки и документированы в соответствующих местах
          кода, чтобы эти исключения можно было пересматривать и инструменты могли
          автоматически обрабатывать их в будущем. Примеры таких инструментов включают
          ESLint (JavaScript) и Rubocop (Ruby).

'
      build_standard_variables:
        description: 'Системы сборки для нативных двоичных файлов ОБЯЗАНЫ учитывать
          соответствующие переменные (среды) для компилятора и компоновщика, переданные
          им (например, CC, CFLAGS, CXX, CXXFLAGS и LDFLAGS) и передавать их на вызовы
          компилятора и компоновщика. Система сборки МОЖЕТ расширять их дополнительными
          флагами; НЕДОПУСТИМО просто заменять предоставленные значения своими. Выберите
          «неприменимо» (N/A), если нативные двоичные файлы не создаются.

'
        details: 'Должно быть легко включить специальные функции сборки, такие как
          Address Sanitizer (ASAN), или выполнить рекомендации по упрочнению от дистрибутивов
          (например, путем простого включения флагов компилятора для этого).

'
      build_preserve_debug:
        description: 'Системам сборки и установки СЛЕДУЕТ сохранять информацию об
          отладке, если передаваемые флаги требуют этого (например, не используется
          «install -s»). Выберите «неприменимо» (N/A), если системы сборки или установки
          нет (например, для типичных библиотек JavaScript), .

'
        details: 'Например, установка CFLAGS (C) или CXXFLAGS (C++) должна создавать
          соответствующую информацию для отладки, если эти языки используются, и ее
          не следует удалять во время установки. Отладочная информация необходима
          для поддержки и анализа, а также полезна для того, чтобы определить наличие
          упрочняющих функций в скомпилированных двоичных файлах.

'
      build_non_recursive:
        description: 'НЕДОПУСТИМО, чтобы система сборки ПО, создаваемого проектом,
          рекурсивно собирала подкаталоги, если в подкаталогах есть кросс-зависимости.
          Выберите «неприменимо» (N/A), если системы сборки или установки нет (например,
          типичные библиотеки JavaScript).

'
        details: 'Информация о внутренних зависимостях системы сборки проекта должна
          быть точной, в противном случае изменения в проекте могут быть включены
          в сборку неправильно. Неправильные сборки могут привести к дефектам (включая
          уязвимости). Общей ошибкой в ​​больших системах сборки является использование
          «рекурсивной сборки» или «рекурсивного make», то есть иерархии подкаталогов,
          содержащих исходные файлы, где каждый подкаталог собирается независимо.
          Если только каждый из подкаталогов не является полностью независимым, это
          ошибка, потому что информация о зависимостях неверна.

'
      build_repeatable:
        description: 'Проект ОБЯЗАН быть в состоянии повторить процесс генерации информации
          из исходных файлов и получить такой же результат с точностью до бита. Выберите
          «неприменимо» (N/A), если в проекте не используется сборка (например, языки
          сценариев, в которых исходный код используется непосредственно вместо компиляции),
          .

'
        details: 'Пользователи GCC и clang могут найти полезной опцию -frandom-seed;
          в некоторых случаях это может быть разрешено путем задания определенного
          порядка сортировки. Дополнительные предложения можно найти на сайте <a href="https://reproducible-builds.org/">Reproducible
          builds</a>.

'
      installation_common:
        description: 'Проект ОБЯЗАН предоставлять возможность легко установить и удалить
          ПО, создаваемое проектом, с использованием общепринятых способов.

'
        details: 'Примеры включают использование менеджера пакетов (на уровне системы
          или языка), «make install/uninstall» (с поддержкой DESTDIR), контейнер в
          стандартном формате или образ виртуальной машины в стандартном формате.
          Процесс установки и удаления (например, его упаковка) МОЖЕТ быть реализован
          третьей стороной, при условии что он построен на СПО.

'
      installation_standard_variables:
        description: 'Система установки для конечных пользователей ОБЯЗАНА учитывать
          стандартные соглашения при выборе места, в которое собранные артефакты записываются
          при установке. Например, при устанавливке файлы в системе POSIX, система
          установки ОБЯЗАНА учитывать переменную окружения DESTDIR. Если установочной
          системы или стандартного соглашения нет, выберите «неприменимо» (N/A).

'
      installation_development_quick:
        description: 'Проект ОБЯЗАН предоставить возможность потенциальным разработчикам
          быстро установить все результаты проекта и поддерживать среду, необходимую
          для внесения изменений, включая тесты и тестовое окружение. Проект ОБЯЗАН
          использовать для этого общепринятые соглашения.

'
        details: 'Это МОЖЕТ быть реализовано при помощи сгенерированного контейнера
          или установочных сценариев. Внешние зависимости обычно устанавливаются путем
          вызова системных и/или языковых пакетов, как описано в критерии external_dependencies.

'
      external_dependencies:
        description: 'Проект ОБЯЗАН перечислять внешние зависимости в машинночитаемом
          виде.

'
        details: 'Обычно это делается при помощи инструкций для диспетчера пакетов
          и/или системы сборки. Обратите внимание, что это помогает реализовать критерий
          <a href="#installation_development_quick">installation_development_quick</a>.

'
      dependency_monitoring:
        description: 'Проекты ДОЛЖНЫ следить за своими внешними зависимостями или
          периодически проверять их (включая копии, сделанные для удобства) на предмет
          известных уязвимостей, а также исправлять уязвимости, которые могут быть
          использованы, или проверять невозможность их использования.

'
        details: 'Это можно сделать с помощью средств анализа происхождения/зависимостей,
          например <a href="https://www.owasp.org/index.php/OWASP_Dependency_Check">Dependency-Check
          от OWASP</a>, <a href="https://www.sonatype.com/nexus-auditor">Nexus Auditor
          от Sonatype</a>, <a href="https://www.blackducksoftware.com/products/protex">Protex
          от Black Duck</a> , <a href="http://www.protecode.com/">Protecode от Synopsys</a>
          и <a href="https://github.com/rubysec/bundler-audit">Bundler-аудит (для
          Ruby)</a>. Некоторые менеджеры пакетов включают в себя соответствующие механизмы.
          Допустимо оставлять уязвимость, если ее невозможно использовать, но такой
          анализ труден, и временами проще просто обновить или исправить эту часть
          кода.

'
      updateable_reused_components:
        description: |
          Проект ОБЯЗАН:
          <ol>
          <li> позволять легко идентифицировать и обновлять повторно используемые компоненты, поддерживаемые извне; <strong>или</strong></li>
          <li> использовать стандартные компоненты, предоставляемые системой или языком программирования.</li>
          </ol>
          В этом случае, если уязвимость обнаружена в повторно используемом компоненте, будет легко обновить этот компонент.
        details: 'Типичным способом удовлетворения этого критерия является использование
          предоставляемых операционной системой и языком программирования систем управления
          пакетами. Многие свободные программы распространяются с «библиотеками для
          удобства», которые являются локальными копиями стандартных библиотек (возможно,
          форков библиотек). Само по себе это нормально. Однако, если программа *должна*
          использовать эти локальные копии/форки, то обновление «стандартных» библиотек
          через системное обновление безопасности оставит эти дополнительные копии
          по-прежнему уязвимыми. Это особенно актуально для облачных систем; если
          провайдер облака обновляет свои «стандартные» библиотеки, но программа их
          не собирается использовать, обновления фактически не помогут. См., например,
          <a href="http://spot.livejournal.com/312320.html"> "Chromium: Why it isn''t
          in Fedora yet as a proper package" от Тома Каллавея</a>.

'
      interfaces_current:
        description: 'Проекту СЛЕДУЕТ избегать использования нерекомендуемых (deprecated)
          или устаревших (obsolete) функций и API в тех случаях, когда альтернативы
          на СПО доступны в используемом наборе технологий («стек технологий» проекта)
          и для подавляющего большинства пользователей, поддерживаемых проектом (т.е.
          так чтобы пользователи могли быстро воспользоваться этой альтернативой).

'
      automated_integration_testing:
        description: 'Автоматический набор тестов ДОЛЖЕН применяться к каждому коммиту
          в общий репозиторий по крайней мере для одной ветки. Этот набор тестов ДОЛЖЕН
          создавать отчет об успешном или неудачном тестировании.

'
        details: 'Это требование можно рассматривать как подмножество test_continuous_integration,
          но сосредоточенное только на тестировании, без требования непрерывной интеграции.

'
      regression_tests_added50:
        description: 'Проект ОБЯЗАН добавить регрессионные тесты к автоматизированному
          набору тестов по крайней мере на 50% ошибок, исправленных в течение последних
          шести месяцев.

'
      test_statement_coverage80:
        description: 'Проект ОБЯЗАН иметь автоматические тестовые пакеты на СПО, которые
          обеспечивают покрытие не менее 80% инструкций кода, если есть хотя бы один
          инструмент на СПО, который может измерять этот критерий на выбранном языке.

'
        details: 'Для измерения тестового покрытия существует множество средств на
          СПО, включая gcov/lcov, Blanket.js, Istanbul и JCov. Обратите внимание,
          что соответствие этому критерию не является гарантией того, что тестовый
          пакет является исчерпывающим; вместо этого, несоответствие этому критерию
          является сильным индикатором плохого набора тестов.

'
      test_policy_mandated:
        description: 'Проект ОБЯЗАН иметь формальную задокументированную политику
          о том, что при добавлении существенной новой функциональности НЕОБХОДИМО
          добавлять тесты для новой функциональности в набор автоматических тестов.

'
      tests_documented_added:
        description: 'Проект ОБЯЗАН включать в свои документированные инструкции для
          предложений об изменениях политику, по которой для существенной новой функциональности
          должны добавляться тесты.

'
      warnings_strict:
        description: 'Проекты ОБЯЗАНЫ быть максимально строгими с предупреждениями
          в ПО, создаваемом проектом, где это целесообразно.

'
      implement_secure_design:
        description: 'Проект ОБЯЗАН реализовывать принципы безопасного дизайна (от
          критерия «know_secure_design»), где это применимо. Выберите «неприменимо»
          (N/A), если проект не создает программное обеспечение.

'
        details: 'Например, результаты проекта должны иметь отказоустойчивые значения
          по умолчанию (доступ по умолчанию должен быть запрещен, а установка проектов
          по умолчанию должна быть в защищенной конфигурации). Также должно использоваться
          полное отграничение (любой доступ, который может быть ограничен, должен
          проверяться на достаточность прав доступа и не иметь обходных путей). Обратите
          внимание, что в некоторых случаях принципы будут противоречить друг другу,
          и в этом случае необходимо делать выбор (например, многочисленность механизмов
          может усложнять дизайн, противореча принципу экономичности/простоты механизма).

'
      crypto_weaknesses:
        description: В ПО, создаваемом проектом, НЕДОПУСТИМО делать механизмы безопасности
          по умолчанию зависимыми от криптографических алгоритмов или режимов с известными
          серьезными слабостями (например, криптографический алгоритм хеширования
          SHA-1 или режим CBC в SSH).
      crypto_algorithm_agility:
        description: 'Проекту СЛЕДУЕТ поддерживать несколько криптографических алгоритмов,
          чтобы пользователи могли быстро переключиться, если один из них поврежден.
          Общие симметричные ключевые алгоритмы включают AES, Twofish и Serpent. Общие
          алгоритмы контрольных сумм (хешей) включают SHA-2 (SHA-224, SHA-256, SHA-384
          и SHA-512) и SHA-3.

'
      crypto_credential_agility:
        description: 'Проект ОБЯЗАН поддерживать хранение данных для аутентификации
          (например, паролей и динамических токенов) и закрытых криптографических
          ключей в файлах, отдельных от остальной информации (например, файлов конфигурации,
          баз данных и журналов) и позволять пользователям их обновление и замену
          без перекомпиляции кода. Выберите «неприменимо» (N/A), если проект никогда
          не работает с данными аутентификации и закрытыми криптографическими ключами.

'
      crypto_used_network:
        description: 'СЛЕДУЕТ поддерживать безопасные протоколы для всех сетевых коммуникаций
          в ПО, создаваемом проектом, такие как SSHv2 или новее, TLS1.2 или новее
          (HTTPS), IPsec, SFTP и SNMPv3. По умолчанию СЛЕДУЕТ отключать небезопасные
          протоколы, такие как FTP, HTTP, telnet, SSLv3 или более ранние версии, и
          SSHv1, и разрешать их только в том случае, если пользователь явным образом
          это задаёт. Если программное обеспечение, созданное проектом, не поддерживает
          сетевые коммуникации, выберите «неприменимо» (N/A).

'
      crypto_tls12:
        description: 'Если ПО, создаваемое проектом, поддерживает или использует TLS,
          ему СЛЕДУЕТ поддерживать как минимум версию TLS 1.2. Примечание: предшественник
          TLS называется SSL. Если программное обеспечение не использует TLS, выберите
          «неприменимо» (N/A).

'
      crypto_certificate_verification:
        description: ПО, создаваемое проектом, ОБЯЗАНО выполнять проверку сертификата
          TLS по умолчанию при использовании TLS, в том числе в подресурсах. Если
          программное обеспечение не использует TLS, выберите «неприменимо» (N/A).
        details: 'Обратите внимание, что неправильная проверка сертификата TLS является
          распространенной ошибкой. Для дальнейших сведений см. <a href="http://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html">"The
          Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser
          Software" Мартина Георгиева и др.</a> и <a href="https://blogs.gnome.org/mcatanzaro/2016/03/12/do-you-trust-this-application/">"Do
          you trust this application?" Майкла Катанзаро</a>.'
      crypto_verification_private:
        description: Программное обеспечение, созданное проектом, ОБЯЗАНО, если оно
          поддерживает TLS, выполнять проверку сертификата TLS по умолчанию при использовании
          TLS, в том числе в подресурсах. Если программное обеспечение не использует
          TLS, выберите «неприменимо» (N/A).
      signed_releases:
        description: 'Проект ОБЯЗАН криптографически подписывать выпуски результатов
          проекта, предназначенные для широкого использования, и ОБЯЗАН иметь задокументированный
          процесс, объясняющий пользователям, как они могут получить общедоступные
          ключи подписи и проверить подпись(и) выпусков. НЕДОПУСТИМО размещать закрытый
          ключ для этих подписей на сайте(сайтах), используемом для прямого распространения
          ПО для общественности. Выберите «неприменимо» (N/A), если выпуски не предназначены
          для широкого использования.

'
        details: 'Результаты проекта включают как исходный код, так и любые сгенерированные
          результаты, если это применимо (например, исполняемые файлы, пакеты и контейнеры).
          Сгенерированные результаты МОГУТ быть подписаны отдельно от исходного кода.
          Подписывание МОЖЕТ быть реализовано как подписанные теги git (с использованием
          криптографических цифровых подписей). Проекты МОГУТ предоставлять генерируемые
          результаты отдельно от таких инструментов, как git, но в этих случаях отдельные
          результаты ОБЯЗАНЫ быть отдельно подписаны.

'
      version_tags_signed:
        description: 'ПРЕДЛАГАЕТСЯ, чтобы в системе контроля версий каждый важный
          тег версии (тег, который является частью основного выпуска, минорной версии
          или исправляет общедоступные уязвимости) подписывался криптографической
          подписью и поддавался проверке, как описано в критерии<a href="#signed_releases">signed_releases</a>.

'
      input_validation:
        description: 'Результаты проекта ОБЯЗАНЫ проверять любой ввод из потенциально
          ненадежных источников, чтобы убедиться, что они действительны (*белый список*),
          и отклонять недействительный ввод, если вообще есть какие-либо ограничения
          на данные.

'
        details: 'Обратите внимание, что сравнения ввода со списком «плохих форматов»
          (также известным как *черный список*) обычно недостаточно, потому что злоумышленники
          часто могут обойти черный список. В частности, числа преобразуются во внутренние
          форматы, а затем проверяются, находятся ли они между их минимальным и максимальным
          (включительно), а текстовые строки проверяются, чтобы убедиться, что они
          являются допустимыми текстовыми шаблонами (например, действительный UTF-8,
          длина, синтаксис и т. д.). От некоторых данных может требоваться, чтобы
          они были «хоть чем-нибудь» (например, загрузчик файлов), но такое обычно
          случается редко.

'
      hardening:
        description: 'В ПО, создаваемом проектом, РЕКОМЕНДУЕТСЯ использовать механизмы
          упрочнения безопасности (hardening), чтобы дефекты программного обеспечения
          с меньшей вероятностью приводили к уязвимостям в безопасности.

'
        details: 'Механизмы упрочнения могут включать HTTP-заголовки, такие как Content
          Security Policy (CSP), флаги компилятора для противостояния атакам (например,
          -fstack-protector) или флаги компилятора, устраняющие неопределенное поведение.
          Для наших целей политика наименьших привилегий не считается механизмом упрочнения
          (использовать наименьшие достаточные привилегии важно, но этому посвящён
          отдельный критерий).

'
      static_analysis_common_vulnerabilities:
        description: 'Проект ОБЯЗАН использовать хотя бы один инструмент статического
          анализа с правилами или подходами для поиска распространенных уязвимостей
          в анализируемом языке или окружении, если есть хотя бы один инструмент на
          СПО, который может реализовать этот критерий на выбранном языке.

'
      dynamic_analysis_unsafe:
        description: "<em>Если</em> ПО, создаваемое проектом, включает ПО, написанное
          с использованием небезопасного языка (например, C или C++), <em>тогда</em>
          проект ОБЯЗАН регулярно использовать хотя бы один динамический инструмент
          (например, фаззер или сканер веб-приложения) в сочетании с механизмом для
          обнаружения проблем безопасности памяти, таких как перезапись буфера. Выберите
          «неприменимо» (N/A), если проект не создает ПО, написанное на небезопасном
          языке.\n"
      achieve_passing:
        description: Проект ОБЯЗАН получить значок уровня Passing.
    '2':
      bus_factor:
        description: Проект ОБЯЗАН иметь «коэффициент автобуса» 2 или более.
      contributors_unassociated:
        description: 'Проект ОБЯЗАН иметь как минимум двух несвязанных значительных
          соавторов.

'
        details: 'Соавторы связаны, если они оплачиваются работой одной и той же организации
          (как работник или подрядчик), и организация может выиграть от результатов
          проекта. Финансовые гранты не считаются находящимися в одной организации,
          если они проходят через другие организации (например, гранты на науку, выплачиваемые
          различным организациям из общего правительства или источника НПО, не приводят
          к тому, что вкладчики могут быть связаны). Кто-то является значительным
          вкладчиком, если в прошлом году они внесли незначительный вклад в проект.
          Примерами хороших показателей значительного вкладчика являются: написано
          не менее 1000 строк кода, внесено 50 коммитов или предоставлено не менее
          20 страниц документации.

'
      copyright_per_file:
        description:
        details:
      license_per_file:
        description:
        details:
      repo_distributed:
        description:
      small_tasks:
        description:
        details:
      require_2FA:
        description:
      secure_2FA:
        description:
        details:
      code_review_standards:
        description: 'Проект ОБЯЗАН документировать свои требования по ревью кода,
          в том числе, как проводится ревью кода, что необходимо проверять и что необходимо
          для приемлемости кода.

'
        details: 'См. также критерии <a href="#two_person_review">two_person_review</a>
          и contrib_requirements.

'
      two_person_review:
        description:
      build_reproducible:
        description: 'Проект ОБЯЗАН обеспечивать <a href="https://reproducible-builds.org/">воспроизводимую
          сборку</a>.  Если сборка не требуется (например, в случае языков сценариев,
          где исходный код используется непосредственно вместо компиляции), выберите
          «N/A».

'
        details: 'Воспроизводимая сборка означает, что несколько сторон могут независимо
          повторить процесс генерации информации из исходных файлов и получить аналогичный
          результат с точностью до бита. В некоторых случаях воспроизводимости можно
          достичь путем принудительного выставления окружения. Разработчики JavaScript
          могут рассмотреть возможность использования npm shrinkwrap и webpack OccurenceOrderPlugin.
          Пользователи GCC и clang могут найти полезной опцию -frandom-seed. Среда
          сборки (включая набор инструментов) часто может быть определена для внешних
          сторон путём указания криптографической суммы (hash) для конкретного контейнера
          или виртуальной машины, которые они могут использовать для пересборки. <a
          href="https://reproducible-builds.org/docs/">В проекте Reproducible Builds
          есть документация о том, как это сделать</a>.

'
      test_invocation:
        description:
      test_continuous_integration:
        description:
        details:
      test_statement_coverage90:
        description:
      test_branch_coverage80:
        description:
      crypto_used_network:
        description:
      crypto_tls12:
        description:
      hardened_site:
        description:
        details:
      security_review:
        description:
        details:
      hardening:
        description:
      dynamic_analysis:
        description: 'Проект ОБЯЗАН применять хотя бы один инструмент динамического
          анализа к любой предлагаемой основной версии ПО, создаваемого проектом до
          её выпуска.

'
      dynamic_analysis_enable_assertions:
        description:
      achieve_silver:
        description: Проект ОБЯЗАН получить значок уровня Silver.
  headings:
    Accessibility and internationalization: Общедоступность и интернационализация
    Analysis: Анализ
    Automated test suite: Набор автотестов
    Identification: Идентификация
    Basic project website content: Основная информация на веб-сайте проекта
    Basics: Основы
    Bug-reporting process: Процесс сообщения об ошибках
    Change Control: Управление изменениями
    Coding standards: Стандарты кодирования
    Documentation: Документация
    Dynamic code analysis: Динамический анализ кода
    Externally-maintained components: Компоненты, поддерживаемые извне
    Future: Будущие критерии
    future: Будущее
    Installation system: Система установки
    New functionality testing: Тестирование новых функций
    OSS License: Свободная лицензия
    Other: Другое
    Other security issues: Другие вопросы безопасности
    Previous versions: Предыдущие версии
    Project oversight: Надзор за проектом
    Public version-controlled source repository: Публичное хранилище исходного кода
      с поддержкой версий
    Publicly known vulnerabilities fixed: Исправление обнародованных уязвимостей
    Quality: Качество
    Release notes: Примечания к выпуску
    Reporting: Отчеты о проблемах
    Secure development knowledge: Знание безопасной разработки
    Secure release: Безопасный выпуск
    Secured delivery against man-in-the-middle (MITM) attacks: Доставка, защищенная
      от атак посредника (MITM)
    Security: Безопасность
    Static code analysis: Статический анализ кода
    Unique version numbering: Уникальная нумерация версий
    Use basic good cryptographic practices: Основы правильного использования криптографии
    Vulnerability report process: Процесс отчета об уязвимостях
    Warning flags: Флаги предупреждений
    Working build system: Рабочая система сборки
    Prerequisites:
  criterion_status:
    Met: Соответствует
    Unmet: Не соответствует
    NA: Неприменимо
  last_entry: Последнее гнездо перевода
  error_messages:
    need_home_page_or_url: Требуется по крайней мере главная страница или URL репозитория
    form_contains:
      one: Форма содержит 1 ошибку.
      other: Форма содержит %{count} ошибки.
      few: Форма содержит %{count} ошибки.
      many: Форма содержит %{count} ошибок.
    comma_separated_list: "- должен быть список имен, разделенных запятой"
    begin_with_cpe: '- текст должен начинаться с "cpe:"'
    not_an_email: не соответствует адресу электронной почты
    known_bad_password: "- хорошо известный (плохой) пароль"
    valid_text: "- текст должен соответствовать кодировке UTF-8 и не содержать неверных
      управляющих символов"
    url_message: "- URL должен начинаться с http: либо https: и использовать ограниченный
      набор символов"
