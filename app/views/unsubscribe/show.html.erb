<%# Security: Set Content Security Policy for this page %>
<% content_for :head do %>
  <meta http-equiv="Content-Security-Policy"
        content="default-src 'self'; script-src 'self' 'nonce-<%= @nonce %>'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; form-action 'self';">
<% end %>

<br>
<h1 class='center'><%= t('unsubscribe.header') %></h1>

<div class="row">
  <div class="col-md-6 col-md-offset-3">
    <div class="center-block">
      <p class="text-center">
        <%= t('unsubscribe.description') %>
      </p>

      <%# Security: Display any error messages safely %>
      <% if flash[:error] %>
        <div class="alert alert-danger" role="alert">
          <%= sanitize(flash[:error], tags: %w[]) %>
        </div>
      <% end %>

      <% if flash[:notice] %>
        <div class="alert alert-info" role="alert">
          <%= sanitize(flash[:notice], tags: %w[]) %>
        </div>
      <% end %>

      <%# Security: Use form_with with CSRF protection and secure defaults %>
      <%= form_with url: unsubscribe_path, method: :post, local: true, class: 'form-horizontal' do |form| %>
        <%# Security: Include CSRF token automatically %>

        <div class="form-group">
          <%= form.label :email, t('unsubscribe.email_label'), class: 'control-label' %>
          <%# Security: Display email as read-only field %>
          <%= form.email_field :email,
                class: 'form-control',
                readonly: true,
                value: sanitize(@email || '', tags: %w[]),
                style: 'background-color: #f5f5f5;' %>
          <small class="help-block"><%= t('unsubscribe.email_readonly_help') %></small>
        </div>

        <div class="form-group">
          <%= form.label :issued, t('unsubscribe.issued_label'), class: 'control-label' %>
          <%# Security: Display issued date as read-only field %>
          <%= form.text_field :issued,
                class: 'form-control',
                readonly: true,
                value: sanitize(@issued_date_display || '', tags: %w[]),
                style: 'background-color: #f5f5f5;' %>
          <small class="help-block"><%= t('unsubscribe.issued_help') %></small>
        </div>

        <div class="form-group">
          <%= form.label :token, t('unsubscribe.token_label'), class: 'control-label' %>
          <%# Security: Display token as read-only field (truncated for display) %>
          <%= form.text_field :token,
                class: 'form-control',
                readonly: true,
                value: sanitize(@token ? "#{@token[0..8]}..." : '', tags: %w[]),
                style: 'background-color: #f5f5f5;' %>
          <small class="help-block"><%= t('unsubscribe.token_readonly_help') %></small>
        </div>

        <%# Security: Hidden fields to pass the actual values %>
        <%= hidden_field_tag :email, sanitize(@email || '', tags: %w[]) %>
        <%= hidden_field_tag :token, sanitize(@token || '', tags: %w[]) %>
        <%= hidden_field_tag :issued, sanitize(@issued_date_display || '', tags: %w[]) %>

        <%# Security: Optional reason field with length limits %>
        <div class="form-group">
          <%= form.label :reason, t('unsubscribe.reason_label'), class: 'control-label' %>
          <%= form.text_area :reason,
                class: 'form-control',
                rows: 3,
                maxlength: 500,
                placeholder: t('unsubscribe.reason_placeholder') %>
          <small class="help-block"><%= t('unsubscribe.reason_help') %></small>
        </div>

        <%# Security: Add honeypot field to detect bots %>
        <div style="display: none;">
          <%= form.text_field :website, autocomplete: 'off', tabindex: '-1' %>
        </div>

        <div class="form-group text-center">
          <%# Security: Use button with nonce for any inline scripts %>
          <%= form.submit t('unsubscribe.submit'),
                class: 'btn btn-primary',
                data: {
                  confirm: t('unsubscribe.confirm_message'),
                  disable_with: t('unsubscribe.processing')
                } %>
          <%= link_to t('unsubscribe.cancel'), root_path,
                class: 'btn btn-default',
                rel: 'nofollow' %>
        </div>

        <%# Security: Add additional CSRF protection %>
        <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
      <% end %>

      <%# Security: Information about data handling %>
      <div class="text-center margin-top">
        <small class="text-muted">
          <%= t('unsubscribe.privacy_notice') %>
        </small>
      </div>
    </div>
  </div>
</div>

<%# Security: Add client-side validation script with nonce %>
<script nonce="<%= @nonce %>">
  (function() {
    'use strict';

    // Security: Client-side form validation
    document.addEventListener('DOMContentLoaded', function() {
      var form = document.querySelector('form');
      var emailField = document.querySelector('#email');
      var tokenField = document.querySelector('#token');
      var websiteField = document.querySelector('#website');

      if (form && emailField && tokenField) {
        form.addEventListener('submit', function(e) {
          // Security: Check honeypot field
          if (websiteField && websiteField.value !== '') {
            e.preventDefault();
            return false;
          }

          // Security: Validate email format
          var emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
          if (!emailRegex.test(emailField.value)) {
            alert('<%= j t('unsubscribe.invalid_email_format') %>');
            e.preventDefault();
            return false;
          }

          // Security: Validate token format
          var tokenRegex = /^[a-zA-Z0-9\-_=]+$/;
          if (!tokenRegex.test(tokenField.value) || tokenField.value.length < 32) {
            alert('<%= j t('unsubscribe.invalid_token_format') %>');
            e.preventDefault();
            return false;
          }

          return true;
        });
      }
    });
  })();
</script>
