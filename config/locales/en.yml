---
# Pluralization is tricky in some languages.
# Rails specially handles pluralization when the special field
# "count" is used.  It then looks for keys which
# in the general case can be {zero, one, two, few, many, other}.
# The key "one" isn't necessarily used for just 1 (it might be used for
# "ends in 1" depending on the language).
# See Unicode plural rules:
# http://cldr.unicode.org/index/cldr-spec/plural-rules
# http://www.unicode.org/cldr/charts/latest/supplemental/
# language_plural_rules.html
# We include keys for the forms we don't use in some languages so that
# translation.io will generate the keys in the translation files.
# If the required keys are missing, an exception may be raised depending
# on the count (this would lead to the inability to display a page).
# Sadly, translation.io ignores empty keys. Thus, we can't add empty keys
# and leave them untranslated, because then the locales that need the keys
# (like Russian) don't have the keys they need for translation.
en:
  hello: Hello world
  submit: Submit
  projects_count:
    zero: Zero Projects
    one: "%{count} Project"
    # We need need "few" and "many" for Russian.
    few: "%{count} Projects"
    many: "%{count} Projects"
    other: "%{count} Projects"
  feed_title: CII Best Practices BadgeApp Updated Projects
  project_name_unknown: "(Name unknown)"
  locale_name:
    en: English
    de: German / Deutsch
    fr: French / Français
    ja: Japanese / 日本語
    ru: Russian / русский
    zh-CN: Chinese (Simplified) / 简体中文
  layouts:
    cii_best_practices: CII Best Practices
    projects: Projects
    users: Users
    account: Account
    profile: Profile
    settings: Settings
    choose_locale: Choose locale
    logout_html: <span class="glyphicon glyphicon-log-out"></span> Logout
    signup_html: <span class="glyphicon glyphicon-user"></span> Sign Up
    login_html: <span class="glyphicon glyphicon-log-in"></span> Login
    footer_text_html: '<small> <strong>Need help? Have a question? See a problem? Please
      <em><a href="mailto:&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;">send
      an email</a> </em>or <em><a href="https://github.com/coreinfrastructure/best-practices-badge/issues"
      target="_blank">file an issue</a></em>.</strong> © 2015-2017 <a href="https://www.coreinfrastructure.org/
      target="_blank">Core Infrastructure Initiative</a>, a <a href="https://www.linuxfoundation.org/"
      target="_blank">Linux Foundation</a> Collaborative Project. All Rights Reserved.
      Please see our <a href="https://www.linuxfoundation.org/privacy" target="_blank">privacy
      policy</a> and <a href="https://www.linuxfoundation.org/terms" target="_blank">terms
      of use</a>. </small>

'
  admin_only: Admin only.
  account_activations:
    activated: Account activated!
    failed_activation: Invalid activation link
  password_resets:
    forgot_password: Forgot password
    reset_password: Reset password
    password_confirmation: Confirmation
    email_not_found: Email address not found
    password_empty: Password can't be empty
    password_reset: Password has been reset
    instructions_sent: Email sent with password reset instructions
    cant_reset_nonlocal: Sorry, can't reset the password for a non-local user
    reset_expired: Password reset has expired.
    update_password: Update password
  sessions:
    login_header: Log in
    login_with_github_html: '<span class="fa fa-github"></span> Log in with GitHub

'
    or: or
    email: Email
    password: Password
    forgot_password: Forgot your password?
    remember_me: Remember me
    login_custom: Log in using custom account
    no_custom: No custom account? Sign up now!
    already_logged_in: You are already logged in.
    incorrect_login_info: Incorrect login information
    invalid_combo: Invalid email/password combination
    signed_in: Signed in!
    not_activated: 'Account not activated. Check your email for the activation link.

'
    signed_out: Signed out!
  static_pages:
    home:
      badge_program: CII Best Practices Badge Program
      get_your_badge: Get Your Badge Now!
      p1_html: 'The <a href="https://www.linuxfoundation.org/">Linux Foundation (LF)</a>
        <a href="https://www.coreinfrastructure.org/">Core Infrastructure Initiative
        (CII)</a> Best Practices badge is a way for Free/Libre and Open Source Software
        (FLOSS) projects to show that they follow best practices. Projects can voluntarily
        self-certify, at no cost, by using this web application to explain how they
        follow each best practice. The CII Best Practices Badge is inspired by the
        many badges available to projects on GitHub. Consumers of the badge will be
        able to quickly assess which FLOSS projects are following best practices and
        as a result are more likely to produce higher-quality secure software.

'
      p2_html: 'More information on the CII Best Practices Badging program, including
        background and <a href=''https://github.com/coreinfrastructure/best-practices-badge/blob/master/doc/criteria.md''>criteria</a>,
        is <a href=''https://github.com/coreinfrastructure/best-practices-badge''>available
        on GitHub</a>. <a href="/project_stats">Project statistics</a> and <a href="/criteria">criteria
        statistics</a> are available. The <a href="/projects">projects page</a> shows
        participating projects and supports queries (e.g., you can see <a href="/projects?gteq=100">projects
        that have a passing badge</a>). You can also see <a href=''/projects/1''>an
        example (where we try to get our own badge)</a>.

'
      p3_html: '<em>Privacy and legal issues</em>: Please see our <a href="https://www.linuxfoundation.org/privacy">privacy
        policy</a> and <a href="https://www.linuxfoundation.org/terms">terms of use</a>.
        All publicly-available non-code content is released under at least the <a
        href="https://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution
        License version 3.0 (CC-BY-3.0)</a>; newer non-code content is released under
        CC-BY version 3.0 or later (CC-BY-3.0+). If referencing collectively or not
        otherwise noted, please credit the CII Best Practices badge contributors.

'
    criteria:
      criteria: Criteria
      detailed_criteria_on_github: The detailed criteria are on GitHub.
      level: Level
      must: MUST
      should: SHOULD
      suggested: SUGGESTED
      total_active: Total active
      allow_na: Allow N/A
      require_url: Require URL
      details: Includes details
      future: Future
      project_counts: There are %{projects} project entries; %{passing} are passing and %{in_progress} are in progress.
      project_stats_html: You can see statistics about projects over time at the <a href="/project_stats">project stats page</a>.
  users:
    new:
      signup_header: Sign up
      intro_github: >
        If you have GitHub account, you can just use that to log in.
      intro_html: |
        If you don't want to log in with a GitHub account, you can
        sign up here instead. <br><br> If you didn't receive your activation link,
        please sign up again and we will send you a new one.
      name: Name
      email: Email
      preferred_locale: Preferred locale
      password: Password
      password_confirmation: Confirm Password
      create_account: Create my account
    edit:
      update_user_info: Update User Information
      save_changes: Save changes
    update:
      profile_updated: Profile updated
    show:
      edit_user: Edit user
      other_projects_edit: Other Projects you can edit
      see_external: 'See this user''s external page.

'
      as_admin: 'as an admin, you may also:'
      send_email_to: 'send email to:'
      delete_link_name: delete
      confirm_delete: Are you sure you want to delete this user?
    destroy:
      cannot_delete_self: Cannot delete self.
      user_deleted: User deleted.
    redirect_existing: 'That user already exists. Did you mean to sign in?

'
    new_activation_link_created: 'New activation link created. Please check your email
      to activate your account.

'
    please_log_in: Please log in.
  project_stats:
    index:
      project_stats_header: Project Statistics
      all_projects: All projects
      projects_nontrivial: Projects with non-trivial progress
      projects_activity_30: Projects with badge entry activity in last 30 days
      daily_activity: Daily badge entry activity
      reminders: Reminders
      active_projects: Active projects (created/updated within 30 days)
      active_in_progress: 'Active in-progress projects (created/updated within 30
        days)

'
      active_edited: 'Active edited projects (updated within 30 days)

'
      active_edited_in_progress: 'Active edited in-progress projects (updated within
        30 days)

'
      projects_created_since_yesterday: 'projects created since day before

'
      projects_updated_since_yesterday: 'projects updated since day before

'
      projects_created_average_7_days: 'projects created average over 7 days

'
      projects_updated_average_7_days: 'projects updated average over 7 days

'
      projects_created_updated_daily: >
        The dataset "projects created since day before" is a set of counts
        of how many projects were created within 24 hours of the given
        datetime (not including projects that were also deleted in the
        same 24 hour period).
        Similarly, the dataset
        "projects edited since the day before" is a set of counts of how many
        projects were edited within 24 hours of the given datetime
        (not including projects that were created or deleted
        in the same 24 hour period).
        The 7 day averages show the corresponding averages for 7 days.
        You may select colors in the legend
        to hide and unhide the corresponding data.
      reminders_sent_since_yesterday: 'Reminders sent since yesterday

'
      reactivated_projects: 'Reactivated projects in 14 days after receiving reminder

'
      admin_html: 'As an admin, you may also see the <a href="/reminders">detailed
        information about reminders</a>.

'
      raw_data: 'You can also see the raw data:

'
      json_format: JSON format
      csv_format: downloadable CSV format
  projects:
    index:
      all: All
      passing_100: Passing (100%)
      in_progress_variable: In Progress (%{percent}% or more)
      add_link: Add
      add_new: Add New Project
      badge_status: Badge status
      exclude_passing: Exclude passing
      text_search: Text search
      name_or_description: Name or description text
      search: Search
    table:
      id: Id
      name: Name
      description: Description
      website: Website
      license: License
      owner: Owner
      last_achieved: Last achieved at
      pachieved: "% Achieved"
      can_also_sort: 'You can also sort by the following:'
      repository_url: repository URL
      create_time: create time (for the badge entry)
      update_time: last update time (for the badge entry)
      user_id: user id
      paren_name_unknown: "(Name Unknown)"
      badge_level: Badge level for project %{id} is %{percent}%
    new:
      thanks_adding: >
        Thanks for adding the Project!
        Please fill out the rest of the information to get the Badge.
      post_delay_warning: >
        There may be a significant delay after submitting as we
        try to automatically fill in information.
      new_badge: New badge
      may_select_html: >
        You may select from one of your GitHub repos <em>OR</em> provide
        information about some other project.
      new_badge_or: OR
      select_one_github: Select one of your GitHub repos
      submit_github: Submit GitHub Repository
      project_already_exists: This project already exists!
      url_of_homepage: >
        What is the URL for the project home page (the URL for the
        project as a whole)? Start with http(s)://
        (many characters are not allowed, including "?")
      placeholder_of_homepage: 'http(s)://... for project home page URL'
      url_of_repo: 'What is the URL for the version control repository (it may be
        the same as the project home page)? Start with http(s):// (many characters
        are not allowed, including "?")

'
      placeholder_of_repo: 'http(s)://... for project repo URL

'
      submit_urls: Submit URL
      final_text_html: >
        Note - if your repository URL is on GitHub, anyone who can commit
        to the repository will be able to edit the badge information.
      sign_in_first: Please sign in to add a project!
      original_repos: => Original GitHub Repos
      fork_repos: => Forked GitHub Repos
    edit:
      edit_status: Edit Project Badge Status
      repo_url_limits: >
        You may only change your repo_url from http to https
      changed_since_html: >
        Another user has made a change to that record since you
        accessed the edit form. <br>Please open a new
        <a href="%{edit_url}" target=_blank>edit form</a>
        to transfer your changes.
      successfully_updated: Project was successfully updated.
      congrats_new: >
        CONGRATULATIONS on earning a %{new_badge_level}
        badge! If you haven't already, please show your badge status on
        your project page (see the "how to embed it" text just below
        if you don't know how to do that).
      lost_badge: Project has lost a badge.
      static_analysis_updated_html: >
        We have updated our requirements for the criterion
        <a href="#static_analysis">static_analysis</a>.
        Please add a justification for this criterion.
      save_and_continue: Save (and continue)
      submit_and_exit: Submit (and exit)
      submit_cc_by_3plus_html: 'By submitting this data about the project you agree
        to release it under at least the <a href="https://creativecommons.org/licenses/by/3.0/us"
        target="_blank">Creative Commons Attribution version 3.0 or later license
        (CC-BY-3.0+)</a>. This means that all are free to share and adapt the data,
        but they must give appropriate credit. You retain copyright (if any), and
        the project license is unaffected.<br><br>

'
    show:
      edit: Edit
      delete: Delete
      confirm_delete: 'Are you SURE you want to DELETE the ENTIRE project %{project_id}?

'
      back: Back
      owned_by: 'Project badge entry owned by:'
      created_at_html: "<strong>Entry created on</strong> %{when},"
      updated_at_html: "<strong>last updated on</strong> %{when}."
      last_lost_html: 'Last lost passing badge on %{when}.

'
      last_achieved_html: 'Last achieved passing badge on %{when}.

'
      cc_by_3plus_html: 'This data is available under the <a href="https://creativecommons.org/licenses/by/3.0/us"
        target="_blank">Creative Commons Attribution version 3.0 or later license
        (CC-BY-3.0+)</a>. All are free to share and adapt the data, but must give
        appropriate credit. Please credit %{user} and the CII Best Practices badge
        contributors.<br><br>

'
      cc_by_3only_html: 'This data is available under the <a href="https://creativecommons.org/licenses/by/3.0/us"
        target="_blank">Creative Commons Attribution version 3.0 license (CC-BY-3.0)</a>
        per the <a href="https://www.coreinfrastructure.org/" target="_blank">Core
        Infrastructure Initiative</a> <a href="https://www.linuxfoundation.org/terms"
        target="_blank">terms of use</a>. All are free to share and adapt the data,
        but must give appropriate credit. Please credit %{user} and the CII Best Practices
        badge contributors.<br><br>

'
    form_early:
      badge_intro:
        description: >
          Projects that follow the best practices below will be able to
          voluntarily self-certify and show that they've achieved a Core
          Infrastructure Initiative (CII) badge.
        details_html: >
          There is no set of practices that can guarantee that software will
          never have defects or vulnerabilities; even formal methods can fail
          if the specifications or assumptions are wrong. Nor is there any set
          of practices that can guarantee that a project will sustain a healthy
          and well-functioning development community. However, following best
          practices can help improve the results of projects. For example, some
          practices enable multi-person review before release, which can both
          help find otherwise hard-to-find technical vulnerabilities and help
          build trust and a desire for repeated interaction among developers
          from different companies. To earn a badge, all MUST and MUST NOT
          criteria must be met, all SHOULD criteria must be met OR be unmet
          with justification, <em>and</em> all SUGGESTED criteria must be met OR
          unmet (we want them considered at least). Feedback is welcome via the
          <a href="https://github.com/coreinfrastructure/best-practices-badge">GitHub site as issues or pull requests</a>
          There is also a
          <a href="https://lists.coreinfrastructure.org/mailman/listinfo/cii-badges">mailing list for general discussion</a>.<br /><br />
          We gladly provide the information in several locales, however,
          if there is any conflict or inconsistency between the translations,
          the English version is the authoritative version.
      level:
        '0': Passing
        '0_html': >
          These are the %{passing} level criteria. You can also view the
          %{silver} or %{gold} level criteria.
        '1': Silver
        '1_html': >
          These are the %{silver} level criteria. You can also view the
          %{passing} or %{gold} level criteria.
        '2': Gold
        '2_html': >
          These are the %{gold} level criteria. You can also view the
          %{passing} or %{silver} level criteria.
      got_badge:
        description_1: >
          If this is your project, please show your badge status on your
          project page! The badge status looks like this:
        badge_alt: Badge level for project %{id} is %{level}
        description_2: 'Here is how to embed it:'
        details_html: >
          You can show your badge status
          by embedding this in your markdown file:<br />
          %{markdown_embedding}<br />
          or by embedding this in your HTML:<br />
          %{html_embedding}<br />
        editing_description_html: >
          <strong>Please 'submit' often</strong> to save your work (you can always go
          back and edit more later). <br><br>
          If you need help, have a question, or see a problem, please
          <em><a href="mailto:&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;">send an email</a> </em>or
          <em><a href="https://github.com/coreinfrastructure/best-practices-badge/issues" target="_blank">file an issue</a></em>.
    # Other items in the "basic" section of the form, many of which
    # need special handling
    form_basics:
      project_name:
        description: What is the human-readable name of the project?
        details: Note that other projects may use the same name.
        placeholder: FLOSS Project Name
      description:
        description: What is a brief description of the project?
        details: 'Include key comments about the project.  Use markdown. This information
          is used when displaying badge information.

'
        placeholder: Project Description
      homepage_url:
        description: What is the URL for the project (as a whole)?
        placeholder: Project Website URL
      repo_url:
        description: 'What is the URL for the version control repository (it may be
          the same as the project URL)?

'
        placeholder: Project Repo URL
      implementation_languages:
        description: >
          What programming language(s) are used to implement
          the project?
        details: >
          If there is more than one language, list them as comma-separated
          values (spaces optional) and sort them from most to least used.
          If there is a long list, please list at least the first three
          most common ones.  If there is no language (e.g., this is
          a documentation-only or test-only project), use the single
          character "-".
          Please use a conventional capitalization for
          each language, e.g., "JavaScript".
        placeholder: >
          Implementation language(s) used as a comma-separated list,
          sorted by amount of use
      cpe:
        description_html: >
          What is the
          <a href="https://nvd.nist.gov/cpe.cfm">Common Platform
          Enumeration (CPE)</a>
          name for the project (if it has one)?
        details_html: >
          The <a href="https://nvd.nist.gov/cpe.cfm">Common Platform
          Enumeration (CPE)</a> is a structured naming scheme for
          information technology systems, software, and packages.
          It is used in a number of systems and databases when reporting
          vulnerabilities.
        placeholder: (Optional) CPE name
      license:
        description_html: >
          What license(s) is the project released under?
        details_html: >
          Please use <a href="https://spdx.org/licenses/">SPDX license
          expression format</a>; examples include "Apache-2.0",
          "BSD-2-Clause", "BSD-3-Clause", "GPL-2.0+", "LGPL-3.0+",
          "MIT", and "(BSD-2-Clause OR Ruby)".
        placeholder: FLOSS License
    misc:
      in_javascript:
        collapse_all_title: Collapse all panels
        collapse_all: Collapse panels
        expand_all_title: Expand all panels
        expand_all: Expand panels
        show_details: Show details
        hide_details: Hide details
        show_all_details: Show all details
        hide_all_details: Hide all details
        # Note: The "&" is escaped by Rails since it's not marked as HTML safe
        show_met_title: Show met & N/A criteria
        show_met_html: Show met &amp; N/A
        hide_met_title: Hide met & N/A criteria (leaving unmet and unknown)
        hide_met_html: Hide met &amp; N/A
        passing_alt: Enough for a badge!
        barely_alt: Barely enough for a badge.
        failing_alt: Not enough for a badge.
        unknown_alt: Unknown required information, not enough for a badge.
        met_url_placeholder: >
          (URL required) Please explain how this is met, including 1+ key URLs.
        met_justification_placeholder: >
          (Required) Please explain how this is met, possibly including 1+ key
          URLs.
        met_placeholder: >
          (Optional) Please explain how this is met, possibly including 1+ key
          URLs.
        unmet_placeholder: >
          Please explain why it's okay this is unmet, including 1+ key URLs.
        na_justification_placeholder: >
          (Required) Please explain why this is not applicable (N/A), possibly
          including 1+ key URLs.
        na_placeholder: >
          (Optional) Please explain why this is not applicable (N/A), possibly
          including 1+ key URLs.
        unknown_placeholder: Please explain
      disabled_reminders: >
        (Advanced) Disable inactivity reminder
        (we recommend you leave this unchecked)
      general_comments:
        description: >
          Other general comments about the project:
        placeholder: Additional Comments (in markdown)
      some_not_crypto_html: >
        Note that some software does not need to use cryptographic mechanisms.
      dont_use_crypto: >
        Press here if the software produced by the project does not use
        cryptographic mechanisms
      future_header_html: >
        These are criteria we intend to add in the near future, but are
        <em>not</em> currently required for a badge.
        This grace period allows projects to update to changed criteria
        and retain their badge as best practices improve.
      toggle_details_title: Toggle details text
      details: Details
      url_required: URL required
      future_criterion: Future criterion
      url_required_warning: >
        Warning: URL required, but no URL found.
      justification_required_warning: >
        Warning: Requires lengthier justification.
    delete:
      done: Project was successfully deleted.
  report_mailer:
    subject_achieved_passing: 'CONGRATULATIONS on achieving a %{new_level} best practices
      badge!

'
    subject_no_longer_passing: 'Your best practices badge is no longer %{old_level}

'
    subject_new_project: 'You added a project to the CII Best Practices Badging Program

'
    subject_reminder: 'Your project does not yet have the "best practices" badge

'
    subject_project_deleted: 'Project %{project_id} named %{project_name} was deleted

'
    new_project_heading: 'Thanks for adding your project to the Best Practices Badging
      Program

'
    new_project_part1: |
      Thank you for adding your project
      to the Best Practices Badging Program.
      The current name we have for this project is:
    new_project_part2: |
      Please visit your badge entry at
      to complete the information and get your badge!
      Here is the URL for your badge entry:
    new_project_part3_html: |
      <p>
      We encourage you to keep making progress.
      </p>

      <p>
      If you want to see <em>only</em> what you're missing,
      visit your badge entry, and
      then click on the button near the top labelled "Hide met or N/A criteria"
      If you have questions, or need help, please contact
      <a href="mailto:&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;">&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;</a>
      or file an issue at
      <a href="https://github.com/coreinfrastructure/best-practices-badge/issues">https://github.com/coreinfrastructure/best-practices-badge/issues</a>
      (click on "new issue").
      </p>

      <p>
      Thank you for your time.
      </p>
    new_project_part3_text: |
      We encourage you to keep making progress.

      If you want to see only what you're missing, visit your badge entry, and
      then click on the button near the top labelled "Hide met or N/A criteria".
      If you have questions, or need help, please contact
      cii-badges-questions-owner@lists.coreinfrastructure.org
      or file an issue at
      https://github.com/coreinfrastructure/best-practices-badge/issues
      (click on "new issue").

      Thank you for your time.
    gained_level_part1: |
      Congratulations!

      According to the information that you've provided,
      your project has earned the CII best practices '%{new_level}' badge.
      For more information, see this URL:
    gained_level_part2: |
      Please add your badge to your project and/or repository site;
      you've earned it:
    gained_level_part3: |
      We strongly encourage you to add or improve justification text,
      including adding URLs that point to more information.

      If you have suggestions on how to improve the criteria or
      badge web application, please file an issue at:
      https://github.com/coreinfrastructure/best-practices-badge/issues

      If you made changes to your project to get a badge, please let us know
      via email at cii-badges-questions@lists.coreinfrastructure.org.
      One of our goals is to encourage projects to make some improvements.
      We put some of these reports on the public wiki; please let us know
      if you do NOT want the changes publicly posted at
      https://github.com/coreinfrastructure/best-practices-badge/wiki/Impacts

      Thank you, and congratulations.
    in_markdown_add: 'In markdown you can add this:'
    in_html_add: 'In HTML you can add this:'
    lost_level_message: |
      We're sorry, but your project no longer has the "%{old_level}" badge
      and is now "%{new_level}".
      Please see the following URL for more information:
    ending: "--- David A. Wheeler, CII Best Practices Badge Technical Lead\n"
  user_mailer:
    account_activation:
      before_html: |
        <h1>CII Best Practices Badging Program</h1>
        <p>Hello,</p>
        <p>
        Welcome to the Badging Program!
        Click on the link below to activate your account:
        </p>
      before_text: |
        Hello,

        Welcome to the CII Best Practices Badging Program!

        Select the link below to activate your account:
      activate: Activate
      subject: Account activation
    github_welcome:
      before_html: |
        <h1>CII Best Practices Badging Program</h1>

        <p>Hello,</p>

        <p>
        Thank you for connecting your GitHub account and welcome
        to the CII Best Practices Badging Program!
        </p>

        <p>
        If you did not initiate this action, please check your GitHub
        security log under Settings&gt;Security.
        </p>
      before_text: |
        Hello,

        Thank you for connecting your GitHub account and welcome to the
        CII Best Practices Badging Program!

        If you did not initiate this action, please check your GitHub security
        log on GitHub under Settings>Security.
      subject: Welcome to the Badging Program
    user_update:
      before_text: Some of the user data for your account has been updated.
      username_changed: User name changed.
      email_changed: Email address changed.
      password_changed: Password changed.
      locale_changed: Locale changed.
      current_state: 'For the current state, see:'
      after_text: Please alert us if there is a problem.
      subject: User data edited
    password_reset:
      before_html: |
        <h1>Password reset</h1>

        <p>To reset your password click the link below:</p>
      before_text: 'To reset your password click the link below:

'
      after_html: |
        <p>This link will expire in two hours.</p>

        <p>
        If you did not request your password to be reset,
        please ignore this email and
        your password will stay as it is.
        </p>
      after_text: |
        This link will expire in two hours.

        If you did not request your password to be reset,
        please ignore this email and
        your password will stay as it is.
      subject: Password reset
      reset_password: Reset password
  criteria:
    '0':
      description_good:
        description: 'The project website MUST succinctly describe what the software
          does (what problem does it solve?).

'
        details: 'This MUST be in language that potential users can understand (e.g.,
          it uses minimal jargon).

'
        met_placeholder: "(Optional) Where is the succinct description?  Consider
          providing a URL.\n"
      interact:
        description: 'The project website MUST provide information on how to: obtain,
          provide feedback (as bug reports or enhancements), and contribute to the
          software.

'
        met_placeholder: "(Optional) Where is this information?  Consider providing
          URL(s).\n"
      contribution:
        description: 'The information on how to contribute MUST explain the contribution
          process (e.g., are pull requests used?)

'
        details: 'We presume that <a href="https://guides.github.com/activities/contributing-to-open-source/">projects
          on GitHub use issues and pull requests</a> unless otherwise noted. This
          information can be short, e.g., stating that the project uses pull requests,
          an issue tracker, or posts to a mailing list (which one?)

'
        met_placeholder: "(URL required) What is the process? What URL explains it?\n"
      contribution_requirements:
        description: 'The information on how to contribute SHOULD include the requirements
          for acceptable contributions (e.g., a reference to any required coding standard).

'
        unmet_placeholder: 'Why are the requirements so obvious that this information
          isn''t needed?

'
      floss_license:
        description: 'The software produced by the project MUST be released as FLOSS.

'
        details: 'FLOSS is software released in a way that meets the <a href="https://opensource.org/osd-annotated">Open
          Source Definition</a> or <a href="http://www.gnu.org/philosophy/free-sw.en.html">Free
          Software Definition</a>. Examples of such licenses include the <a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>,
          <a href="https://opensource.org/licenses/MIT">MIT</a>, <a href="https://opensource.org/licenses/BSD-2-Clause">BSD
          2-clause</a>, <a href="https://opensource.org/licenses/BSD-3-Clause">BSD
          3-clause revised</a>, <a href="https://opensource.org/licenses/Apache-2.0">Apache
          2.0</a>, <a href="https://opensource.org/licenses/lgpl-license">Lesser GNU
          General Public License (LGPL)</a>, and the <a href="https://opensource.org/licenses/gpl-license">GNU
          General Public License (GPL)</a>. For our purposes, this means that the
          license MUST be: <ul> <li><a href="https://opensource.org/licenses">an approved
          license by the Open Source Initiative (OSI)</a>, or</li> <li><a href="https://www.gnu.org/licenses/license-list.html">a
          free license as approved by the Free Software Foundation (FSF)</a>, or</li>
          <li><a href="https://www.debian.org/legal/licenses/">a free license acceptable
          to Debian main</a>, or</li> <li><a href="https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing">a
          "good" license according to Fedora</a>.</li> </ul> The software MAY also
          be licensed other ways (e.g., "GPLv2 or proprietary" is acceptable).

'
      floss_license_osi:
        description: 'It is SUGGESTED that any required license(s) for the software
          produced by the project be <a href="https://opensource.org/licenses">approved
          by the Open Source Initiative (OSI).</a>

'
        details: 'The OSI uses a rigorous approval process to determine which licenses
          are OSS.

'
      license_location:
        description: 'The project MUST post the license(s) of its results in a standard
          location in their source repository.

'
        details: 'E.g., as a top-level file named LICENSE or COPYING. License filenames
          MAY be followed by an extension such as ".txt" or ".md".

'
      documentation_basics:
        description: 'The project MUST provide basic documentation for the software
          produced by the project.

'
        details: 'This documentation must be in some media (such as text or video)
          that includes: how to install it, how to start it, how to use it (possibly
          with a tutorial using examples), and how to use it securely (e.g., what
          to do and what not to do) if that is an appropriate topic for the software.
          The security documentation need not be long. The project MAY use hypertext
          links to non-project material as documentation. If the project does not
          produce software, choose "not applicable" (N/A).

'
        met_placeholder: "(Optional) What URL(s) are the starting points to for documentation?\n"
      documentation_interface:
        description: 'The project MUST provide reference documentation that describes
          the external interface (both input and output) of the software produced
          by the project.

'
        details: 'The documentation of an external interface explains to an end-user
          or developer how to use it.  This would include its application program
          interface (API) if the software has one. If it is a library, document the
          major classes/types and methods/functions that can be called. If it is a
          web application, define its URL interface (often its REST interface). If
          it is a command-line interface, document the parameters and options it supports.
          In many cases it''s best if most of this documentation is automatically
          generated, so that this documentation stays synchronized with the software
          as it changes, but this isn''t required. The project MAY use hypertext links
          to non-project material as documentation. Documentation MAY be automatically
          generated (where practical this is often the best way to do so). Documentation
          of a REST interface may be generated using Swagger/OpenAPI. Code interface
          documentation MAY be generated using tools such as <a href="http://usejsdoc.org/">JSDoc</a>
          (JavaScript), <a href="https://esdoc.org/">ESDoc</a> (JavaScript), pydoc
          (Python), and Doxygen (many).  Merely having comments in implementation
          code is not sufficient to satisfy this criterion; there needs to be an easy
          way to see the information without reading through all the source code.
          If the project does not produce software, choose "not applicable" (N/A).

'
      sites_https:
        description: 'The project sites (website, repository, and download URLs) MUST
          support HTTPS using TLS.

'
        details: 'You can get free certificates from <a href="https://letsencrypt.org/">Let''s
          Encrypt</a>. Projects MAY implement this criterion using (for example) <a
          href="https://help.github.com/articles/securing-your-github-pages-site-with-https/">GitHub
          pages</a>, <a href="https://about.gitlab.com/2016/12/24/were-bringing-gitlab-pages-to-community-edition/">GitLab
          pages</a>, or <a href="https://sourceforge.net/blog/introducing-https-for-project-websites/">SourceForge
          project pages</a>.  If you are using GitHub pages with custom domains, you
          MAY use a content delivery network (CDN) as a proxy to support HTTPS, such
          as described in the <a href="https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/">blog
          post "Secure and fast GitHub Pages with CloudFlare"</a>, to satisfy this
          criterion. If you support HTTP, we urge you to redirect the HTTP traffic
          to HTTPS.

'
      discussion:
        description: 'The project MUST have one or more mechanisms for discussion
          (including proposed changes and issues) that are searchable, allow messages
          and topics to be addressed by URL, enable new people to participate in some
          of the discussions, and do not require client-side installation of proprietary
          software.

'
        details: 'Examples of acceptable mechanisms include archived mailing list(s),
          GitHub issue and pull request discussions, Bugzilla, Mantis, and Trac. Asynchronous
          discussion mechanisms (like IRC) are acceptable if they meet these criteria;
          make sure there is a URL-addressable archiving mechanism. Proprietary JavaScript,
          while discouraged, is permitted.

'
      english:
        description: 'The project SHOULD provide documentation in English and be able
          to accept bug reports and comments about code in English.

'
        details: 'English is currently the <a href="https://en.wikipedia.org/wiki/Lingua_franca">lingua
          franca</a> of computer technology; supporting English increases the number
          of different potential developers and reviewers worldwide. A project can
          meet this criterion even if its core developers'' primary language is not
          English.

'
      repo_public:
        description: 'The project MUST have a version-controlled source repository
          that is publicly readable and has a URL.

'
        details: 'The URL MAY be the same as the project URL. The project MAY use
          private (non-public) branches in specific cases while the change is not
          publicly released (e.g., for fixing a vulnerability before it is revealed
          to the public).

'
      repo_track:
        description: 'The project''s source repository MUST track what changes were
          made, who made the changes, and when the changes were made.

'
      repo_interim:
        description: 'To enable collaborative review, the project''s source repository
          MUST include interim versions for review between releases; it MUST NOT include
          only final releases.

'
        details: 'Projects MAY choose to omit specific interim versions from their
          public source repositories (e.g., ones that fix specific non-public security
          vulnerabilities, may never be publicly released, or include material that
          cannot be legally posted and are not in the final release).

'
      repo_distributed:
        description: 'It is SUGGESTED that common distributed version control software
          be used (e.g., git) for the project''s source repository.

'
        details: 'Git is not specifically required and projects can use centralized
          version control software (such as subversion) with justification.

'
      version_unique:
        description: 'The project results MUST have a unique version identifier for
          each release intended to be used by users.

'
        details: 'This MAY be met in a variety of ways including a commit IDs (such
          as git commit id or mercurial changeset id) or a version number (including
          version numbers that use semantic versioning or date-based schemes like
          YYYYMMDD).

'
      version_semver:
        description: 'It is SUGGESTED that the <a href="http://semver.org">Semantic
          Versioning (SemVer) format</a> be used for releases.

'
        details: 'Other version numbering schemes, such as commit IDs (such as git
          commit id or mercurial changeset id) or date-based schemes like YYYYMMDD,
          MAY be used as version numbers, since they are unique. Some alternatives
          can cause problems, because users may not be able to easily determine if
          they are up-to-date. SemVer may be less helpful for identifying software
          releases if all recipients only run the latest version (e.g., it is the
          code for a single website or internet service that is constantly updated
          via continuous delivery).

'
      version_tags:
        description: 'It is SUGGESTED that projects identify each release within their
          version control system. For example, it is SUGGESTED that those using git
          identify each release using git tags.

'
      release_notes:
        description: 'The project MUST provide, in each release, release notes that
          are a human-readable summary of major changes in that release to help users
          determine if they should upgrade and what the upgrade impact will be. The
          release notes MUST NOT be the raw output of a version control log (e.g.,
          the "git log" command results are not release notes). Projects whose results
          are not intended for reuse in multiple locations (such as the software for
          a single website or service) AND employ continuous delivery MAY select "N/A".

'
        details: 'The release notes MAY be implemented in a variety of ways. Many
          projects provide them in a file named "NEWS", "CHANGELOG", or "ChangeLog",
          optionally with extensions such as ".txt", ".md", or ".html".  Historically
          the term "change log" meant a log of <em>every</em> change, but to meet these
          criteria what is needed is a human-readable summary.  The release notes
          MAY instead be provided by version control system mechanisms such as the
          <a href="https://github.com/blog/1547-release-your-software">GitHub Releases
          workflow</a>.

'
      release_notes_vulns:
        description: 'The release notes MUST identify every publicly known vulnerability
          that is fixed in each new release. This is "N/A" if there are no release
          notes or there have been no publicly known vulnerabilities.

'
      report_process:
        description: 'The project MUST provide a process for users to submit bug reports
          (e.g., using an issue tracker or a mailing list).

'
      report_tracker:
        description: 'The project SHOULD use an issue tracker for tracking individual
          issues.

'
        unmet_placeholder: Why is there no issue tracker?
      report_responses:
        description: 'The project MUST acknowledge a majority of bug reports submitted
          in the last 2-12 months (inclusive); the response need not include a fix.

'
      enhancement_responses:
        description: 'The project SHOULD respond to a majority (&gt;50%) of enhancement
          requests in the last 2-12 months (inclusive).

'
        details: 'The response MAY be ''no'' or a discussion about its merits. The
          goal is simply that there be some response to some requests, which indicates
          that the project is still alive. For purposes of this criterion, projects
          need not count fake requests (e.g., from spammers or automated systems).
          If a project is no longer making enhancements, please select "unmet" and
          include the URL that makes this situation clear to users. If a project tends
          to be overwhelmed by the number of enhancement requests, please select "unmet"
          and explain.

'
      report_archive:
        description: 'The project MUST have a publicly available archive for reports
          and responses for later searching.

'
      vulnerability_report_process:
        description: 'The project MUST publish the process for reporting vulnerabilities
          on the project site.

'
        details: 'E.g., a clearly designated mailing address on https://PROJECTSITE/security,
          often in the form security@example.org. This MAY be the same as its bug
          reporting process. Vulnerability reports MAY always be public, but many
          projects have a private vulnerability reporting mechanism.

'
      vulnerability_report_private:
        description: 'If private vulnerability reports are supported, the project
          MUST include how to send the information in a way that is kept private.

'
        details: 'Examples include a private defect report submitted on the web using
          HTTPS (TLS) or an email encrypted using OpenPGP. If vulnerability reports
          are always public (so there are never private vulnerability reports), choose
          "not applicable" (N/A).

'
      vulnerability_report_response:
        description: 'The project''s initial response time for any vulnerability report
          received in the last 6 months MUST be less than or equal to 14 days.

'
        details: 'If there have been no vulnerabilities reported in the last 6 months,
          choose "not applicable" (N/A).

'
      build:
        description: 'If the software produced by the project requires building for
          use, the project MUST provide a working build system that can automatically
          rebuild the software from source code.

'
        details: 'A build system determines what actions need to occur to rebuild
          the software (and in what order), and then performs those steps. For example,
          it can invoke a compiler to compile the source code. If an executable is
          created from source code, it must be possible to modify the project''s source
          code and then generate an updated executable with those modifications. If
          the software produced by the project depends on external libraries, the
          build system does <em>not</em> need to build those external libraries. If
          there is no need to build anything to use the software after its source
          code is modified, select "not applicable" (N/A).

'
      build_common_tools:
        description: 'It is SUGGESTED that common tools be used for building the software.

'
        details: 'For example, Maven, Ant, cmake, the autotools, make, or rake.

'
      build_floss_tools:
        description: The project SHOULD be buildable using only FLOSS tools.
      test:
        description: 'The project MUST use at least one automated test suite that
          is publicly released as FLOSS (this test suite may be maintained as a separate
          FLOSS project).

'
        details: 'The project MAY use multiple automated test suites (e.g., one that
          runs quickly, vs. another that is more thorough but requires special equipment).

'
      test_invocation:
        description: 'A test suite SHOULD be invocable in a standard way for that
          language.

'
        details: 'For example, "make check", "mvn test", or "rake test".

'
      test_most:
        description: 'It is SUGGESTED that the test suite cover most (or ideally all)
          the code branches, input fields, and functionality.

'
      test_continuous_integration:
        description: 'It is SUGGESTED that the project implement continuous integration
          (where new or changed code is frequently integrated into a central code
          repository and automated tests are run on the result).

'
      test_policy:
        description: 'The project MUST have a general policy (formal or not) that
          as major new functionality is added to the software produced by the project,
          tests of that functionality should be added to an automated test suite.

'
        details: 'As long as a policy is in place, even by word of mouth, that says
          developers should add tests to the automated test suite for major new functionality,
          select "Met."

'
      tests_are_added:
        description: 'The project MUST have evidence that the <a href="#test_policy">test_policy</a>
          for adding tests has been adhered to in the most recent major changes to
          the software produced by the project.

'
        details: 'Major functionality would typically be mentioned in the release
          notes. Perfection is not required, merely evidence that tests are typically
          being added in practice to the automated test suite when new major functionality
          is added to the software produced by the project.

'
      tests_documented_added:
        description: 'It is SUGGESTED that this policy on adding tests (see <a href="#test_policy">test_policy</a>)
          be <em>documented</em> in the instructions for change proposals.

'
        details: 'However, even an informal rule is acceptable as long as the tests
          are being added in practice.

'
      warnings:
        description: 'The project MUST enable one or more compiler warning flags,
          a "safe" language mode, or use a separate "linter" tool to look for code
          quality errors or common simple mistakes, if there is at least one FLOSS
          tool that can implement this criterion in the selected language.

'
        details: 'Examples of compiler warning flags include gcc/clang "-Wall". Examples
          of a "safe" language mode include JavaScript "use strict" and perl5''s "use
          warnings". A separate "linter" tool is simply a tool that examines the source
          code to look for code quality errors or common simple mistakes. These are
          typically enabled within the source code or build instructions.

'
      warnings_fixed:
        description: 'The project MUST address warnings.

'
        details: 'These are the warnings identified by the implementation of the <a
          href="#warnings">warnings</a> criterion. The project should fix warnings
          or mark them in the source code as false positives.  Ideally there would
          be no warnings, but a project MAY accept some warnings (typically less than
          1 warning per 100 lines or less than 10 warnings).

'
      warnings_strict:
        description: 'It is SUGGESTED that projects be maximally strict with warnings
          in the software produced by the project, where practical.

'
        details: 'Some warnings cannot be effectively enabled on some projects. What
          is needed is evidence that the project is striving to enable warning flags
          where it can, so that errors are detected early.

'
      know_secure_design:
        description: 'The project MUST have at least one primary developer who knows
          how to design secure software.

'
        details: 'This requires understanding the following design principles, including
          the 8 principles from <a href="http://web.mit.edu/Saltzer/www/publications/protection/">Saltzer
          and Schroeder</a>: <ul> <li>economy of mechanism (keep the design as simple
          and small as practical, e.g., by adopting sweeping simplifications) <li>fail-safe
          defaults (access decisions should deny by default, and projects'' installation
          should be secure by default) <li>complete mediation (every access that might
          be limited must be checked for authority and be non-bypassable) <li>open
          design (security mechanisms should not depend on attacker ignorance of its
          design, but instead on more easily protected and changed information like
          keys and passwords) <li>separation of privilege (ideally, access to important
          objects should depend on more than one condition, so that defeating one
          protection system won''t enable complete access. E.G., multi-factor authentication,
          such as requiring both a password and a hardware token, is stronger than
          single-factor authentication) <li>least privilege (processes should operate
          with the least privilege necessary) <li>least common mechanism (the design
          should minimize the mechanisms common to more than one user and depended
          on by all users, e.g., directories for temporary files) <li>psychological
          acceptability (the human interface must be designed for ease of use - designing
          for "least astonishment" can help) <li>limited attack surface (the attack
          surface - the set of the different points where an attacker can try to enter
          or extract data - should be limited) <li>input validation with whitelists
          (inputs should typically be checked to determine if they are valid before
          they are accepted; this validation should use whitelists (which only accept
          known-good values), not blacklists (which attempt to list known-bad values)).
          </ul> A "primary developer" in a project is anyone who is familiar with
          the project''s code base, is comfortable making changes to it, and is acknowledged
          as such by most other participants in the project. A primary developer would
          typically make a number of contributions over the past year (via code, documentation,
          or answering questions). Developers would typically be considered primary
          developers if they initiated the project (and have not left the project
          more than three years ago), have the option of receiving information on
          a private vulnerability reporting channel (if there is one), can accept
          commits on behalf of the project, or perform final releases of the project
          software. If there is only one developer, that individual is the primary
          developer.

'
      know_common_errors:
        description: 'At least one of the project''s primary developers MUST know
          of common kinds of errors that lead to vulnerabilities in this kind of software,
          as well as at least one method to counter or mitigate each of them.

'
        details: 'Examples (depending on the type of software) include SQL injection,
          OS injection, classic buffer overflow, cross-site scripting, missing authentication,
          and missing authorization. See the <a href="http://cwe.mitre.org/top25/">CWE/SANS
          top 25</a> or <a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project">OWASP
          Top 10</a> for commonly used lists.

'
      crypto_published:
        description: 'The software produced by the project MUST use, by default, only
          cryptographic protocols and algorithms that are publicly published and reviewed
          by experts (if cryptographic protocols and algorithms are used).

'
        details: 'These cryptographic criteria do not always apply because some software
          has no need to directly use cryptographic capabilities.

'
      crypto_call:
        description: 'If the software produced by the project is an application or
          library, and its primary purpose is not to implement cryptography, then
          it SHOULD only call on software specifically designed to implement cryptographic
          functions; it SHOULD NOT re-implement its own.

'
      crypto_floss:
        description: 'All functionality in the software produced by the project that
          depends on cryptography MUST be implementable using FLOSS.

'
        details: 'See the <a href="https://opensource.org/osr">Open Standards Requirement
          for Software by the Open Source Initiative</a>.

'
      crypto_keylength:
        description: 'The security mechanisms within the software produced by the
          project MUST use default keylengths that at least meet the NIST minimum
          requirements through the year 2030 (as stated in 2012). It MUST be possible
          to configure the software so that smaller keylengths are completely disabled.

'
        details: 'These minimum bitlengths are: symmetric key 112, factoring modulus
          2048, discrete logarithm key 224, discrete logarithmic group 2048, elliptic
          curve 224, and hash 224 (password hashing is not covered by this bitlength,
          more information on password hashing can be found in the <a href="#crypto_password_storage">crypto_password_storage</a>
          criterion). See <a href="http://www.keylength.com">http://www.keylength.com</a>
          for a comparison of keylength recommendations from various organizations.
          The software MAY allow smaller keylengths in some configurations (ideally
          it would not, since this allows downgrade attacks, but shorter keylengths
          are sometimes necessary for interoperability).

'
      crypto_working:
        description: 'The default security mechanisms within the software produced
          by the project MUST NOT depend on broken cryptographic algorithms (e.g.,
          MD4, MD5, single DES, RC4, Dual_EC_DRBG) or use cipher modes that are inappropriate
          to the context (e.g., ECB mode is almost never appropriate because it reveals
          identical blocks within the ciphertext as demonstrated by the <a href="https://blog.filippo.io/the-ecb-penguin/">ECB
          penguin</a>, and CTR mode is often inappropriate because it does not perform
          authentication and causes duplicates if the input state is repeated).

'
        details: 'In many cases it''s best to choose a block cipher algorithm mode
          designed to combine secrecy and authentication, e.g., Galois/Counter Mode
          (GCM) and EAX. Projects MAY allow users to enable broken mechanisms where
          necessary for compatibility, but then users know they''re doing it.

'
      crypto_weaknesses:
        description: 'The default security mechanisms within the software produced
          by the project SHOULD NOT depend on cryptographic algorithms or modes with
          known serious weaknesses (e.g., the SHA-1 cryptographic hash algorithm or
          the CBC mode in SSH).

'
        details: 'Concerns about CBC mode in SSH are discussed in <a href="https://www.kb.cert.org/vuls/id/958563">CERT:
          SSH CBC vulnerability</a>.

'
      crypto_pfs:
        description: 'The security mechanisms within the software produced by the
          project SHOULD implement perfect forward secrecy for key agreement protocols
          so a session key derived from a set of long-term keys cannot be compromised
          if one of the long-term keys is compromised in the future.

'
      crypto_password_storage:
        description: >
          If the software produced by the project causes the storing of
          passwords for authentication of external users, the passwords
          MUST be stored as iterated hashes with a per-user salt by
          using a key stretching (iterated) algorithm (e.g., PBKDF2,
          Bcrypt or Scrypt).
        details: >
          This criterion applies only when the software is enforcing
          authentication of users using passwords, such as server-side
          web applications. It does not apply in cases where the software
          stores passwords for authenticating into other systems (e.g.,
          the software implements a client for some other system), since
          at least parts of that software must have often access to the
          unhashed password.
      crypto_random:
        description: 'The security mechanisms within the software produced by the
          project MUST generate all cryptographic keys and nonces using a cryptographically
          secure random number generator, and MUST NOT do so using generators that
          are cryptographically insecure.

'
        details: 'A cryptographically secure random number generator may be a hardware
          random number generator, or it may be a cryptographically secure pseudo-random
          number generator (CSPRNG) using an algorithm such as Hash_DRBG, HMAC_DRBG,
          CTR_DRBG, Yarrow, or Fortuna. Examples of calls to <em>secure</em> random
          number generators include Java''s java.security.SecureRandom and JavaScript''s
          window.crypto.getRandomValues. Examples of calls to <em>insecure</em> random
          number generators include Java''s java.util.Random and JavaScript''s Math.random.

'
      delivery_mitm:
        description: 'The project MUST use a delivery mechanism that counters MITM
          attacks. Using https or ssh+scp is acceptable.

'
        details: 'An even stronger mechanism is releasing the software with digitally
          signed packages, since that mitigates attacks on the distribution system,
          but this only works if the users can be confident that the public keys for
          signatures are correct <em>and</em> if the users will actually check the signature.

'
      delivery_unsigned:
        description: 'A cryptographic hash (e.g., a sha1sum) MUST NOT be retrieved
          over http and used without checking for a cryptographic signature.

'
        details: 'These hashes can be modified in transit.

'
      vulnerabilities_fixed_60_days:
        description: 'There MUST be no unpatched vulnerabilities of medium or high
          severity that have been publicly known for more than 60 days.

'
        details: 'The vulnerability must be patched and released by the project itself
          (patches may be developed elsewhere).  A vulnerability becomes publicly
          known (for this purpose) once it has a CVE with publicly released non-paywalled
          information (reported, for example, in the <a href="https://nvd.nist.gov/">National
          Vulnerability Database</a>) or when the project has been informed and the
          information has been released to the public (possibly by the project). A
          vulnerability is medium to high severity if its <a href="https://nvd.nist.gov/cvss.cfm">CVSS
          2.0</a> base score is 4 or higher. <strong>Note</strong>: this means that users might
          be left vulnerable to all attackers worldwide for up to 60 days.  This criterion
          is often much easier to meet than what Google recommends in <a href="https://security.googleblog.com/2010/07/rebooting-responsible-disclosure-focus.html">Rebooting
          responsible disclosure</a>, because Google recommends that the 60-day period
          start when the project is notified <em>even</em> if the report is not public.

'
      vulnerabilities_critical_fixed:
        description: 'Projects SHOULD fix all critical vulnerabilities rapidly after
          they are reported.

'
      no_leaked_credentials:
        description: 'The public repositories MUST NOT leak a valid private credential
          (e.g., a working password or private key) that is intended to limit public
          access.

'
        details: 'A project MAY leak "sample" credentials for testing and unimportant
          databases, as long as they are not intended to limit public access.

'
      static_analysis:
        description: 'At least one static code analysis tool MUST be applied to any
          proposed major production release of the software before its release, if
          there is at least one FLOSS tool that implements this criterion in the selected
          language.

'
        details: 'A static code analysis tool examines the software code (as source
          code, intermediate code, or executable) without executing it with specific
          inputs.  For purposes of this criterion, compiler warnings and "safe" language
          modes do not count as static code analysis tools (these typically avoid
          deep analysis because speed is vital).  Examples of such static code analysis
          tools include <a href="http://cppcheck.sourceforge.net/">cppcheck</a>, <a
          href="http://clang-analyzer.llvm.org/">clang static analyzer</a>, <a href="http://findbugs.sourceforge.net/">FindBugs</a>
          (including <a href="https://h3xstream.github.io/find-sec-bugs/">FindSecurityBugs</a>),
          <a href="https://pmd.github.io/">PMD</a>, <a href="http://brakemanscanner.org/">Brakeman</a>,
          <a href="https://scan.coverity.com/">Coverity Quality Analyzer</a>, and
          <a href="http://www8.hp.com/au/en/software-solutions/static-code-analysis-sast/index.html">HP
          Fortify Static Code Analyzer</a>. Larger lists of tools can be found in
          places such as the <a href="https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis">Wikipedia
          list of tools for static code analysis</a>, <a href="https://www.owasp.org/index.php/Static_Code_Analysis">OWASP
          information on static code analysis</a>, <a href="http://samate.nist.gov/index.php/Source_Code_Security_Analyzers.html">NIST
          list of source code security analyzers</a>, and <a href="http://www.dwheeler.com/essays/static-analysis-tools.html">Wheeler''s
          list of static analysis tools</a>. The <a href="https://continuousassurance.org/">SWAMP</a>
          is a no-cost platform for assessing vulnerabilities in software using a
          variety of tools. If there are no FLOSS static analysis tools available
          for the implementation language(s) used, select ''N/A''.

'
        na_placeholder: 'Why can''t this be met (e.g., no FLOSS tools exist for that
          language)?

'
        met_placeholder: 'What static analysis tool(s) are used?

'
      static_analysis_common_vulnerabilities:
        description: 'It is SUGGESTED that at least one of the static analysis tools
          used for the static_analysis criterion include rules or approaches to look
          for common vulnerabilities in the analyzed language or environment.

'
      static_analysis_fixed:
        description: 'All medium and high severity exploitable vulnerabilities discovered
          with static code analysis MUST be fixed in a timely way after they are confirmed.

'
        details: 'A vulnerability is medium to high severity if its <a href="https://nvd.nist.gov/cvss.cfm">CVSS
          2.0</a> is 4 or higher.

'
      static_analysis_often:
        description: 'It is SUGGESTED that static source code analysis occur on every
          commit or at least daily.

'
      dynamic_analysis:
        description: 'It is SUGGESTED that at least one dynamic analysis tool be applied
          to any proposed major production release of the software before its release.

'
        details: 'A dynamic analysis tool examines the software by executing it with
          specific inputs. For example, the project MAY use a fuzzing tool (e.g.,
          <a href="http://lcamtuf.coredump.cx/afl/">American Fuzzy Lop</a>) or a web
          application scanner (e.g., <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">OWASP
          ZAP</a> or <a href="http://w3af.org/">w3af</a>). In some cases the <a href="https://github.com/google/oss-fuzz#introduction">OSS-Fuzz</a>
          project may be willing to apply fuzz testing to your project. For purposes
          of this criterion the dynamic analysis tool needs to vary the inputs in
          some way to look for various kinds of problems <em>or</em> be an automated
          test suite with at least 80% branch coverage.  The <a href="https://en.wikipedia.org/wiki/Dynamic_program_analysis">Wikipedia
          page on dynamic analysis</a> and the <a href="https://www.owasp.org/index.php/Fuzzing">OWASP
          page on fuzzing</a> identify some dynamic analysis tools. The analysis tool(s)
          MAY be focused on looking for security vulnerabilities, but this is not
          required.

'
      dynamic_analysis_unsafe:
        description: 'It is SUGGESTED that if the software produced by the project
          includes software written using a memory-unsafe language (e.g., C or C++),
          then at least one dynamic tool (e.g., a fuzzer or web application scanner)
          be routinely used in combination with a mechanism to detect memory safety
          problems such as buffer overwrites. If the project does not produce software
          written in a memory-unsafe language, choose "not applicable" (N/A).

'
        details: 'Examples of mechanisms to detect memory safety problems include
          <a href="https://github.com/google/sanitizers/wiki/AddressSanitizer">Address
          Sanitizer (ASAN)</a> (available in GCC and LLVM), <a href="http://clang.llvm.org/docs/MemorySanitizer.html">Memory
          Sanitizer</a>, and <a href="http://valgrind.org/">valgrind</a>. Other potentially-used
          tools include <a href="http://clang.llvm.org/docs/ThreadSanitizer.html">thread
          sanitizer</a> and <a href="http://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html">undefined
          behavior sanitizer</a>. Widespread assertions would also work.

'
      dynamic_analysis_enable_assertions:
        description: 'It is SUGGESTED that the software produced by the project include
          many run-time assertions that are checked during dynamic analysis.

'
      dynamic_analysis_fixed:
        description: 'All medium and high severity exploitable vulnerabilities discovered
          with dynamic code analysis MUST be fixed in a timely way after they are
          confirmed.

'
        details: 'A vulnerability is medium to high severity if its <a href="https://nvd.nist.gov/cvss.cfm">CVSS
          2.0</a> base score is 4. If you are not running dynamic code analysis and
          thus have not found any vulnerabilities in this way, choose "not applicable"
          (N/A).

'
      installation_common:
        description: 'The project SHOULD provide a way to easily install and uninstall
          the software produced by the project using a commonly-used convention.

'
        details: 'Examples include using a package manager (at the system or language
          level), "make install/uninstall" (supporting DESTDIR), a container in a
          standard format, or a virtual machine image in a standard format. The installation
          and uninstallation process (e.g., its packaging) MAY be implemented by a
          third party as long as it is FLOSS.

'
      build_reproducible:
        description: 'It is SUGGESTED that the project have a <a href="https://reproducible-builds.org/">reproducible
          build</a>. If no building occurs (e.g., scripting languages where the source
          code is used directly instead of being compiled), select "not applicable"
          (N/A).

'
        details: 'A reproducible build means that multiple parties can independently
          redo the process of generating information from source files and get exactly
          the same bit-for-bit result.  In some cases, this can be resolved by forcing some sort order. JavaScript
          developers may consider using npm shrinkwrap and webpack OccurenceOrderPlugin.  GCC
          and clang users may find the -frandom-seed option useful.  The build environment
          (including the toolset) can often be defined for external parties by specifying
          the cryptographic hash of a specific container or virtual machine that they
          can use for rebuilding. The <a href="https://reproducible-builds.org/docs/">reproducible
          builds project has documentation on how to do this</a>.

'
      crypto_used_network:
        description: 'The software produced by the project SHOULD support secure protocols
          for all of its network communications, such as SSHv2 or later, TLS1.2 or
          later (HTTPS), IPsec, SFTP, and SNMPv3. Insecure protocols such as FTP,
          HTTP, telnet, SSLv3 or earlier, and SSHv1 SHOULD be disabled by default,
          and only enabled if the user specifically configures it. If the software
          produced by the project does not support network comunications, select "not
          applicable" (N/A).

'
      crypto_tls12:
        description: 'The software produced by the project SHOULD, if it supports
          or uses TLS, support at least TLS version 1.2. Note that the predecessor
          of TLS was called SSL. If the software does not use TLS, select "not applicable"
          (N/A).

'
      crypto_certificate_verification:
        description: 'The software produced by the project MUST, if it supports TLS,
          perform TLS certificate verification by default when using TLS, including
          on subresources. If the software does not use TLS, select "not applicable"
          (N/A).

'
        details: 'Note that incorrect TLS certificate verification is a common mistake.
          For more information, see <a href="http://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html">"The
          Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser
          Software" by Martin Georgiev et al.</a> and <a href="https://blogs.gnome.org/mcatanzaro/2016/03/12/do-you-trust-this-application/">"Do
          you trust this application?" by Michael Catanzaro</a>.

'
      crypto_verification_private:
        description: 'The software produced by the project SHOULD, if it supports
          TLS, perform certificate verification before sending HTTP headers with private
          information (such as secure cookies). If the software does not use TLS,
          select "not applicable" (N/A).

'
      hardened_site:
        description: 'It is SUGGESTED that the project website, repository (if accessible
          via the web), and download site (if separate) include key hardening headers
          with nonpermissive values.

'
        details: 'Note that GitHub is known to meet this. Sites such as https://securityheaders.io/
          can quickly check this. The key hardening headers are: Content Security
          Policy (CSP), HTTP Strict Transport Security (HSTS), X-Content-Type-Options
          (as "nosniff"), X-Frame-Options, and X-XSS-Protection.

'
      hardening:
        description: 'It is SUGGESTED that hardening mechanisms be used in the software
          produced by the project so that software defects are less likely to result
          in security vulnerabilities.

'
        details: 'Hardening mechanisms may include HTTP headers like Content Security
          Policy (CSP), compiler flags to mitigate attacks (such as -fstack-protector),
          or compiler flags to eliminate undefined behavior. For our purposes least
          privilege is not considered a hardening mechanism (least privilege is important,
          but separate).

'
    '1':
      achieve_passing:
        description: The project MUST achieve a passing level badge.
      contribution_requirements:
        description: 'The information on how to contribute MUST include the requirements
          for acceptable contributions (e.g., a reference to any required coding standard).

'
      dco:
        description: 'The project SHOULD have a legal mechanism where all developers
          of non-trivial amounts of project software assert that they are legally
          authorized to make these contributions. The most common and easily-implemented
          approach for doing this is by using a <a href="http://developercertificate.org/">Developer
          Certificate of Origin (DCO)</a>, where users add "signed-off-by" in their
          commits and the project links to the DCO website. However, this MAY be implemented
          as a Contributor License Agreement (CLA), or other legal mechanism.

'
        details: 'The DCO is the recommended mechanism because it''s easy to implement,
          tracked in the source code, and git directly supports a "signed-off" feature
          using "commit -s". To be most effective it is best if the project documentation
          explains what "signed-off" means for that project. A CLA is a legal agreement
          that defines the terms under which intellectual works have been licensed
          to an organization or project.  A contributor assignment agreement (CAA)
          is a legal agreement that transfers rights in an intellectual work to another
          party; projects are not required to have CAAs, since having CAA increases
          the risk that potential contributors will not contribute, especially if
          the receiver is a for-profit organization. The <a href="https://www.apache.org/licenses/">Apache
          Software Foundation CLAs (the individual contributor license and the corporate
          CLA)</a> are examples of CLAs, for projects which determine that the risks
          of these kinds of CLAs to the project are less than their benefits.

'
      governance:
        description: 'The project MUST clearly define and document its project governance
          model (the way it makes decisions, including key roles).

'
        details: 'There needs to be some well-established documented way to make decisions
          and resolve disputes. In small projects, this may be as simple as "the project
          owner and lead makes all final decisions". There are various governance
          models, including benevolent dictator and formal meritocracy; for more details,
          see <a href="http://oss-watch.ac.uk/resources/governancemodels">Governance
          models</a>. Both centralized (e.g., single-maintainer) and decentralized
          (e.g., group maintainers) approaches have been successfully used in projects.
          The governance information does not need to document the possibility of
          creating a project fork, since that is always possible for FLOSS projects.

'
      code_of_conduct:
        description: 'The project MUST adopt a code of conduct and post it in a standard
          location.

'
        details: 'Projects may be able to improve the civility of their community
          and to set expectations about acceptable conduct by adopting a code of conduct.
          This can help avoid problems before they occur and make the project a more
          welcoming place to encourage contributions. This should focus only on behavior
          within the community/workplace of the project.  Example codes of conduct
          are the <a href="http://contributor-covenant.org/">Contributor Covenant
          Code of Conduct</a> and the Linux kernel <a href="https://www.kernel.org/doc/html/latest/process/code-of-conflict.html">code
          of conflict</a>.

'
      roles_responsibilities:
        description: 'The project MUST clearly define and publicly document the key
          roles in the project and their responsibilities, including any tasks those
          roles must perform.  It MUST be clear who has which role(s), though this
          might not be documented in the same way.

'
        details: 'The documentation for <a href="#governance">governance</a> and roles
          and responsibilities may be in one place.

'
      access_continuity:
        description: 'The project MUST be able to continue with minimal interruption
          if any one person is incapacitated or killed. In particular, the project
          MUST be able to create and close issues, accept proposed changes, and release
          versions of software, within a week of confirmation that an individual is
          incapacitated or killed. This MAY be done by ensuring someone else has any
          necessary keys, passwords, and legal rights to continue the project. Individuals
          who run a FLOSS project MAY do this by providing keys in a lockbox and a
          will providing any needed legal rights (e.g., for DNS names).

'
      bus_factor:
        description: The project SHOULD have a "bus factor" of 2 or more.
        details: 'A "bus factor" (aka "truck factor") is the minimum number of project
          members that have to suddenly disappear from a project ("hit by a bus")
          before the project stalls due to lack of knowledgeable or competent personnel.
          The <a href="https://github.com/mtov/truck-factor">truck-factor</a> tool
          can estimate this for projects on GitHub. For more information, see <a href="https://www.researchgate.net/publication/272824568_assessing_the_bus_factor_of_git_repositories">Assessing
          the Bus Factor of Git Repositories</a> by Cosentino et al.

'
      documentation_roadmap:
        description: 'The project MUST have a documented roadmap that describes what
          the project intends to do and not do for at least the next year.

'
        details: 'The project might not achieve the roadmap, and that''s fine; the
          purpose of the roadmap is to help potential users and constributors understand
          the intended direction of the project. It need not be detailed.

'
      documentation_architecture:
        description: >
          The project MUST include documentation of the architecture
          (aka high-level design) of the software produced by the
          project.  If the project does not produce software, select
          "not applicable" (N/A).
        details: >
          A software architecture explains a program's fundamental
          structures, i.e., the program's major components, the
          relationships among them, and the key properties of these
          components and relationships.
      documentation_security:
        description: >
          The project MUST document what the user can and cannot expect
          in terms of security from the software produced by the project
          (its "security requirements").
        details: >
          These are the security requirements that
          the software is intended to meet.
      documentation_quick_start:
        description: >
          The project MUST provide a "quick start" guide for new users
          to help them quickly do something with the software.
        details: >
          The idea is to show users how to get started and make the
          software do anything at all. This is critically important for
          potential users to get started.
      assurance_case:
        description: >
          The project MUST provide an assurance case that
          justifies why its security requirements are met.
          The assurance case MUST include: a description of the threat
          model, clear identification of trust boundaries,
          an argument that secure design principles have been applied,
          and an argument
          that common implementation security weaknesses have been countered.
        details: >
          An assurance case is "a documented body of evidence that
          provides a convincing and valid argument that a specified set of
          critical claims regarding a system’s properties are adequately
          justified for a given application in a given environment" (<a
          href="http://nvlpubs.nist.gov/nistpubs/ir/2009/ir7608.pdf">
          "Software Assurance Using Structured Assurance Case Models",
          Thomas Rhodes et al, NIST Interagency Report 7608</a>). Trust
          boundaries are boundaries where data or execution changes
          its level of trust, e.g., a server's boundaries in a typical
          web application.
          It's common to list secure design principles
          (such as Saltzer and Schroeer) and common
          implementation security weaknesses (such as the OWASP top 10
          or CWE/SANS top 25), and show how each are countered.
          The <a href="https://github.com/coreinfrastructure/best-practices-badge/blob/master/doc/security.md">BadgeApp assurance case</a>
          may be a useful example.
          This is related to documentation_security,
          documentation_architecture, and implement_secure_design.
      documentation_current:
        description: 'The project MUST make an effort to keep the documentation consistent
          with the current version of the project results (including software produced
          by the project). Any <em>known</em> documentation defects making it inconsistent
          MUST be fixed. If the documentation is generally current, but erroneously
          includes some older information that is no longer true, just treat that
          as a defect, then track and fix as usual.

'
        details: 'The documentation MAY include information about differences or changes
          between versions of the software and/or link to older versions of the documentation.
          The intent of this criterion is that an effort is made to keep the documentation
          consistent, not that the documentation must be perfect.

'
      documentation_achievements:
        description: 'The project repository front page and/or website MUST identify
          and hyperlink to any achievements, including this best practices badge,
          within 48 hours of public recognition that the achievement has been attained.

'
        details: 'An achievement is any set of external criteria that the project
          has specifically worked to meet, including some badges. This information
          does not need to be on the project website front page.  A project using
          GitHub can put achievements on the repository front page by adding them
          to the README file.

'
      accessibility_best_practices:
        description: 'The project (both project sites and project results) SHOULD
          follow accessibility best practices so that persons with disabilities can
          still participate in the project and use the project results where it is
          reasonable to do so.

'
        details: |
          For web applications, see the <a href="https://www.w3.org/TR/WCAG20/">Web Content Accessibility Guidelines (WCAG 2.0)</a> and its supporting document <a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/Overview.html">Understanding WCAG 2.0</a>; see also <a href="https://www.w3.org/standards/webdesign/accessibility">W3C accessibility information</a>. For GUI applications, consider using the environment-specific accessibility guidelines (such as <a href="https://developer.gnome.org/accessibility-devel-guide/stable/">Gnome</a>, <a href="https://accessibility.kde.org/">KDE</a>, <a href="http://docs.xfce.org/xfce/xfce4-settings/accessibility">XFCE</a>, <a href="https://developer.android.com/guide/topics/ui/accessibility/">Android</a>, <a href="https://developer.apple.com/accessibility/ios/">iOS</a>, <a href="http://www.apple.com/accessibility/osx/voiceover/">Mac</a>, and <a href="https://msdn.microsoft.com/en-us/windows/uwp/accessibility/accessibility-overview)">Windows</a>). Some TUI applications (e.g. `ncurses` programs) can do certain things to make themselves more accessible (such as `alpine`'s `force-arrow-cursor` setting). Most command-line applications are fairly accessible as-is. This criterion is often N/A, e.g., for program libraries. Here are some examples of actions to take or issues to consider: <ul> <li>Provide text alternatives for any non-text content so
            that it can be changed into other forms people need, such as
            large print, braille, speech, symbols or simpler language (
            <a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/text-equiv.html">WCAG 2.0 guideline 1.1</a>)
          <li>Color is not used as the only visual means of conveying
            information, indicating an action, prompting a response, or
            distinguishing a visual element. (
            <a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-without-color.html">WCAG 2.0 guideline 1.4.1</a>)
          <li>The visual presentation of text and images of text has a contrast
            ratio of at least 4.5:1, except for large text, incidental text,
            and logotypes (
            <a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html">WCAG 2.0 guideline 1.4.3</a>)
          <li>Make all functionality available from a keyboard (WCAG guideline 2.1) <li>A GUI or web-based project SHOULD test with at least one
            screen-reader on the target platform(s) (e.g. NVDA, Jaws, or
            WindowEyes on Windows; VoiceOver on Mac & iOS; Orca on Linux/BSD;
            TalkBack on Android). TUI programs MAY work to reduce overdraw
            to prevent redundant reading by screen-readers.
          </ul>
      internationalization:
        description: 'The software produced by the project SHOULD be internationalized
          to enable easy localization for the target audience''s culture, region,
          or language. If internationalization (i18n) does not apply (e.g., the software
          doesn''t generate text intended for end-users and doesn''t sort human-readable
          text), select "not applicable" (N/A).

'
        details: 'Localization "refers to the adaptation of a product, application
          or document content to meet the language, cultural and other requirements
          of a specific target market (a locale)." Internationalization is the "design
          and development of a product, application or document content that enables
          easy localization for target audiences that vary in culture, region, or
          language." (See <a href="https://www.w3.org/International/questions/qa-i18n">W3C''s
          "Localization vs. Internationalization"</a>.) Software meets this criterion
          simply by being internationalized. No localization for another specific
          language is required, since once software has been internationalized it''s
          possible for others to work on localization.

'
      sites_password_security:
        description: 'If the project sites (website, repository, and download URLs)
          store passwords for authentication of external users, the passwords MUST
          be stored as iterated hashes with a per-user salt by using a key stretching
          (iterated) algorithm (e.g., PBKDF2, Bcrypt or Scrypt). If the project sites
          do not store passwords for this purpose, select "not applicable" (N/A).

'
        details: 'Note that the use of <a href="https://help.github.com/articles/github-security/">GitHub</a>
          meets this criterion. This criterion only applies to passwords used for
          authentication of external users into the project sites. If the project
          sites must log in to other sites, they may need to store passwords for that
          purpose differently (since using an algorithm like Bcrypt would make those
          passwords useless). This applies criterion crypto_password_storage to the
          project sites, similar to sites_https.

'
      maintenance_or_update:
        description: 'The project MUST maintain the most often used older versions
          of the product <em>or</em> provide an upgrade path to newer versions. If the
          upgrade path is difficult, the project MUST document how to perform the
          upgrade (e.g., the interfaces that have changed and detailed suggested steps
          to help upgrade).

'
      report_tracker:
        description: 'The project MUST use an issue tracker for tracking individual
          issues.

'
      vulnerability_report_credit:
        description: 'The project MUST give credit to the reporter(s) of all vulnerability
          reports resolved in the last 12 months, except for the reporter(s) who request
          anonymity. If there have been no vulnerabilities resolved in the last 12
          months, select "not applicable" (N/A).

'
      vulnerability_response_process:
        description: 'The project MUST have a documented process for responding to
          vulnerability reports.

'
        details: 'This is strongly related to vulnerability_report_process, which
          requires that there be a documented way to report vulnerabilities. It also
          related to vulnerability_report_response, which requires response to vulnerability
          reports within a certain time frame.

'
      coding_standards:
        description: 'The project MUST identify the specific coding style guides for
          the primary languages it uses, and require that contributions generally
          comply with it.

'
        details: 'In most cases this is done by referring to some existing style guide(s),
          possibly listing differences. These style guides can include ways to improve
          readability and ways to reduce the likelihood of defects (including vulnerabilities).
          Many programming languages have one or more widely-used style guides. Examples
          of style guides include <a href="https://github.com/google/styleguide">Google''s
          style guides</a> and <a href="https://www.securecoding.cert.org/">SEI CERT
          Coding Standards</a>.

'
      coding_standards_enforced:
        description: 'The project MUST automatically enforce its selected coding style(s)
          if there is at least one FLOSS tool that can do so in the selected language(s).

'
        details: 'This MAY be implemented using static analysis tool(s) and/or by
          forcing the code through code reformatters. In many cases the tool configuration
          is included in the project''s repository (since different projects may choose
          different configurations). Projects MAY allow style exceptions (and typically
          will); where exceptions occur, they MUST be rare and documented in the code
          at their locations, so that these exceptions can be reviewed and so that
          tools can automatically handle them in the future. Examples of such tools
          include ESLint (JavaScript) and Rubocop (Ruby).

'
      build_standard_variables:
        description: 'Build systems for native binaries MUST honor the relevant compiler
          and linker (environment) variables passed in to them (e.g., CC, CFLAGS,
          CXX, CXXFLAGS, and LDFLAGS) and pass them to compiler and linker invocations.
          A build system MAY extend them with additional flags; it MUST NOT simply
          replace provided values with its own. If no native binaries are being generated,
          select "not applicable" (N/A).

'
        details: 'It should be easy to enable special build features like Address
          Sanitizer (ASAN), or to comply with distribution hardening best practices
          (e.g., by easily turning on compiler flags to do so).

'
      build_preserve_debug:
        description: 'The build and installation system SHOULD preserve debugging
          information if they are requested in the relevant flags (e.g., "install
          -s" is not used). If there is no build or installation system (e.g., typical
          JavaScript libraries), select "not applicable" (N/A).

'
        details: 'E.G., setting CFLAGS (C) or CXXFLAGS (C++) should create the relevant
          debugging information if those languages are used, and they should not be
          stripped during installation. Debugging information is needed for support
          and analysis, and also useful for measuring the presence of hardening features
          in the compiled binaries.

'
      build_non_recursive:
        description: 'The build system for the software produced by the project MUST
          NOT recursively build subdirectories if there are cross-dependencies in
          the subdirectories. If there is no build or installation system (e.g., typical
          JavaScript libraries), select "not applicable" (N/A).

'
        details: 'The project build system''s internal dependency information needs
          to be accurate, otherwise, changes to the project may not build correctly.
          Incorrect builds can lead to defects (including vulnerabilities). A common
          mistake in large build systems is to use a "recursive build" or "recursive
          make", that is, a hierarchy of subdirectories containing source files, where
          each subdirectory is independently built. Unless each subdirectory is fully
          independent, this is a mistake, because the dependency information is incorrect.

'
      build_repeatable:
        description: 'The project MUST be able to repeat the process of generating
          information from source files and get exactly the same bit-for-bit result.
          If no building occurs (e.g., scripting languages where the source code is
          used directly instead of being compiled), select "not applicable" (N/A).

'
        details: 'GCC and clang users may find the -frandom-seed option useful; in
          some cases, this can be resolved by forcing some sort order. More suggestions
          can be found at the <a href="https://reproducible-builds.org/">reproducible
          build</a> site.

'
      installation_common:
        description: 'The project MUST provide a way to easily install and uninstall
          the software produced by the project using a commonly-used convention.

'
        details: 'Examples include using a package manager (at the system or language
          level), "make install/uninstall" (supporting DESTDIR), a container in a
          standard format, or a virtual machine image in a standard format. The installation
          and uninstallation process (e.g., its packaging) MAY be implemented by a
          third party as long as it is FLOSS.

'
      installation_standard_variables:
        description: 'The installation system for end-users MUST honor standard conventions
          for selecting the location where built artifacts are written to at installation
          time.  For example, if it installs files on a POSIX system it MUST honor
          the DESTDIR environment variable. If there is no installation system or
          no standard convention, select "not applicable" (N/A).

'
      installation_development_quick:
        description: 'The project MUST provide a way for potential developers to quickly
          install all the project results and support environment necessary to make
          changes, including the tests and test environment. This MUST be performed
          with a commonly-used convention.

'
        details: 'This MAY be implemented using a generated container and/or installation
          script(s). External dependencies would typically be installed by invoking
          system and/or language package manager(s), per external_dependencies.

'
      external_dependencies:
        description: 'The project MUST list external dependencies in a computer-processable
          way.

'
        details: 'Typically this is done using the conventions of package manager
          and/or build system. Note that this helps implement <a href="#installation_development_quick">installation_development_quick</a>.

'
      dependency_monitoring:
        description: 'Projects MUST monitor or periodically check their external dependencies
          (including convenience copies) to detect known vulnerabilities, and fix
          exploitable vulnerabilities or verify them as unexploitable.

'
        details: 'This can be done using an origin analyzer / dependency checking
          tool such as <a href="https://www.owasp.org/index.php/OWASP_Dependency_Check">OWASP''s
          Dependency-Check</a>, <a href="https://www.sonatype.com/nexus-auditor">Sonatype''s
          Nexus Auditor</a>, <a href="https://www.blackducksoftware.com/products/protex">Black
          Duck''s Protex</a>, <a href="http://www.protecode.com/">Synopsys'' Protecode</a>,
          and <a href="https://github.com/rubysec/bundler-audit">Bundler-audit (for
          Ruby)</a>. Some package managers include mechanisms to do this. It is acceptable
          if the components'' vulnerability cannot be exploited, but this analysis
          is difficult and it is sometimes easier to simply update or fix the part.

'
      updateable_reused_components:
        description: |
          The project MUST either:
          <ol>
          <li> make it easy to identify and update reused externally-maintained components; <strong>or</strong></li>
          <li> use the standard components provided by the system or programming language.</li>
          </ol>
          Then, if a vulnerability is found in a reused component, it will be
          easy to update that component.
        details: 'A typical way to meet this criterion is to use system and programming
          language package management systems. Many FLOSS programs are distributed
          with "convenience libraries" that are local copies of standard libraries
          (possibly forked). By itself, that''s fine. However, if the program *must*
          use these local (forked) copies, then updating the "standard" libraries
          as a security update will leave these additional copies still vulnerable.
          This is especially an issue for cloud-based systems; if the cloud provider
          updates their "standard" libaries but the program won''t use them, then
          the updates don''t actually help. See, e.g., <a href="http://spot.livejournal.com/312320.html">"Chromium:
          Why it isn''t in Fedora yet as a proper package" by Tom Callaway</a>.

'
      interfaces_current:
        description: 'The project SHOULD avoid using deprecated or obsolete functions
          and APIs where FLOSS alternatives are available in the set of technology
          it uses (its "technology stack") and to a supermajority of the users the
          project supports (so that users have ready access to the alternative).

'
      automated_integration_testing:
        description: 'An automated test suite MUST be applied on each check-in to
          a shared repository for at least one branch.  This test suite MUST produce
          a report on test success or failure.

'
        details: 'This requirement can be viewed as a subset of test_continuous_integration,
          but focused on just testing, without requiring continuous integration.

'
      regression_tests_added50:
        description: 'The project MUST add regression tests to an automated test suite
          for at least 50% of the bugs fixed within the last six months.

'
      test_statement_coverage80:
        description: 'The project MUST have FLOSS automated test suite(s) that provide
          at least 80% statement coverage if there is at least one FLOSS tool that
          can measure this criterion in the selected language.

'
        details: 'Many FLOSS tools are available to measure test coverage, including
          gcov/lcov, Blanket.js, Istanbul, and JCov. Note that meeting this criterion
          is not a guarantee that the test suite is thorough, instead, failing to
          meet this criterion is a strong indicator of a poor test suite.

'
      test_policy_mandated:
        description: 'The project MUST have a formal written policy that as major
          new functionality is added, tests for the new functionality MUST
          be added to an automated test suite.

'
      tests_documented_added:
        description: 'The project MUST include, in its documented instructions for
          change proposals, the policy that tests are to be added for major new functionality.

'
      warnings_strict:
        description: 'Projects MUST be maximally strict with warnings in the software
          produced by the project, where practical.

'
      implement_secure_design:
        description: 'The project MUST implement secure design principles (from "know_secure_design"),
          where applicable.  If the project is not producing software, select "not
          applicable" (N/A).

'
        details: 'For example, the project results should have fail-safe defaults
          (access decisions should deny by default, and projects'' installation should
          be secure by default). They should also have complete mediation (every access
          that might be limited must be checked for authority and be non-bypassable).
          Note that in some cases principles will conflict, in which case a choice
          must be made (e.g., many mechanisms can make things more complex, contravening
          "economy of mechanism" / keep it simple).

'
      crypto_weaknesses:
        description: 'The default security mechanisms within the software produced
          by the project MUST NOT depend on cryptographic algorithms or modes with
          known serious weaknesses (e.g., the SHA-1 cryptographic hash algorithm or
          the CBC mode in SSH).

'
      crypto_algorithm_agility:
        description: 'The project SHOULD support multiple cryptographic algorithms,
          so users can quickly switch if one is broken. Common symmetric key algorithms
          include AES, Twofish, and Serpent. Common cryptographic hash algorithm alternatives
          include SHA-2 (including SHA-224, SHA-256, SHA-384 AND SHA-512) and SHA-3.

'
      crypto_credential_agility:
        description: 'The project MUST support storing authentication credentials
          (such as passwords and dynamic tokens) and private cryptographic keys in
          files that are separate from other information (such as configuration files,
          databases, and logs), and permit users to update and replacement them without
          code recompilation. If the project never processes authentication credentials
          and private cryptographic keys, select "not applicable" (N/A).

'
      crypto_used_network:
        description: 'The software produced by the project SHOULD support secure protocols
          for all of its network communications, such as SSHv2 or later, TLS1.2 or
          later (HTTPS), IPsec, SFTP, and SNMPv3. Insecure protocols such as FTP,
          HTTP, telnet, SSLv3 or earlier, and SSHv1 SHOULD be disabled by default,
          and only enabled if the user specifically configures it. If the software
          produced by the project does not support network comunications, select "not
          applicable" (N/A).

'
      crypto_tls12:
        description: 'The software produced by the project SHOULD, if it supports
          or uses TLS, support at least TLS version 1.2. Note that the predecessor
          of TLS was called SSL. If the software does not use TLS, select "not applicable"
          (N/A).

'
      crypto_certificate_verification:
        description: 'The software produced by the project MUST, if it supports TLS,
          perform TLS certificate verification by default when using TLS, including
          on subresources. If the software does not use TLS, select "not applicable"
          (N/A).

'
        details: 'Note that incorrect TLS certificate verification is a common mistake.
          For more information, see <a href="http://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html">"The
          Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser
          Software" by Martin Georgiev et al.</a> and <a href="https://blogs.gnome.org/mcatanzaro/2016/03/12/do-you-trust-this-application/">"Do
          you trust this application?" by Michael Catanzaro</a>.

'
      crypto_verification_private:
        description: 'The software produced by the project MUST, if it supports TLS,
          perform certificate verification before sending HTTP headers with private
          information (such as secure cookies). If the software does not use TLS,
          select "not applicable" (N/A).

'
      signed_releases:
        description: >
          The project MUST cryptographically sign releases of the project
          results intended for widespread use, and there MUST be a
          documented process explaining to users how they can obtain
          the public signing keys and verify the signature(s). The
          private key for these signature(s) MUST NOT be on site(s)
          used to directly distribute the software to the public.
          If releases are not intended for widespread use,
          select "not applicable" (N/A).
        details: >
          The project results include both source code and any generated
          deliverables where applicable (e.g., executables, packages, and
          containers). Generated deliverables MAY be signed separately
          from source code. These MAY be implemented as signed git tags
          (using cryptographic digital signatures). Projects MAY provide
          generated results separately from tools like git, but in those
          cases, the separate results MUST be separately signed.
      version_tags_signed:
        description: 'It is SUGGESTED that in the version control system, each important
          version tag (a tag that is part of a major release, minor release, or fixes
          publicly noted vulnerabilities) be cryptographically signed and verifiable
          as described in <a href="#signed_releases">signed_releases</a>.

'
      input_validation:
        description: 'The project results MUST check all inputs from potentially untrusted
          sources to ensure they are valid (a *whitelist*), and reject invalid inputs,
          if there are any restrictions on the data at all.

'
        details: 'Note that comparing input against a list of "bad formats" (aka a
          *blacklist*) is normally not enough, because attackers can often  work around
          a blacklist. In particular, numbers are converted into internal formats
          and then checked if they are between their minimum and maximum (inclusive),
          and text strings are checked to ensure that they are valid text patterns
          (e.g., valid UTF-8, length, syntax, etc.). Some data may need to be "anything
          at all" (e.g., a file uploader), but these would typically be rare.

'
      hardening:
        description: 'Hardening mechanisms SHOULD be used in the software produced
          by the project so that software defects are less likely to result in security
          vulnerabilities.

'
        details: 'Hardening mechanisms may include HTTP headers like Content Security
          Policy (CSP), compiler flags to mitigate attacks (such as -fstack-protector),
          or compiler flags to eliminate undefined behavior. For our purposes least
          privilege is not considered a hardening mechanism (least privilege is important,
          but separate).

'
      static_analysis_common_vulnerabilities:
        description: 'The project MUST use at least one static analysis tool with
          rules or approaches to look for common vulnerabilities in the analyzed language
          or environment, if there is at least one FLOSS tool that can implement this
          criterion in the selected language.

'
      dynamic_analysis_unsafe:
        description: '<em>If</em> the software produced by the project includes software
          written using a memory-unsafe language (e.g., C or C++), <em>then</em> the
          project MUST use at least one dynamic tool (e.g., a fuzzer or web application
          scanner) be routinely used in combination with a mechanism to detect memory
          safety problems such as buffer overwrites. If the project does not produce
          software written in a memory-unsafe language, select "not applicable" (N/A).

'
    '2':
      achieve_silver:
        description: The project MUST achieve a silver level badge.
      bus_factor:
        description: The project MUST have a "bus factor" of 2 or more.
      contributors_unassociated:
        description: 'The project MUST have at least two unassociated significant
          contributors.

'
        details: 'Contributors are associated if they are paid to work by the same
          organization (as an employee or contractor) and the organization stands
          to benefit from the project''s results. Financial grants do not count as
          being from the same organization if they pass through other organizations
          (e.g., science grants paid to different organizations from a common government
          or NGO source do not cause contributors to be associated). Someone is a
          significant contributor if they have made non-trivial contributions to the
          project in the past year. Examples of good indicators of a significant contributor
          are: written at least 1,000 lines of code, contributed 50 commits, or contributed
          at least 20 pages of documentation.

'
      copyright_per_file:
        description: 'The project MUST include a copyright statement in each source
          file, identifying at least one relevant year and copyright holder.

'
        details: 'This MAY be done by including the following inside a comment near
          the beginning of each file: "<tt>Copyright [year this project or content
          started] - [most recent year modified], [project founder] and the [project
          name] contributors.</tt>"

'
      license_per_file:
        description: 'The project MUST include a license statement in each source
          file. This MAY be done by including the following inside a comment near
          the beginning of each file: <a href="https://spdx.org/using-spdx#identifiers"><tt>SPDX-License-Identifier:
          [SPDX license expression for project]</tt></a>.

'
        details: 'This MAY also be done by including a statement in natural language
          identifying the license. The project MAY also include a stable URL pointing
          to the license text, or the full license text. Note that the criterion license_location
          requires the project license be in a standard location. See <a href="https://github.com/david-a-wheeler/spdx-tutorial">this
          SPDX tutorial</a> for more information about SPDX license expressions. Note
          the relationship with <a href="#copyright_per_file">copyright_per_file</a>,
          whose content would typically precede the license information.

'
      repo_distributed:
        description: 'The project''s source repository MUST use a common distributed
          version control software (e.g., git or mercurial).

'
      small_tasks:
        description: 'The project MUST clearly identify small tasks that can be performed
          by new or casual contributors.

'
        details: 'This identification is typically done by marking selected issues
          in an issue tracker with one or more tags the project uses for the purpose,
          e.g., <a href="http://up-for-grabs.net/#/">up-for-grabs</a>, <a href="http://www.firsttimersonly.com/">first-timers-only</a>,
          "Small fix", microtask, or IdealFirstBug. These new tasks need not involve
          adding functionality; they can be improving documentation, adding test cases,
          or anything else that aids the project and helps the contributor understand
          more about the project.

'
      require_2FA:
        description: 'The project MUST require two-factor authentication (2FA) for
          developers for changing a central repository or accessing sensitive data
          (such as private vulnerability reports). This 2FA mechanism MAY use mechanisms
          without cryptographic mechanisms such as SMS, though that is not recommended.

'
      secure_2FA:
        description: 'The project''s two-factor authentication (2FA) SHOULD use cryptographic
          mechanisms to prevent impersonation.  Short Message Service (SMS) based
          2FA, by itself, does NOT meet this criterion, since it is not encrypted.

'
        details: 'A 2FA mechanism that meets this criterion would be a Time-based
          One-Time Password (TOTP) application that automatically generates an authentication
          code that changes after a certain period of time. Note that <a href="https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/">GitHub
          supports TOTP</a>.

'
      code_review_standards:
        description: 'The project MUST document its code review requirements, including
          how code review is conducted, what must be checked, and what is required
          to be acceptable.

'
        details: 'See also <a href="#two_person_review">two_person_review</a> and
          contribution_requirements.

'
      two_person_review:
        description: 'The project MUST have at least 50% of all proposed modifications
          reviewed before release by a person other than the author, to determine
          if it is a worthwhile modification and free of known issues which would
          argue against its inclusion

'
      build_reproducible:
        description: 'The project MUST have a <a href="https://reproducible-builds.org/">reproducible
          build</a>. If no building occurs (e.g., scripting languages where the source
          code is used directly instead of being compiled), select "not applicable"
          (N/A).

'
        details: |
          A reproducible build means that multiple parties can independently redo the process of generating information from source files and get exactly the same bit-for-bit result.  In some cases, this can be resolved by forcing some sort order. JavaScript developers may consider using npm shrinkwrap and webpack OccurenceOrderPlugin. GCC and clang users may find the -frandom-seed option useful. The build environment (including the toolset) can often be defined for external parties by specifying the cryptographic hash of a specific container or virtual machine that they can use for rebuilding. The <a href="https://reproducible-builds.org/docs/">reproducible builds project has documentation</a>
           on how to do this.
      test_invocation:
        description: 'A test suite MUST be invocable in a standard way for that language.

'
      test_continuous_integration:
        description: 'The project MUST implement continuous integration, where new
          or changed code is frequently integrated into a central code repository
          and automated tests are run on the result.

'
        details: 'In most cases this means that each developer who works full-time
          on the project integrates at least daily.

'
      test_statement_coverage90:
        description: 'The project MUST have FLOSS automated test suite(s) that provide
          at least 90% statement coverage if there is at least one FLOSS tool that
          can measure this criterion in the selected language.

'
      test_branch_coverage80:
        description: 'The project MUST have FLOSS automated test suite(s) that provide
          at least 80% branch coverage if there is at least one FLOSS tool that can
          measure this criterion in the selected language.

'
      crypto_used_network:
        description: 'The software produced by the project MUST support secure protocols
          for all of its network communications, such as SSHv2 or later, TLS1.2 or
          later (HTTPS), IPsec, SFTP, and SNMPv3. Insecure protocols such as FTP,
          HTTP, telnet, SSLv3 or earlier, and SSHv1 MUST be disabled by default, and
          only enabled if the user specifically configures it. If the software produced
          by the project does not support network comunications, select "not applicable"
          (N/A).

'
      crypto_tls12:
        description: 'The software produced by the project MUST, if it supports or
          uses TLS, support at least TLS version 1.2. Note that the predecessor of
          TLS was called SSL. If the software does not use TLS, select "not applicable"
          (N/A).

'
      hardened_site:
        description: 'The project website, repository (if accessible via the web),
          and download site (if separate) MUST include key hardening headers with
          nonpermissive values.

'
        details: 'Note that GitHub is known to meet this. Sites such as https://securityheaders.io/
          can quickly check this. The key hardening headers are: Content Security
          Policy (CSP), HTTP Strict Transport Security (HSTS), X-Content-Type-Options
          (as "nosniff"), X-Frame-Options, and X-XSS-Protection.

'
      security_review:
        description: 'The project MUST have performed a security review within the
          last 5 years. This review MUST consider the security requirements and security
          boundary.

'
        details: 'This MAY be done by the project members and/or an independent evaluation.
          This evaluation MAY be supported by static and dynamic analysis tools, but
          there also must be human review to identify problems (particularly in design)
          that tools cannot detect.

'
      hardening:
        description: >
          Hardening mechanisms MUST be used in the software produced by
          the project so that software defects are less likely to
          result in security vulnerabilities.
      dynamic_analysis:
        description: >
          The project MUST apply at least one dynamic analysis tool to
          any proposed major production release of the software produced
          by the project before its release.
      dynamic_analysis_enable_assertions:
        description: >
          The project SHOULD include many run-time assertions in the software
          it produces and check those assertions during dynamic analysis.
  headings:
    Accessibility and internationalization: Accessibility and internationalization
    Analysis: Analysis
    Automated test suite: Automated test suite
    Identification: Identification
    Basic project website content: Basic project website content
    Basics: Basics
    Bug-reporting process: Bug-reporting process
    Change Control: Change Control
    Coding standards: Coding standards
    Documentation: Documentation
    Dynamic code analysis: Dynamic code analysis
    Externally-maintained components: Externally-maintained components
    Future: Future
    future: future
    Installation system: Installation system
    New functionality testing: New functionality testing
    OSS License: OSS License
    Other: Other
    Other security issues: Other security issues
    Previous versions: Previous versions
    Project oversight: Project oversight
    Public version-controlled source repository: Public version-controlled source
      repository
    Publicly known vulnerabilities fixed: Publicly known vulnerabilities fixed
    Quality: Quality
    Release notes: Release notes
    Reporting: Reporting
    Secure development knowledge: Secure development knowledge
    Secure release: Secure release
    Secured delivery against man-in-the-middle (MITM) attacks: Secured delivery against
      man-in-the-middle (MITM) attacks
    Security: Security
    Static code analysis: Static code analysis
    Unique version numbering: Unique version numbering
    'Use basic good cryptographic practices':
      Use basic good cryptographic practices
    Vulnerability report process: Vulnerability report process
    Warning flags: Warning flags
    Working build system: Working build system
  criterion_status:
    Met: Met
    Unmet: Unmet
    NA: N/A
  error_messages:
    need_home_page_or_url: Need at least a home page or repository URL
    form_contains:
      one: The form contains 1 error.
      few: The form contains %{count} errors.
      many: The form contains %{count} errors.
      other: The form contains %{count} errors.
    comma_separated_list: ' must be a comma-separated list of names'
    begin_with_cpe: ' must begin with "cpe:"'
    not_an_email: ' is not an email'
    known_bad_password: ' is a well-known (bad) password'
    valid_text: ' must have a valid UTF-8 encoding and no invalid control characters'
    url_message: ' must begin with http: or https: and use a limited charset'
  # Last translation entry, here for test purposes so that we can detect
  # some problems in YAML formatting of this file.
  last_entry: Last translation entry
