---
fr:
  helpers:
    select:
      prompt: Veuillez sélectionner
    submit:
      create: Créer un(e) %{model}
      update: Modifier ce(tte) %{model}
      submit: Enregistrer ce(tte) %{model}
  hello: Bonjour le monde
  projects_count:
    one: "%{count} Projet"
    other: "%{count} Projets"
    zero: Aucun Projet
    few: "%{count} Projets"
    many: "%{count} Projets"
  feed_title: >-
    Mise à Jour des Projets de la BadgeApp Meilleures Pratiques
    de la OpenSSF
  layouts:
    cii_best_practices: Meilleures Pratiques de la OpenSSF
    projects: Projets
    users: Utilisateurs
    profile: Profil
    settings: Paramètres
    logout_html: >-
      <i class="fa fa-sign-out" aria-hidden="true"></i> Déconnection
    signup_html: >-
      <i class="fa fa-user-plus" aria-hidden="true"></i> S'inscrire
    login_html: >-
      <i class="fa fa-sign-in" aria-hidden="true"></i> S'identifier
    footer_text_html: >-
      <small> <strong>Vous avez besoin d'aide ? Vous avez une
      question ? Vous voyez un problème ? Merci de <em><a href="https://github.com/coreinfrastructure/best-practices-badge/issues"
      target="_blank" rel="noopener">reporter un problème</a></em>.</strong>
      Copyright © <a href="https://www.bestpractices.dev" target="_blank"
      rel="noopener">OpenSSF Best Practices Badge a Series of
      LF Projects, LLC</a>. Pour les conditions d'utilisation
      du site web, la politique de marque ou autres règlements
      du projet, voir <a href="https://lfprojects.org" target="_blank"
      rel="noopener">ces règlements</a>. Pour plus d'information,
      voir les sites web de l'<a href="https://openssf.org" target="_blank"
      rel="noopener">Open Source Security Foundation (OpenSSF)</a>
      et de la <a href="https://www.linuxfoundation.org/" target="_blank"
      rel="noopener">Fondation Linux</a>. Tous droits réservés.
      Consultez notre <a href="https://www.linuxfoundation.org/privacy"
      target="_blank" rel="noopener">politique de confidentialité</a>.</small>
    account: Compte
    choose_locale: Choisir la langue
    toggle_navigation: Choisir ou non la navigation repliable
  sessions:
    login_header: S'identifier
    login_with_github_html: >-
      <span class="fa fa-github"></span> Connectez-vous avec GitHub
    or: ou
    email: Email
    password: Mot de passe
    forgot_password: Vous avez oublié votre mot de passe ?
    remember_me: Rester connecté (en utilisant un cookie permanent)
    login_custom: Connectez-vous en utilisant un compte personnalisé
    no_custom: Aucun compte personnalisé ? Inscrivez-vous maintenant
      !
    already_logged_in: Vous êtes déjà connecté.
    incorrect_login_info: Informations de connexion incorrectes
    invalid_combo: Combinaison de messagerie / mot de passe invalide
    signed_in: 'Connecté ! Dernière connexion : %{last_login_at}'
    not_activated: >-
      Compte non activé. Vérifiez votre email pour le lien d'activation.
    signed_out: Déconnecté !
    cookie_details_html: >-
      <a href="/fr/cookies" target="_blank" rel="noopener"><i>En
      savoir plus sur les cookies.</i></a>
    no_login_time: "(Aucune heure précédente enregistrée.)"
    login_automatic_signup: >-
      La connexion à GitHub effectuera automatiquement une inscription
      si nécessaire. L'inscription n'aura lieu que si vous autorisez
      l'inscription à GitHub ; vous devrez réautoriser cela si
      vous êtes uniquement connecté à bestpractices.coreinfastructure.org
      (notre nom de domaine a changé). Si vous vous inscrivez,
      votre nom (tel que fourni à GitHub) et votre pseudo GitHub
      seront affichés publiquement et vous pourrez modifier votre
      nom à tout moment. Votre adresse e-mail restera privée et
      utilisée uniquement pour les interactions liées aux badges ;
      nous ne les fournirons pas à des tiers, sauf si cela est
      légalement requis.
    login_disabled: Toutes les connexions sont temporairement
      désactivées
    cannot_login_yet: >-
      Désolé, vous ne pouvez pas encore vous connecter. À titre
      de mesure anti-spam, il y a un délai après l'activation
      d'un compte local avant de pouvoir vous connecter.
  users:
    new:
      signup_header: S'inscrire
      intro_html: >-
        Si vous ne souhaitez pas vous connecter en utilisant votre
        compte GitHub, vous pouvez vous inscrire ici à la place
        (cela créera un compte personnalisé en utilisant votre
        adresse email). Si vous vous inscrivez, votre nom sera
        affiché publiquement, et vous pouvez le changer à tout
        moment. Votre adresse email sera maintenue secrète et
        seulement utilisée pour les interactions liées au projet
        de badge ; nous ne le transmettrons pas à des partie tierces
        à moins qu'il s'agisse d'une obligation légale.  <br><br>
        Si vous n'avez pas reçu votre lien d'activation, veuillez
        vous inscrire à nouveau et nous vous enverrons un nouveau
        lien. Si vous avez déjà créé un compte ici avec GitHub,
        identifiez-vous plutôt en utilisant GitHub.
      name: Nom
      email: Email
      password: Mot de passe
      password_confirmation: Confirmez le mot de passe
      create_account: Créer mon compte personnalisé
      preferred_locale: Langue préférée
      intro_github: >-
        Si vous avez un compte GitHub, vous pouvez simplement
        l'utiliser pour vous connectez (une première connexion
        avec GitHub vous inscrira automatiquement).
    show:
      see_external: La page externe de l'utilisateur.
      other_projects_edit: 'Autres projets que vous pouvez modifier
        d''après GitHub :'
      as_admin: 'en tant qu''administrateur, vous pouvez également
        :'
      send_email_to: Envoyer un email
      delete_link_name: Supprimer le compte utilisateur
      confirm_delete: Êtes-vous sûr(e) de vouloir supprimer cet
        utilisateur ?
      edit_user: Modifier l'utilisateur
      projects_owned: 'Projets possédés :'
      projects_additional_rights: 'Projets avec des droits supplémentaires
        :'
      is_admin: >-
        Cet utilisateur est un administrateur de l'application
        de badge.
      json_link: JSON
      in_json_format: >-
        Données de l'utilisateur au format JSON (un format portable
        standard)
      local_account: Compte personnalisé (local)
    update:
      profile_updated: Profil mis à jour
    destroy:
      cannot_delete_self: Impossible de se supprimer soi-même.
      user_deleted: Utilisateur supprimé.
      cannot_delete_user_with_projects: >-
        Impossible de supprimer un utilisateur qui possède des
        projets.
    redirect_existing: Cet utilisateur existe déjà. Voulez-vous
      vous connecter ?
    new_activation_link_created: >-
      Nouveau lien d'activation créé. Veuillez vérifier votre
      email dans quelques minutes pour activer votre compte. (Il
      y a un délai intentionnel pour lutter contre le spam.)
    please_log_in: Connectez-vous.
    edit:
      update_user_info: Mettre à jour les informations de l'utilisateur
      save_changes: Enregistrer les modifications
      inadequate_privileges: Désolé, vous n'êtes pas autorisé
        à faire cela.
  project_stats:
    index:
      project_stats_header: Statistiques du projet
      all_projects: Tous les projets
      projects_nontrivial: Projets avec des progrès significatifs
      projects_activity_30: >-
        Projets avec une activité de soumission au cours des 30
        derniers jours
      daily_activity: Activité journalière de soumission
      reminders: Rappels
      admin_html: >-
        En tant qu'administrateur, vous pouvez également voir
        les <a href="/fr/reminders">informations détaillées sur
        les rappels</a> et les <a href="/fr/project_stats?type=uncommon">graphiques
        sur les statistiques moins communément utilisées</a>.
      raw_data: 'Vous pouvez également voir les données brutes
        :'
      json_format: format JSON
      csv_format: format CSV téléchargeable
      active_projects: >-
        Projets actifs (créés / mis à jour dans les 30 derniers
        jours)
      active_in_progress: >-
        Projets en cours  (d'obtention) actifs (créés / mis à
        jour dans les 30 derniers jours)
      active_edited: >-
        Projets modifiés actifs (mis à jour dans les 30 derniers
        jours)
      active_edited_in_progress: >-
        Projets en cours (d'obtention) modifiés actifs (mis à
        jour dans les 30 derniers jours)
      projects_created_since_yesterday: Projets créés depuis le
        jour précédent
      projects_updated_since_yesterday: Projets mis à jour depuis
        le jour précédent
      reminders_sent_since_yesterday: Rappels envoyés depuis hier
      reactivated_projects: Projets réactivés dans les 14 jours
        suivant un rappel
      projects_created_average_7_days: projets créés en moyenne
        sur 7 jours
      projects_updated_average_7_days: projets mis à jour en moyenne
        sur 7 jours
      projects_created_updated_daily: >-
        La donnée « projets créés depuis la veille » est l'ensemble
        des nombres de projets créés dans les 24 heures précédent
        la date donnée (en ignorant les projets qui ont également
        été supprimés dans la même période de 24 heures). De même,
        la donnée « projets édités depuis la veille » est un ensemble
        des nombres de projets mis à jour dans les 24 heures précédent
        la date donnée (en ignorant les projets créés ou supprimés
        dans la même période de 24 heures). Les moyennes sur 7
        jours montrent les moyennes correspondantes sur 7 jours.
        Vous pouvez sélectionner des couleurs dans la légende
        pour cacher et afficher les données correspondantes.
      projects_silver: Progrès du projet vers le niveau argent
      projects_gold: Progrès du projet vers le niveau or
      projects_completed_silver_and_gold: Projets ayant atteint
        le niveau argent ou or
      percent_projects_earning_badges: Pourcentage de projets
        ayant obtenu un badge
      users: Utilisateurs
      github_users: Utilisateurs de GitHub
      local_users: Utilisateurs personnalisés (locaux)
      users_created_since_yesterday: Utilisateurs créés depuis
        hier
      users_updated_since_yesterday: Utilisateurs mis à jour depuis
        hier
      users_with_projects: Utilisateurs avec des projets
      users_without_projects: Utilisateurs sans projets
      users_with_multiple_projects: Utilisateurs avec plusieurs
        projets
      users_with_passing_projects: Utilisateurs ayant des projets
        avec badge
      users_with_silver_projects: Utilisateurs avec des projets
        Argent
      users_with_gold_projects: Utilisateurs avec des projets
        Or
      user_statistics: Statistiques utilisateurs
  projects:
    index:
      add_link: Ajouter
      add_new: Ajouter un nouveau projet
      badge_status: Statut de soumission
      exclude_passing: Exclure les badges obtenus
      text_search: Recherche textuelle
      name_or_description: Nom ou texte de description
      search: Recherche
      all: Tous
      passing_100: Atteint (niveau 100% ou plus)
      in_progress_variable: En cours (niveau %{percent}% ou plus)
      silver_in_progress_variable: Badge obtenu, argent en cours
        (niveau %{percent}% ou plus)
      silver_200: Argent (niveau 200% ou plus)
      gold_in_progress_variable: Argent obtenu, or en cours (niveau
        %{percent}% ou plus)
      gold_300: Or (300%)
      in_progress_next: En cours, %{percent}% terminé pour l'obtention
      passing_next: Obtenu, %{percent}% terminé pour l'argent
      silver_next: Argent, %{percent}% terminé pour l'or
    table:
      id: Id
      name: Nom
      description: Description
      website: Site Web
      license: Licence
      owner: Propriétaire
      last_achieved: Obtenu le
      pachieved: Niveau %
      can_also_sort: >-
        Le « Niveau % » utilise 300% pour gold, 200% pour silver
        et 100% pour atteint, et montre le progrès au-delà du
        badge de plus haut niveau obtenu. Vous pouvez également
        trier par les critères suivants :
      repository_url: URL du dépôt
      create_time: date de création (pour la soumission)
      update_time: dernière date de mise à jour (pour la soumission)
      user_id: id utilisateur
      paren_name_unknown: "(Nom inconnu)"
      badge_level: Le niveau de badge pour le projet %{id} est
        %{percent}%
      badge: Badge
    new:
      post_delay_warning: >-
        Il peut y avoir un délai important après la soumission
        car nous essayons de remplir automatiquement les informations.
      new_badge: Nouveau badge
      may_select_html: >-
        Vous pouvez choisir parmi l'un de vos dépôts GitHub <em>OU</em>
        fournir des informations sur un autre projet. Si votre
        projet n'a pas obtenu un badge et si vous ne l'avez pas
        édité dans les 30 derniers jours, nous vous enverrons
        un rappel par email (vous pouvez désactiver les rappels
        à tout moment si vous le souhaitez).
      select_one_github: Sélectionnez l'un de vos dépôts GitHub
      submit_github: Soumettre le dépôt GitHub
      url_of_homepage: >-
        Quelle est l'URL de la page d'accueil du projet (l'URL
        pour le projet dans son ensemble) ? Commencez par http(s)://
        (plusieurs caractères ne sont pas autorisés, y compris
        "?")
      placeholder_of_homepage: >-
        http(s)://... pour l'URL de la page d'accueil du projet,
        utilisez https:// si vous le pouvez
      url_of_repo: >-
        Quelle est l'URL du dépôt sous contrôle de version (qui
        peut être la même que la page d'accueil du projet) ? Commencez
        par http(s):// (plusieurs caractères ne sont pas autorisés,
        y compris "?")
      placeholder_of_repo: >-
        http(s)://... pour l'URL du dépôt du projet, utilisez
        https:// si vous le pouvez
      submit_urls: Envoyer l'URL
      sign_in_first: Connectez-vous pour ajouter un projet !
      thanks_adding: >-
        Merci d'avoir ajouté le projet ! Remplissez le reste des
        informations pour obtenir le badge.
      project_already_exists: Ce projet existe déjà !
      final_text_html: >-
        Remarque : si votre URL de dépôt est sur GitHub, toute
        personne qui a les droits de commit dans le dépôt pourra
        éditer les informations du badge.
      new_badge_or: OU
      original_repos: "=> Dépôts GitHub Originaux"
      fork_repos: "=> Dépôts GitHub Dupliqués"
      tell_us: >-
        Veuillez nous parler de votre projet de logiciel libre
        / open source (FLOSS). Cela <b>DOIT</b> être un projet
        FLOSS ; rien d'autre n'est permis. N'ajoutez <b>PAS</b>
        de site sans relation pour essayer d'améliorer le référencement
        d'un site vis-à-vis des moteurs de recherche (SEO). Ce
        spam est interdit car il nuit aux utilisateurs et n'aidera
        en rien le référencement (tous les hyperliens sont marqués
        avec <tt>ugc</tt> et <tt>nofollow</tt>).
    show:
      edit: Modifier
      delete: Supprimer
      confirm_delete: >-
        Êtes-vous SÛR(E) de vouloir SUPPRIMER ENTIÈREMENT le projet
        %{project_id} ?
      back: Retour
      cc_by_3plus_html: >-
        Ces données sont disponibles sous <a href="https://creativecommons.org/licenses/by/3.0/us"
        target="_blank" rel="noopener">une licence Creative Commons
        Attribution version 3.0 ou ultérieure (CC-BY-3.0+)</a>.
        Chacun peut librement partager et adapter les données,
        à condition de créditer leur origine. Veuillez créditer
        %{user} et les contributeurs du badge des meilleures pratiques
        de la OpenSSF.<br><br>
      cc_by_3only_html: >-
        Ces données sont disponibles sous <a href="https://creativecommons.org/licenses/by/3.0/us"
        target="_blank" rel="noopener">licence Creative Commons
        Attribution version 3.0 (CC-BY-3.0)</a> comme indiqué
        dans les <a href="https://www.linuxfoundation.org/terms"
        target="_blank" rel="noopener">conditions d'utilisation</a>
        de la <a href="https://openssf.org/" target="_blank" rel="noopener">Open
        Source Security Foundation</a>. Chacun peut librement
        partager et adapter les données, à condition de créditer
        leur origine. Veuillez créditer %{user} et les contributeurs
        du badge des meilleures pratiques de la OpenSSF.<br><br>
      owned_by: 'Soumission du badge du projet appartenant à :'
      created_at_html: "<strong>Soumission créée le</strong> %{when},"
      updated_at_html: "<strong>dernière mise à jour le</strong>
        %{when}."
      last_lost_html: Le dernier badge perdu l'a été le %{when}.
      last_achieved_html: Le dernier badge obtenu l'a été le %{when}.
      cdla_permissive_20_html:
    edit:
      submit_cc_by_3plus_html: >-
        En soumettant ces données sur le projet, vous acceptez
        de les publier sous au moins <a href="https://creativecommons.org/licenses/by/3.0/us"
        target="_blank" rel="noopener">une licence Creative Commons
        Attribution version 3.0 ou ultérieure (CC-BY-3.0+)</a>.
        Cela signifie que tous sont libres de partager et d'adapter
        les données, mais ils doivent créditer leur origine. Vous
        conservez le droit d'auteur (le cas échéant) et la licence
        du projet n'est pas affectée.<br><br>
      save_and_continue: Sauvegarder (et continuer)
      submit_and_exit: Soumettre (et quitter)
      repo_url_limits: >-
        Vous ne pouvez modifier votre repo_url que si (1) plus
        de 180 jours se sont écoulés depuis sa dernière modification,
        ou (2) il s'agit uniquement d'un changement entre http
        et https. Veuillez ouvrir un rapport de problème (avec
        justification) si vous devez le changer plus tôt.
      changed_since_html: >-
        Un autre utilisateur a apporté une modification à cet
        enregistrement depuis que vous avez accédé au formulaire
        d'édition. <br>Veuillez ouvrir un nouveau <a href="%{edit_url}"
        target="_blank" rel="noopener">formulaire d'édition</a>
        pour transférer vos modifications.
      successfully_updated: Le projet a été mis à jour avec succès.
      congrats_new: >-
        FÉLICITATIONS pour l'obtention d'un badge %{new_badge_level}
        ! Si vous ne l'avez pas encore fait, indiquez le statut
        de votre badge sur la page de votre projet (voir le texte
        « comment l'intégrer » ci-dessous si vous ne savez pas
        comment le faire).
      lost_badge: Le projet a perdu un badge.
      static_analysis_updated_html: >-
        Nous avons mis à jour nos exigences pour le critère static_analysis.
        Veuillez ajouter une justification pour ce critère.
      edit_status: Éditer le statut du badge du projet
      submit_cdla_permissive_20_html:
    form_basics:
      project_name:
        description: Quel est le nom intelligible du projet ?
        details: Notez que d'autres projets peuvent utiliser le
          même nom.
        placeholder: Nom du projet FLOSS
      description:
        description: Pouvez-vous donner une brève description
          du projet ?
        details: >-
          Inclure des commentaires clés sur le projet. Utiliser
          la syntaxe markdown. Cette information est utilisée
          lors de l'affichage des informations de badge.
        placeholder: Description du projet
      homepage_url:
        description: Quelle est l'URL du projet (dans son ensemble)
          ?
        placeholder: URL du site Web du projet
      repo_url:
        description: >-
          Quelle est l'URL du dépôt sous contrôle de version (qui
          peut être la même que l'URL du projet) ?
        placeholder: URL du dépôt du projet
      implementation_languages:
        description: >-
          Quel(s) langage(s) de programmation sont utilisés pour
          implémenter le projet ?
        details: >-
          S'il y a plus d'un langage, listez-les en tant que valeurs
          séparées par des virgules (espaces facultatifs) et triez-les
          du plus au moins utilisé. S'il y a une longue liste,
          veuillez lister au moins les trois premiers. S'il n'y
          a pas de langage (par exemple, il s'agit d'un projet
          uniquement de documentation ou de test), utilisez le
          caractère unique « - ». Utilisez une capitalisation
          conventionnelle pour chaque langage, par exemple « JavaScript
          ».
        placeholder: >-
          Langage(s) d'implémentation utilisé(s), présentés sous
          forme d'une liste séparée par des virgules, triés par
          utilisation décroissante
      cpe:
        description_html: >-
          Quel est le nom de <a href="https://nvd.nist.gov/cpe.cfm">plate-forme
          commune d'énumération (CPE)</a> pour le projet (s'il
          en a un) ?
        details_html: >-
          La <a href="https://nvd.nist.gov/cpe.cfm">plate-forme
          commune d'énumération (CPE)</a> est un schéma de dénomination
          structuré pour les systèmes, les logiciels et les paquetages
          des technologies de l'information. Il est utilisé dans
          un certain nombre de systèmes et de bases de données
          pour signaler des vulnérabilités.
        placeholder: "(Facultatif) nom CPE"
      license:
        description_html: Sous quelle(s) licence(s) le projet
          est-il distribué ?
        details_html: >-
          Utilisez un <a href="https://spdx.org/licenses/">format
          d'expression de licence SPDX</a> ; des exemples sont
          « Apache-2.0 », « BSD-2-Clause », « BSD-3-Clause »,
          « GPL-2.0+ », « LGPL-3.0+ », « MIT » et « (BSD-2-Clause
          OU Ruby) ». Ne <b>pas</b> inclure des guillemets simples
          ou doubles.
        placeholder: Licence FLOSS
        title: >-
          Licence au format d'expression de licence SPDX, par
          exemple, « MIT » ou « GPL-3.0 + », sans guillemets simples
          ou doubles.
      additional_rights_changes:
        description: >-
          (Avancé) Quels autres utilisateurs ont les droits supplémentaires
          pour modifier cette soumission de badge? Actuellement
          : %{current_rights}
        details_html: >-
          La plupart des projets devraient ignorer ce champ. Les
          soumissions de badge des projets peuvent toujours être
          modifiées par le propriétaire de la soumission de badge
          (créateur), les administrateurs de BadgeApp et toute
          personne qui peut committer dans le dépôt GitHub (s'il
          est sur GitHub). Si vous souhaitez que quelqu'un d'autre
          puisse modifier cette soumission de badge et que vous
          ayez déjà des droits d'édition sur cette soumission
          de badge de projet, vous pouvez ajouter d'autres utilisateurs
          avec des droits d'édition. Entrez simplement « + » suivi
          d'une liste d'entiers d'identifiants utilisateur séparés
          par des virgules. Ces utilisateurs seront également
          autorisés à modifier cette soumission de projet. Si
          vous êtes le propriétaire de la soumission du badge
          ou un administrateur BadgeApp, vous pouvez supprimer
          des utilisateurs de cette liste en entrant « - » suivi
          d'une liste d'entiers d'identifiants utilisateur séparés
          par des virgules. Nous nous attendons normalement à
          ce qu'une seule personne édite une soumission de badge
          spécifique à la fois. Cette application utilise un verrouillage
          optimiste pour éviter de sauvegarder des données périmées
          si plusieurs utilisateurs essaient de modifier une soumission
          de badge simultanément. Si vous avez plusieurs éditeurs,
          nous vous recommandons d'enregistrer les données de
          votre soumission de badge de manière incrémentale et
          régulière (c'est une bonne pratique en général).
        placeholder: >-
          Changer avec + ou - suivi d'une liste d'identifiants
          utilisateur séparés par des virgules
    form_early:
      badge_intro:
        description: >-
          Les projets qui suivent les meilleures pratiques ci-dessous
          peuvent s'auto-certifier et montrer qu'ils ont obtenu
          le badge de la Open Source Security Foundation (OpenSSF).
        details_html: >-
          Il n'existe aucun ensemble de pratiques qui garantissent
          que ce logiciel n'aura jamais de défauts ou de vulnérabilités
          ; même les méthodes formelles peuvent échouer si les
          spécifications ou les hypothèses sont fausses. Il n'y
          a pas non plus de pratiques qui peuvent garantir qu'un
          projet permettra de maintenir une communauté de développement
          saine et qui fonctionne bien. Toutefois, suivre les
          meilleures pratiques peut contribuer à améliorer les
          résultats des projets. Par exemple, certaines pratiques
          permettent la revue par plusieurs personnes avant publication,
          ce qui peut aider à trouver des vulnérabilités techniques
          difficiles à trouver autrement et à renforcer la confiance
          et un désir d'interaction répétée entre les développeurs
          de différentes entreprises. Pour gagner un badge, tous
          les critères DOIT et NE DOIT PAS doivent être satisfaits,
          tous les critères DEVRAIT doivent être satisfaits OU
          non satisfaits avec justification, <em>et</em> tous
          les critères PROPOSÉ doivent être satisfaits OU non
          satisfaits (nous voulons au moins qu'ils soient considérés).
          Si vous voulez entrer un texte de justification pour
          un commentaire générique, au lieu d'une raison justifiant
          que la situation est acceptable, commencez le bloc de
          texte avec '//' suivi d'un espace. Les commentaires
          sont les bienvenus via le <a href="https://github.com/coreinfrastructure/best-practices-badge">site
          GitHub en tant que problèmes ou pull requests</a>. Il
          existe également une <a href="https://lists.coreinfrastructure.org/mailman/listinfo/cii-badges">liste
          de diffusion pour discussion générale</a>. <br /> <br
          /> Nous fournissons volontiers l'information dans plusieurs
          langues, cependant, s'il existe un conflit ou une contradiction
          entre les traductions, la version anglaise est la version
          qui fait autorité.
      got_badge:
        description_1: >-
          Si c'est votre projet, veuillez indiquer votre statut
          de badge sur votre page de projet ! Le statut du badge
          ressemble à ceci :
        description_2: 'Voici comment l''intégrer :'
        details_html: >-
          Vous pouvez afficher votre statut de badge en incorporant
          ceci dans votre fichier markdown : <br />%{markdown_embedding}<br
          /> ou en incorporant ceci dans votre HTML : <br />%{html_embedding}<br
          />
        editing_description_html: >-
          <strong>Veuillez « soumettre » souvent</strong> pour
          enregistrer votre travail (vous pouvez toujours revenir
          en arrière et éditer plus tard). <br><br> Si vous avez
          besoin d'aide, voulez poser une question ou voyez un
          problème, veuillez <em> <a href="https://github.com/coreinfrastructure/best-practices-badge/issues"
          target="_blank" rel="noopener">signaler un problème</a></em>.
        badge_alt: Le niveau de badge pour le projet %{id} est
          %{level}
      level:
        0_html: >-
          Ce sont les critères du niveau %{passing}. Vous pouvez
          également afficher les critères des niveaux %{silver}
          ou %{gold}.
        1_html: >-
          Ce sont les critères du niveau %{silver}. Vous pouvez
          également afficher les critères des niveaux %{passing}
          ou %{gold}.
        2_html: >-
          Ce sont les critères du niveau %{gold}. Vous pouvez
          également afficher les critères des niveaux %{passing}
          ou %{silver}.
        '0': Basique
        '1': Argent
        '2': Or
    misc:
      disabled_reminders: >-
        (Avancé) Désactiver le rappel d'inactivité (nous vous
        recommandons de laisser ceci non sélectionné ; notez que
        les soumissions de projet doivent être modifiées pour
        que les rappels soient envoyés ou non)
      general_comments:
        description: 'Autres commentaires généraux sur le projet
          :'
        placeholder: Commentaires additionnels (en syntaxe markdown)
      some_not_crypto_html: >-
        Notez que certains logiciels n'ont pas besoin d'utiliser
        des mécanismes cryptographiques. Si votre projet produit
        un logiciel qui (1) inclut ou active la fonctionnalité
        de chiffrement, et (2) peut être publié des États-Unis
        (US) vers l'extérieur des États-Unis ou vers un citoyen
        autre qu'américain, vous pouvez être légalement obligé
        à faire quelques étapes supplémentaires. En règle générale,
        cela implique simplement l'envoi d'un email. Pour plus
        d'informations, consultez la section sur le chiffrement
        de <a href="https://www.linuxfoundation.org/resources/publications/understanding-us-export-controls-with-os-projects/"><i>Comprendre
        la technologie Open Source et les contrôles à l'exportation
        américains</i></a> .
      dont_use_crypto: >-
        Appuyez ici si le logiciel produit par le projet n'utilise
        pas de mécanismes cryptographiques
      future_header_html: >-
        Ce sont des critères que nous avons l'intention d'ajouter
        dans un proche avenir, mais qui ne sont <em>pas</em> actuellement
        requis pour un badge. Cette période de grâce permet aux
        projets de se mettre à jour par rapport aux critères modifiés
        et de conserver leur badge au fur et à mesure que les
        meilleures pratiques s'améliorent.
      in_javascript:
        collapse_all_title: Réduire tous les panneaux
        collapse_all: Réduire les panneaux
        expand_all_title: Développer tous les panneaux
        expand_all: Développer les panneaux
        show_details: Afficher les détails
        hide_details: Masquer les détails
        show_all_details: Afficher tous les détails
        hide_all_details: Masquer tous les détails
        show_met_title: Afficher les critères atteints et incomplets
        show_met_html: Afficher les critères atteints et incomplets
        hide_met_title: >-
          Afficher uniquement les critères incomplets (affichant
          uniquement les critères non satisfaits et inconnus)
        hide_met_html: Afficher uniquement les critères incomplets
        passing_alt: Assez pour un badge !
        barely_alt: À peine suffisant pour un badge.
        failing_alt: Pas assez pour un badge.
        unknown_alt: Informations inconnues requises, pas assez
          pour un badge.
        met_url_placeholder: >-
          (URL requise) Veuillez expliquer comment cela est atteint,
          en incluant 1+ URL clés.
        met_justification_placeholder: >-
          (Obligatoire) Veuillez expliquer comment cela est atteint,
          en incluant peut-être 1+ URL clés.
        met_placeholder: >-
          (Facultatif) Veuillez expliquer comment cela est atteint,
          en incluant peut-être 1+ URL clés.
        unmet_placeholder: >-
          Expliquez pourquoi il est acceptable que cela ne soit
          pas satisfait, en incluant 1+ URL clés.
        na_justification_placeholder: >-
          (Obligatoire) Veuillez expliquer pourquoi cela ne s'applique
          pas (N/A), en incluant peut-être 1+ URL clés.
        na_placeholder: >-
          (Facultatif) Expliquez pourquoi cela ne s'applique pas
          (N/A), en incluant peut-être 1+ URL clés.
        unknown_placeholder: Expliquez s'il vous plaît
      toggle_details_title: Basculer le texte détaillé
      details: Détails
      url_required: URL requise
      future_criterion: Critère futur
      url_required_warning: >-
        Attention : une URL est requise, mais aucune URL n'a été
        trouvée.
      justification_required_warning: 'Attention : cela nécessite
        une justification plus longue.'
      in_development_warning_html: >-
        <strong>Avertissement !</strong> Ceci n'est pas le système
        de production ; c'est un niveau de test.
      close: Fermer
    delete:
      done: Le projet a été supprimé avec succès.
    delete_form:
      info_html: >-
        <b>Avertissement</b> : vous êtes sur le point de <b>supprimer
        définitivement</b> la soumission de badge %{project_name}.
        Ce <b>ne peut pas</b> être facilement annulé, nous vous
        recommandons donc de ne <b>pas</b> supprimer cette soumission
        de badge. Vous n'avez pas besoin de remplir les critères
        de badge en une fois ; la plupart des projets obtiennent
        le badge en identifiant et répondant aux critères manquants
        au fil du temps. Si vous pensez que certains critères
        n'ont aucun sens, que vous ne savez pas comment répondre
        à certains critères ou si vous avez d'autres questions,
        n'hésitez pas à nous contacter. Notez que tous les critères
        ne doivent pas être remplis pour obtenir un badge (certains
        critères DEVRAIENT être satisfaits ou sont simplement
        SUGGÉRÉS). Si vous ne souhaitez pas recevoir de rappels,
        il vous suffit de modifier la soumission du projet et
        de désactiver les rappels par e-mail. Cependant, si vous
        êtes <i>certain(e)</i> que vous voulez <i>supprimer définitivement</i>
        cette soumission de badge, veuillez expliquer ci-dessous
        pourquoi vous la supprimez définitivement.
      rationale_placeholder: >-
        (Obligatoire) Veuillez expliquer pourquoi vous supprimez
        définitivement cette soumission de projet de badge et,
        le cas échéant, ce que vous auriez souhaité que nous fassions
        à la place (au moins 20 caractères, au moins 15 caractères
        non blancs).
      delete_action: >-
        SUPPRESSION PERMANENTE de cette soumission de projet de
        badge !
      too_short: Doit avoir au moins 20 caractères.
      more_non_whitespace: Doit avoir au moins 15 caractères non
        blancs.
  user_mailer:
    account_activation:
      before_html: |-
        <h1>Programme de badge des Meilleures Pratiques de la OpenSSF</h1>
        <p>Bonjour,</p>
        <p>
        Bienvenue dans le programme de badge !
        Cliquez sur le lien ci-dessous pour activer votre compte :
        </p>
      before_text: |-
        Bonjour,
        Bienvenue dans le programme de badge des Meilleures Pratiques de la OpenSSF !
        Cliquez sur le lien ci-dessous pour activer votre compte :
      activate: Activer
      subject: Activation de compte
    github_welcome:
      before_html: |-
        <h1>Programme de badge des Meilleures Pratiques de la OpenSSF</h1>
        <p>Bonjour,</p>
        <p>
        Merci d'avoir relié votre compte GitHub et bienvenue
        au programme de badge des Meilleures Pratiques de la OpenSSF !
        </p>
        <p>
        Si vous n'êtes pas à l'origine de cette action, vérifiez votre
        journal de sécurité GitHub sous Paramètres&gt;Sécurité.
        </p>
      before_text: |-
        Bonjour,
        Merci d'avoir relié votre compte GitHub et bienvenue
        au programme de badge des Meilleures Pratiques de la OpenSSF !
        Si vous n'êtes pas à l'origine de cette action, vérifiez votre
        journal de sécurité GitHub sous Paramètres>Sécurité.
      subject: Bienvenue dans le programme de badge
    password_reset:
      before_html: |-
        <h1>Réinitialisation du mot de passe</h1>
        <p>Pour réinitialiser votre mot de passe, cliquez sur le lien ci-dessous :</p>
      before_text: >-
        Pour réinitialiser votre mot de passe, cliquez sur le
        lien ci-dessous :
      after_html: |-
        <p>Ce lien expirera d'ici deux heures.</p>
        <p>
        Si vous n'avez pas demandé à réinitialiser votre mot de passe,
        ignorez cet email et votre mot de passe restera identique.
        </p>
      after_text: |-
        Ce lien expirera d'ici deux heures.
        Si vous n'avez pas demandé à réinitialiser votre mot de passe,
        ignorez cet email et votre mot de passe restera identique.
      reset_password: Réinitialiser le mot de passe
      subject: Réinitialisation du mot de passe
    user_update:
      before_text: >-
        Certaines des données utilisateur de votre compte ont
        été mises à jour.
      username_changed: Nom d'utilisateur modifié.
      email_changed: Adresse email modifiée.
      password_changed: Mot de passe modifié.
      locale_changed: Langue modifiée.
      current_state: 'Pour l''état actuel, voir :'
      after_text: Veuillez nous avertir en cas de problème.
      subject: Données utilisateur modifiées
  submit: Soumettre
  account_activations:
    activated: Compte activé !
    failed_activation: Lien d'activation invalide
    delay:
      zero: >-
        Vous pouvez vous connecter maintenant. Il n'y a pas de
        délai anti-spam post-activation.
      one: >-
        À titre de mesure anti-spam, vous devez attendre une heure
        après l'activation avant de pouvoir vous connecter.
      few: >-
        À titre de mesure anti-spam, vous devez attendre %{count}
        heures après l'activation avant de pouvoir vous connecter.
      other: >-
        À titre de mesure anti-spam, vous devez attendre %{count}
        heures après l'activation avant de pouvoir vous connecter.
  password_resets:
    forgot_password: Mot de passe oublié
    reset_password: Réinitialiser le mot de passe
    password_confirmation: Confirmation
    password_empty: Le mot de passe ne peut pas être vide
    password_reset: Le mot de passe a été réinitialisé
    instructions_sent: >-
      E-mail envoyé avec les instructions de réinitialisation
      du mot de passe (si un compte local existe)
    reset_expired: La réinitialisation du mot de passe est expirée.
    update_password: Mise à jour du mot de passe
  report_mailer:
    new_project_heading: >-
      Merci d'avoir ajouté votre projet au programme de badge
      des Meilleures Pratiques
    new_project_part1: |-
      Merci d'avoir ajouté votre projet au programme de badge des Meilleures Pratiques.
      Le nom actuel que nous avons pour ce projet est :
    new_project_part2: |-
      Veuillez visiter votre soumission pour compléter les informations et obtenir votre badge !
      Voici l'URL de votre soumission :
    new_project_part3_html: |-
      <p>
      Nous vous encourageons à continuer à progresser.
      </p>
      <p>
      Si vous voulez voir <em>seulement</em> ce qui vous manque,
      visitez votre soumission
      puis cliquez sur le bouton près du haut étiqueté « Masquer atteints & N/A ».
      Si vous avez des questions ou avez besoin d'aide, contactez-nous à
      <a href="mailto:&#99;ii&#45;badges&#45;questions&#45.own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;">&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;</a>
      ou reportez un problème sur
      <a href="https://github.com/coreinfrastructure/best-practices-badge/issues">https://github.com/coreinfrastructure/best-practices-badge/issues</a>
      (cliquez sur « nouveau problème »).
      </p>
      <p>
      Nous ne vous enverrons jamais de publicité, et nous ne vous enverrons que rarement des emails. Nous vous enverrons un email pour les évènements importants de la soumission d'un projet de badge, comme quand vous créez une nouvelle soumission de projet de badge, quand votre projet gagne ou perd un badge, ou quand quelqu'un demande la réinitialisation du mot de passe pour votre compte utilisateur. Si votre projet n'a pas de badge, et que vous n'avez pas mis à jour l'entrée du projet pendant au moins 30 jours, nous vous enverrons normalement un rappel d'inactivité environ tous les 30-60 jours. Vous pouvez désactiver ces rappels d'inactivité à tout moment ; il vous suffit d'éditer votre entrée de badge à <a href="%{project_info_url}#project_disabled_reminders">%{project_info_url}#project_disabled_reminders</a> pour activer la « désactivation du rappel d'inactivité ». Souvenez-vous d'<i>éditer</i> le projet pour lequel vous souhaitez changer cette valeur. Si votre projet a gagné un badge, ou que son entrée de badge a été éditée dans les 30 derniers jours, aucun rappel d'inactivité ne vous sera envoyé.
      </p>
      <p>
      Merci pour vos efforts.
      </p>
    new_project_part3_text: |-
      Nous vous encourageons à continuer à progresser.
      Si vous voulez voir seulement ce qui vous manque, visitez votre soumission puis cliquez sur le bouton près du haut étiqueté « Masquer atteints & N/A ».
      Si vous avez des questions ou avez besoin d'aide, contactez-nous à
      cii-badges-questions@lists.coreinfrastructure.org ou reportez un problème sur
      https://github.com/coreinfrastructure/best-practices-badge/issues
      (cliquez sur « nouveau problème »).
      Nous ne vous enverrons jamais de publicité, et nous ne vous enverrons que rarement des emails. Nous vous enverrons un email pour les évènements importants de la soumission d'un projet de badge, comme quand vous créez une nouvelle soumission de projet de badge, quand votre projet gagne ou perd un badge, ou quand quelqu'un demande la réinitialisation du mot de passe pour votre compte utilisateur. Si votre projet n'a pas de badge, et que vous n'avez pas mis à jour l'entrée du projet pendant au moins 30 jours, nous vous enverrons normalement un rappel d'inactivité environ tous les 30-60 jours. Vous pouvez désactiver ces rappels d'inactivité à tout moment ; il vous suffit d'éditer votre entrée de badge à %{project_info_url}#project_disabled_reminders pour activer la « désactivation du rappel d'inactivité ». Souvenez-vous d'éditer le projet pour lequel vous souhaitez changer cette valeur. Si votre projet a gagné un badge, ou que son entrée de badge a été éditée dans les 30 derniers jours, aucun rappel d'inactivité ne vous sera envoyé.
      Merci pour vos efforts.
    in_markdown_add: 'En markdown, vous pouvez ajouter ceci :'
    in_html_add: 'En HTML, vous pouvez ajouter ceci :'
    ending: >-
      --- David A. Wheeler, Directeur du programme de badge des
      meilleures pratiques de la OpenSSF
    subject_achieved_passing: >-
      FÉLICITATIONS pour l'obtention d'un badge %{new_level} des
      meilleures pratiques !
    subject_no_longer_passing: Votre badge des meilleures pratiques
      n'est plus %{old_level}
    subject_new_project: >-
      Vous avez ajouté un projet au programme de badge des meilleures
      pratiques de la OpenSSF
    subject_reminder: >-
      Votre projet n'a pas encore le badge « meilleures pratiques
      »
    subject_project_deleted: Le projet %{project_id} nommé %{project_name}
      a été supprimé
    gained_level_part1: |-
      Toutes nos félicitations !
      Selon les informations que vous avez fournies,
      votre projet a obtenu le badge '%{new_level}' des meilleures pratiques de la OpenSSF.
      Pour plus d'informations, consultez cette URL :
    gained_level_part2: |-
      Ajoutez votre badge à votre projet et/ou site de dépôt ;
      vous l'avez mérité :
    gained_level_part3: "Nous vous encourageons vivement à ajouter
      ou à améliorer le texte de justification,\ny compris par
      l'ajout d'URL qui redirigent vers plus d'informations. Si
      vous avez des suggestions sur la façon d'améliorer les critères
      ou l'application Web du badge, veuillez soumettre un problème
      sur : https://github.com/coreinfrastructure/best-practices-badge/issues\nL'un
      de nos objectifs est d'encourager les projets à apporter
      des améliorations. Nous mettons certains de ces rapports
      sur le wiki public ; veuillez nous en informer si vous ne
      souhaitez PAS que les changements soient publiés publiquement
      à\nhttps://github.com/coreinfrastructure/best-practices-badge/wiki/Impacts
      \nMerci et félicitations.\n"
    lost_level_message: |-
      Nous sommes désolés, mais votre projet n'a plus le badge « %{old_level} »
      et est maintenant « %{new_level} ».
      Consultez l'URL suivante pour plus d'informations :
    reminder_body_html: |-
      <h1>Rappel automatique du badge des meilleures pratiques pour %{project_name}</h1>
      <p>
      Ceci est un rappel automatisé que votre projet
      « %{project_name} »
      n'a pas actuellement de badge « meilleures pratiques »,
      et son entrée de badge n'a pas été mise à jour depuis un moment.
      </p>
      <p>
      Votre entrée de badge des meilleures pratiques est à
      <a href="%{project_info_url}">%{project_info_url}</a>
      et a été mis à jour pour la dernière fois le %{project_updated_at}.
      Il est actuellement à %{project_badge_percentage_0}% (sur 100%).
      </p>
      <p>
      Nous vous encourageons à continuer à progresser.
      Veuillez visiter votre entrée de badge à
      <a href="%{project_info_url}">%{project_info_url}</a>
      pour compléter l'information et obtenir votre badge !
      </p>
      <p>
      Si vous voulez voir <em>seulement</em> ce qui vous manque, visitez votre entrée de badge,
      sélectionnez le bouton près du haut étiqueté « Développer les panneaux »,
      puis sélectionnez le bouton près du sommet étiqueté « Masquer atteints & N/A ».
      Si vous avez des questions ou si vous avez besoin d'aide, veuillez contacter
      <a href="mailto:&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;">&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;</a>
      ou reporter un problème à
      <a href="https://github.com/coreinfrastructure/best-practices-badge/issues">https://github.com/coreinfrastructure/best-practices-badge/issues</a>
      (cliquez sur « nouveau problème »).
      </p>
      <p>
      Nous n'envoyons pas de rappels si vous continuez à mettre à jour votre entrée de badge, et nous envoyons seulement des rappels environ tous les 30-60 jours. Cependant, si vous souhaitez désactiver ces messages de rappel, modifiez votre entrée de badge à <a href="%{project_info_url}#project_disabled_reminder">%{project_info_url}#project_disabled_reminder</a>
      pour activer la « désactivation du rappel d'inactivité ». Vérifiez que vous éditez le projet de badge, au lieu de seulement le consulter, pour pouvoir changer si vous voulez ou non recevoir le rappel d'inactivité.
      Nous espérons que vous continuerez à travailler sur votre soumission pour finalement obtenir le badge.
      </p>
      <p>
      Merci pour votre attention.
      </p>
    reminder_body_text: |-
      Ceci est un rappel automatisé que votre projet
      « %{project_name} »
      n'a pas actuellement de badge « meilleures pratiques »,
      et son entrée de badge n'a pas été mise à jour depuis un moment.
      Votre entrée de badge des meilleures pratiques est à
      %{project_info_url}
      et a été mis à jour pour la dernière fois le %{project_updated_at}.
      Il est actuellement à %{project_badge_percentage_0}% (sur 100%).
      Nous vous encourageons à continuer à progresser.
      Veuillez visiter votre entrée de badge à
      %{project_info_url}
      pour compléter l'information et obtenir votre badge !
      Si vous voulez voir seulement ce qui vous manque, visitez votre entrée de badge,
      sélectionnez le bouton près du haut étiqueté « Développer les panneaux »,
      puis sélectionnez le bouton près du sommet étiqueté « Masquer atteints & N/A ».
      Si vous avez des questions ou si vous avez besoin d'aide, veuillez contacter
      cii-badges-questions@lists.coreinfrastructure.org ou reporter un problème à
      https://github.com/coreinfrastructure/best-practices-badge/issues
      (cliquez sur « nouveau problème »).
      Nous n'envoyons pas de rappels si vous continuez à mettre à jour votre entrée de badge, et nous envoyons seulement des rappels environ tous les 30-60 jours. Cependant, si vous souhaitez désactiver ces messages de rappel, modifiez votre entrée de badge à %{project_info_url}#project_disabled_reminder
      pour activer la « désactivation du rappel d'inactivité ». Vérifiez que vous éditez le projet de badge, au lieu de seulement le consulter, pour pouvoir changer si vous voulez ou non recevoir le rappel d'inactivité.
      Nous espérons que vous continuerez à travailler sur votre soumission pour finalement obtenir le badge.
      Merci pour votre attention.
  project_name_unknown: "(Nom inconnu)"
  locale_name:
    en: Anglais
    fr: Français
    zh-CN: Chinois (simplifié)
    de: Allemand
    ja: Japonais
    ru: Russe
    es: Espagnol
    sw: Swahili
    pt-BR: Portugais Brésilien
  criteria:
    '0':
      description_good:
        description: >-
          Le site du projet DOIT décrire succinctement ce que
          le logiciel fait (quel problème résout-il ?).
        details: >-
          Cela DOIT être dans un langage que les utilisateurs
          potentiels peuvent comprendre (par exemple, il utilise
          un jargon minimal).
        met_placeholder: >-
          (Facultatif) Où est la description succincte ? Envisagez
          de fournir une URL.
      interact:
        description: >-
          Le site Web du projet DOIT fournir des informations
          sur la façon d'obtenir, de fournir des commentaires
          (comme des signalements de bogues ou des demandes d'amélioration)
          et de contribuer au logiciel.
        met_placeholder: >-
          (Facultatif) Où est cette information ? Envisagez de
          fournir des URL(s).
      contribution:
        description: >-
          L'information sur la façon de contribuer DOIT expliquer
          le processus de contribution (par exemple, les pull
          requests sont-ils utilisés ?)
        details: >-
          Nous supposons que <a href="https://guides.github.com/activities/contributing-to-open-source/">les
          projets sur GitHub utilisent les problèmes et les pull
          requests</a>, sauf indication contraire. Cette information
          peut être courte, par exemple, en indiquant que le projet
          utilise les pull requests, un suivi des problèmes ou
          des messages dans une liste de diffusion (laquelle ?)
        met_placeholder: >-
          (URL requise) Quel est le processus ? Quelle URL l'explique
          ?
      contribution_requirements:
        description: >-
          Les informations sur la façon de contribuer DEVRAIENT
          inclure les exigences pour des contributions acceptables
          (par exemple, une référence à toute norme de codage
          requise).
        unmet_placeholder: >-
          Pourquoi les exigences sont-elles si évidentes que cette
          information n'est pas nécessaire ?
      floss_license:
        description: >-
          Le logiciel produit par le projet DOIT être distribué
          en tant que FLOSS.
        details: >-
          FLOSS est un logiciel distribué d'une manière qui répond
          à la <a href="https://opensource.org/osd-annotated">Définition
          de l'Open Source</a> ou à la <a href="https://www.gnu.org/philosophy/free-sw.fr.html">Définition
          du Logiciel Libre</a>. Des exemples de ces licences
          sont <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>,
          <a href="https://opensource.org/licenses/MIT">MIT</a>,
          <a href="https://opensource.org/licenses/BSD-2-Clause">BSD
          2-clause</a>, <a href="https://opensource.org/licenses/BSD-3-Clause">BSD
          3-clause révisée</a>, <a href="https://opensource.org/licenses/Apache-2.0">Apache
          2.0</a>, <a href="https://opensource.org/licenses/lgpl-license">Lesser
          GNU General Public License (LGPL)</a>, et <a href="https://opensource.org/licenses/gpl-license">GNU
          General Public License (GPL)</a>. Pour nos besoins,
          cela signifie que la licence DOIT être : <ul> <li> <a
          href="https://opensource.org/licenses">une licence approuvée
          par l'Open Source Initiative (OSI)</a>, ou </li> <li>
          <a href="https://www.gnu.org/licenses/license-list.html">une
          licence libre approuvée par la Free Software Foundation
          (FSF)</a>, ou </li> <li> <a href="https://www.debian.org/legal/licenses/">une
          licence libre acceptable pour Debian main</a> ou </li>
          <li><a href="https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing">une
          « bonne » licence selon Fedora</a>. </li> </ul> Le logiciel
          PEUT également être distribué avec d'autres licences
          (par exemple, « GPLv2 ou propriétaire » est acceptable).
      floss_license_osi:
        description: >-
          Il est PROPOSÉ que toute licence requise pour le logiciel
          produit par le projet soit <a href="https://opensource.org/licenses">approuvée
          par l'Open Source Initiative (OSI).</a>
        details: >-
          L'OSI utilise un processus d'approbation rigoureux pour
          déterminer quelles licences sont OSS.
      license_location:
        description: >-
          Le projet DOIT afficher la ou les licences de ses résultats
          dans un emplacement standard dans leur dépôt source.
        details: >-
          Une convention est de publier la licence sous la forme
          d'un fichier à la racine du dépôt appelé LICENSE ou
          COPYING, qui PEUT être suivi d'une extension telle que
          « .txt » ou « .md ». Une autre convention est d'avoir
          un réportoire nommé LICENSES contenant le(s) fichier(s)
          de licence ; ces fichiers sont généralement nommés comme
          leur identifiant de licence SPDX suivi d'une extension
          de fichier appropriée, comme décrit dans la <a href="https://reuse.software/spec/">Spécification
          REUSE</a>. Notez que ce critère est requis uniquement
          pour le dépôt de sources. Vous n'avez PAS besoin d'inclure
          le fichier de licence lors de la génération d'un élément
          à partir du code source (tel qu'un exécutable, un paquet
          ou un conteneur). Par exemple, lors de la génération
          d'un paquet R pour le réseau d'archives complet R (CRAN),
          suivez la procédure standard CRAN : si la licence est
          une licence standard, utilisez la spécification de standard
          courte (pour éviter d'installer une autre copie du texte)
          et listez le fichier LICENSE dans un fichier d'exclusion
          tel que .Rbuildignore. De même, lors de la création
          d'un paquet Debian, vous pouvez mettre un lien dans
          le fichier de copyright vers le fichier de licence dans
          /usr/share/common-licenses, et exclure le fichier de
          licence du paquet créé (par exemple, en supprimant le
          fichier après avoir appelé dh_auto_install). Nous encourageons
          fortement l'inclusion d'informations de licence lisibles
          automatiquement dans des formats générés lorsque cela
          est possible.
      documentation_basics:
        description: >-
          Le projet DOIT fournir une documentation de base pour
          le logiciel produit par le projet.
        details: >-
          Cette documentation doit se trouver dans un certain
          format (comme le texte ou la vidéo) qui comprend : comment
          l'installer, comment le démarrer, comment l'utiliser
          (éventuellement avec un tutoriel à l'aide d'exemples)
          et comment l'utiliser en toute sécurité (par exemple,
          quoi faire et ne pas faire) si c'est un sujet approprié
          pour le logiciel. La documentation de sécurité n'a pas
          besoin d'être longue. Le projet PEUT utiliser des liens
          hypertextes vers du matériel hors projet en tant que
          documentation. Si le projet ne produit pas de logiciel,
          choisissez « non applicable » (N/A).
        met_placeholder: >-
          (Facultatif) Quelle(s) URL(s) sont les points de départ
          pour la documentation ?
      documentation_interface:
        description: >-
          Le projet DOIT fournir une documentation de référence
          qui décrit l'interface externe (entrée et sortie) du
          logiciel produit par le projet.
        details: >-
          La documentation d'une interface externe explique à
          un utilisateur final ou un développeur comment l'utiliser.
          Cela inclut son interface de programmation (API) si
          le logiciel en possède une. S'il s'agit d'une bibliothèque,
          documentez les principales classes / types et méthodes
          / fonctions pouvant être appelés. S'il s'agit d'une
          application Web, définissez son interface URL (souvent
          son interface REST). S'il s'agit d'une interface de
          ligne de commande, documentez les paramètres et les
          options qu'elle supporte. Dans de nombreux cas, il est
          préférable que la majorité de cette documentation soit
          générée automatiquement, de sorte que cette documentation
          reste synchronisée avec le logiciel au fur et à mesure
          qu'il change, mais cela n'est pas nécessaire. Le projet
          PEUT utiliser des liens hypertextes vers du matériel
          hors projet en tant que documentation. La documentation
          PEUT être générée automatiquement (quand c'est possible,
          c'est souvent la meilleure façon de le faire). La documentation
          d'une interface REST peut être générée à l'aide de Swagger
          / OpenAPI. La documentation de l'interface de code PEUT
          être générée à l'aide d'outils tels que <a href="http://usejsdoc.org/">JSDoc</a>
          (JavaScript), <a href="https://esdoc.org/">ESDoc</a>
          (JavaScript), pydoc (Python), <a href="https://cran.r-project.org/web/packages/devtools/index.html">devtools</a>
          (R), <a href="https://cran.r-project.org/web/packages/pkgdown/index.html">pkgdown</a>
          (R) et Doxygen (plusieurs). Le simple fait d'avoir des
          commentaires dans le code source n'est pas suffisant
          pour satisfaire ce critère ; il doit y avoir un moyen
          simple de voir l'information sans lire l'intégralité
          du code source. Si le projet ne produit pas de logiciel,
          choisissez « non applicable » (N/A).
      sites_https:
        description: >-
          Les sites du projet (site Web, dépôt et URLs de téléchargement)
          DOIVENT supporter HTTPS en utilisant TLS.
        details: >-
          Cela nécessite que l'URL de la page d'accueil du projet
          et l'URL du référentiel de contrôle de version commencent
          par « https: » et non par « http: ». Vous pouvez obtenir
          des certificats gratuits de <a href="https://letsencrypt.org/">Let's
          Encrypt</a>. Les projets PEUVENT mettre en œuvre ce
          critère en utilisant (par exemple) des <a href="https://help.github.com/articles/securing-your-github-pages-site-with-https/">pages
          GitHub, des </a> <a href="https://about.gitlab.com/2016/12/24/were-bringing-gitlab-pages-to-community-edition/">pages
          GitLab</a> ou des <a href="https://sourceforge.net/blog/introducing-https-for-project-websites/">pages
          de projet SourceForge</a>. Si vous prenez en charge
          HTTP, nous vous invitons à rediriger le trafic HTTP
          vers HTTPS.
      discussion:
        description: >-
          Le projet DOIT avoir un ou plusieurs mécanismes de discussion
          (y compris les changements et les problèmes proposés)
          qui peuvent être recherchés, permettent de désigner
          les messages et les sujets par une URL, permettent aux
          nouvelles personnes de participer à certaines des discussions
          et ne nécessitent pas d'installation côté client de
          logiciels propriétaires.
        details: >-
          Parmi les exemples de mécanismes acceptables figurent
          les listes de diffusion archivées, les problèmes de
          GitHub et les discussions sur les pull requests, Bugzilla,
          Mantis et Trac. Les mécanismes de discussion asynchrones
          (comme IRC) sont acceptables s'ils répondent à ces critères
          ; assurez-vous qu'il existe un mécanisme d'archivage
          adressable par URL. Une solution propriétaire en JavaScript,
          tout en étant découragée, est autorisée.
      english:
        description: >-
          Le projet DEVRAIT fournir de la documentation en anglais
          et être en mesure d'accepter les signalements de bogues
          et les commentaires sur le code en anglais.
        details: >-
          L'anglais est actuellement la <a href="https://fr.wikipedia.org/wiki/Langue_v%C3%A9hiculaire">langue
          véhiculaire</a> des technologies informatiques ; l'utilisation
          de l'anglais augmente le nombre de développeurs et de
          relecteurs potentiels dans le monde entier. Un projet
          peut répondre à ce critère même si la langue principale
          de ses principaux développeurs n'est pas l'anglais.
      repo_public:
        description: >-
          Le projet DOIT avoir un dépôt source sous contrôle de
          version qui est publiquement lisible et possède une
          URL.
        details: >-
          L'URL PEUT être identique à l'URL du projet. Le projet
          PEUT utiliser des branches privées (non publiques) dans
          des cas spécifiques alors que la modification n'est
          pas diffusée publiquement (par exemple, pour la correction
          d'une vulnérabilité avant qu'elle ne soit révélée au
          public).
      repo_track:
        description: >-
          Le dépôt source du projet DOIT suivre les changements
          apportés, qui a effectué les changements et quand les
          changements ont été effectués.
      repo_interim:
        description: >-
          Pour permettre une analyse collaborative, le dépôt source
          du projet DOIT inclure des versions provisoires pour
          examen entre versions officielles ; Il NE DOIT PAS inclure
          que les dernières versions.
        details: >-
          Les projets PEUVENT choisir d'omettre des versions intermédiaires
          spécifiques dans leurs dépôts source publics (par exemple,
          celles qui corrigent des vulnérabilités de sécurité
          non publiques spécifiques, ne peuvent jamais être rendues
          publiques ou incluent des éléments qui ne peuvent être
          légalement publiés et ne sont pas dans la version finale).
      repo_distributed:
        description: >-
          Il est PROPOSÉ qu'un logiciel reconnu de contrôle de
          version distribué soit utilisé (par exemple, git) pour
          le dépôt source du projet.
        details: >-
          Git n'est pas spécifiquement requis et les projets peuvent
          utiliser un logiciel de contrôle de version centralisé
          (comme subversion) avec justification.
      version_unique:
        description: >-
          Les résultats du projet DOIVENT avoir un identifiant
          de version unique pour chaque version destinée à être
          utilisée par les utilisateurs.
        details: >-
          Cela PEUT être satisfait de diverses façons, y compris
          les identifiants de commit (comme git commit id ou mercure
          changeset id) ou un numéro de version (y compris les
          numéros de version qui utilisent la version sémantique
          ou les systèmes basés sur la date comme YYYYMMDD).
      version_semver:
        description: >-
          Il est PROPOSÉ d'utiliser le format de numérotation
          de version appelé <a href="https://semver.org">Versionage
          Sémantique (SemVer)</a> ou <a href="https://calver.org/"
          >Versionage Calendaire (CalVer)</a>. Il est PROPOSÉ
          que ceux qui utilisent CalVer incluent une valeur de
          niveau micro.
        details: >-
          Les projets devraient généralement préférer le format
          attendu par leurs utilisateurs, par exemple, parce que
          c'est le format normal utilisé par leur écosystème.
          De nombreux écosystèmes préfèrent SemVer, et SemVer
          est généralement préféré pour les interfaces de programmation
          d'applications (API) et les kits de développement logiciel
          (SDK). CalVer a tendance à être utilisé par des projets
          de grande envergure, ayant un nombre inhabituellement
          élevé de dépendances développées indépendamment, ayant
          une portée en constante évolution ou étant sensibles
          au temps. Il est PROPOSÉ que ceux qui utilisent CalVer
          incluent une valeur de niveau micro, car l'inclusion
          d'un niveau micro prend en charge les branches maintenues
          simultanément chaque fois que cela devient nécessaire.
          D'autres formats de numérotation de version peuvent
          être utilisés, y compris les ID de commit git ou les
          ID de jeu de modifications mercurial, à condition qu'ils
          identifient de manière unique les versions. Cependant,
          certaines alternatives (telles que les ID de commit
          git) peuvent poser des problèmes en tant qu'identificateurs
          de version, car les utilisateurs peuvent ne pas être
          en mesure de déterminer facilement s'ils sont à jour.
          Le format de l'ID de version peut être sans importance
          pour l'identification des versions logicielles si tous
          les destinataires n'exécutent que la dernière version
          (par exemple, il s'agit du code d'un site Web ou d'un
          service Internet unique qui est constamment mis à jour
          par livraison continue).
      version_tags:
        description: >-
          Il est PROPOSÉ que les projets identifient chaque version
          dans leur système de contrôle de version. Par exemple,
          il est PROPOSÉ que ceux qui utilisent git identifient
          chaque version à l'aide des tags de git.
      release_notes:
        description: >-
          Le projet DOIT fournir, avec chaque distribution, des
          notes de version qui sont un résumé lisible par les
          humains des changements majeurs dans cette version afin
          d'aider les utilisateurs à déterminer s'ils doivent
          se mettre à niveau et quel sera l'impact de la mise
          à niveau. Les notes de version NE DOIVENT PAS être la
          sortie brute d'un journal de contrôle de version (par
          exemple, les résultats de la commande « git log » ne
          sont pas des notes de version). Les projets dont les
          résultats ne sont pas destinés à être réutilisés dans
          plusieurs emplacements (tels que le logiciel pour un
          site Web ou un service unique) ET qui utilisent la livraison
          continue PEUVENT sélectionner « N/A ».
        details: >-
          Les notes de version PEUVENT être mises en œuvre de
          différentes façons. De nombreux projets les fournissent
          dans un fichier nommé « NEWS », « CHANGELOG » ou « ChangeLog
          », éventuellement avec des extensions telles que « .txt
          », « .md » ou « .html ». Historiquement, le terme «
          journal des modifications » signifiait un enregistrement
          de <em>chaque</em> changement, mais pour répondre à
          ces critères, il faut un résumé lisible par un humain.
          Les notes de version PEUVENT être fournies à la place
          par des mécanismes de système de contrôle de version
          tels que le <a href="https://github.com/blog/1547-release-your-software">GitHub
          Releases workflow</a>.
      release_notes_vulns:
        description: >-
          Les notes de version DOIVENT identifier toutes les vulnérabilités
          connues du public corrigées dans cette version qui avaient
          déjà une affectation CVE ou similaire lors de la création
          de la version. Ce critère peut être marqué comme non
          applicable (N/A) si les utilisateurs ne peuvent pas
          en général mettre à jour le logiciel eux-mêmes (par
          exemple, comme c'est souvent le cas pour les mises à
          jour du noyau). Ce critère s'applique uniquement aux
          résultats du projet, pas à ses dépendances. S'il n'y
          a pas de notes de version ou qu'il n'y a pas eu de vulnérabilité
          publiquement connue, choisissez N/A.
        details: >-
          Ce critère aide les utilisateurs à déterminer si une
          mise à jour donnée corrigera une vulnérabilité connue
          publiquement, pour aider les utilisateurs à prendre
          une décision éclairée concernant la mise à jour. Si
          les utilisateurs ne peuvent généralement pas mettre
          à jour le logiciel eux-mêmes sur leur ordinateur, mais
          doivent à la place dépendre d'un ou plusieurs intermédiaires
          pour effectuer la mise à niveau (comme c'est souvent
          le cas pour un noyau et un logiciel de bas niveau associé
          à un noyau), le projet peut choisir « non applicable
          » (N/A) à la place, car ces informations supplémentaires
          ne seront pas utiles à ces utilisateurs. De même, un
          projet peut choisir N/A si tous les destinataires n'exécutent
          que la dernière version (par exemple, il s'agit du code
          d'un site Web ou d'un service Internet unique qui est
          constamment mis à jour par livraison continue). Ce critère
          s'applique uniquement aux résultats du projet, pas à
          ses dépendances. Énumérer les vulnérabilités de toutes
          les dépendances transitives d'un projet devient ingérable
          à mesure que les dépendances augmentent et varient,
          et n'est pas nécessaire car les outils qui examinent
          et suivent les dépendances peuvent le faire de manière
          plus évolutive.
      report_process:
        description: >-
          Le projet DOIT fournir un processus permettant aux utilisateurs
          de soumettre des signalements de bogue (par exemple,
          en utilisant un suivi des problèmes ou une liste de
          diffusion).
      report_tracker:
        description: >-
          Le projet DEVRAIT utiliser un suivi des problèmes pour
          le suivi des problèmes individuels.
        unmet_placeholder: Pourquoi n'y a-t-il pas de suivi des
          problèmes ?
      report_responses:
        description: >-
          Le projet DOIT confirmer une majorité des signalements
          de bogues soumis au cours des 2 à 12 derniers mois (inclus)
          ; la réponse ne doit pas nécessairement inclure une
          correction.
      enhancement_responses:
        description: >-
          Le projet DEVRAIT répondre à une majorité (&gt;50%)
          des demandes d'amélioration au cours des 2 à 12 derniers
          mois (inclus).
        details: >-
          La réponse PEUT être « non » ou une discussion sur ses
          mérites. Le but est simplement qu'il y ait une réponse
          à certaines demandes, ce qui indique que le projet est
          toujours en vie. Aux fins de ce critère, les projets
          ne doivent pas compter les fausses demandes (par exemple,
          provenant de spammeurs ou de systèmes automatisés).
          Si un projet ne fait plus d'améliorations, sélectionnez
          « non satisfait » et incluez l'URL qui rend cette situation
          claire pour les utilisateurs. Si un projet tend à être
          submergé par le nombre de demandes d'amélioration, sélectionnez
          « non satisfait » et expliquez.
      report_archive:
        description: >-
          Le projet DOIT avoir une archive publique pour les signalements
          et les réponses pour une recherche ultérieure.
      vulnerability_report_process:
        description: >-
          Le projet DOIT publier le processus de signalement des
          vulnérabilités sur le site du projet.
        details: >-
          Les projets hébergés sur GitHub DEVRAIENT envisager
          <a href="https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability"
          >d'activer le signalement privé d'une vulnérabilité
          de sécurité</a> . Les projets sur GitLab DEVRAIENT envisager
          d'utiliser sa capacité à <a href="https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability"
          >signaler une vulnérabilité en privé</a> . Les projets
          PEUVENT identifier une adresse postale sur https://PROJECTSITE/security,
          souvent sous la forme security@example.org. Ce processus
          de rapport de vulnérabilité PEUT être le même que son
          processus de rapport de bogue. Les rapports de vulnérabilité
          PEUVENT toujours être publics, mais de nombreux projets
          ont un mécanisme de rapport de vulnérabilité privé.
      vulnerability_report_private:
        description: >-
          Si les signalements de vulnérabilités privés sont pris
          en charge, le projet DOIT inclure la façon d'envoyer
          l'information de manière confidentielle.
        details: >-
          Des exemples incluent un signalement de défaut privé
          envoyé sur le Web en utilisant HTTPS (TLS) ou un courrier
          électronique chiffré à l'aide d'OpenPGP. Si les signalements
          de vulnérabilités sont toujours publics (donc il n'y
          a jamais de signalements de vulnérabilités privés),
          choisissez « non applicable » (N/A).
      vulnerability_report_response:
        description: >-
          Le temps de réponse initial du projet pour tout signalement
          de vulnérabilité reçu au cours des 6 derniers mois DOIT
          être inférieur ou égal à 14 jours.
        details: >-
          S'il n'y a pas eu de vulnérabilité signalée au cours
          des 6 derniers mois, choisissez « non applicable » (N/A).
      build:
        description: >-
          Si le logiciel produit par le projet nécessite d'être
          construit pour être utilisé, le projet DOIT fournir
          un système de construction fonctionnel qui peut reconstruire
          automatiquement le logiciel à partir du code source.
        details: >-
          Un système de construction détermine quelles actions
          doivent se produire pour reconstruire le logiciel (et
          dans quel ordre), puis exécute ces étapes. Par exemple,
          il peut invoquer un compilateur pour compiler le code
          source. Si un exécutable est créé à partir du code source,
          il doit être possible de modifier le code source du
          projet, puis de générer un exécutable mis à jour avec
          ces modifications. Si le logiciel produit par le projet
          dépend de bibliothèques externes, le système de construction
          n'a <em>pas</em> besoin de construire ces bibliothèques
          externes. S'il n'est pas nécessaire de construire quoi
          que ce soit pour utiliser le logiciel après la modification
          de son code source, sélectionnez « non applicable »
          (N/A).
      build_common_tools:
        description: >-
          Il est PROPOSÉ d'utiliser des outils courants pour la
          construction du logiciel.
        details: >-
          Par exemple, Maven, Ant, cmake, autotools, make, rake
          (Ruby) ou <a href="https://cran.r-project.org/web/packages/devtools/index.html">devtools</a>
          (R).
      build_floss_tools:
        description: >-
          Le projet DEVRAIT être constructible en utilisant uniquement
          des outils FLOSS.
      test:
        description: >-
          Le projet DOIT utiliser au moins une suite de tests
          automatisée publiée publiquement comme FLOSS (cette
          suite de tests peut être maintenue sous la forme d'un
          projet FLOSS distinct). Le projet DOIT clairement montrer
          ou documenter comment exécuter la ou les suites de tests
          (par exemple, via un script d'intégration continue (CI)
          ou via la documentation dans des fichiers tels que BUILD.md,
          README.md ou CONTRIBUTING.md).
        details: >-
          Le projet PEUT utiliser plusieurs suites de tests automatisées
          (par exemple, une qui s'exécute rapidement, par rapport
          à une autre qui est plus approfondie, mais nécessite
          un équipement spécial). De nombreuses plate-formes de
          tests et environnements de tests sont disponibles, tels
          que <a href="https://www.seleniumhq.org/">Selenium</a>
          (automatisation de navigateur Web), <a href="https://junit.org">Junit</a>
          (JVM, Java), <a href="https://CRAN.R-project.org/package=RUnit">RUnit</a>
          (R), <a href="https://cran.r-project.org/web/packages/testthat/index.html">testthat</a>
          (R).
      test_invocation:
        description: >-
          Une suite de tests DEVRAIT être invocable d'une manière
          standard pour ce langage.
        details: >-
          Par exemple, « make check », « mvn test » ou « rake
          test » (Ruby).
      test_most:
        description: >-
          Il est PROPOSÉ que la suite de tests couvre la plupart
          (ou idéalement toutes) les branches du code, les champs
          de saisie et les fonctionnalités.
      test_continuous_integration:
        description: >-
          Il est PROPOSÉ que le projet utilise une intégration
          continue (où le code nouveau ou modifié est fréquemment
          intégré dans un dépôt de code central et des tests automatisés
          sont exécutés sur le résultat).
      test_policy:
        description: >-
          Le projet DOIT avoir une politique générale (formelle
          ou non) qui spécifie que, dès qu'une nouvelle fonctionnalité
          majeure est ajoutée au logiciel produit par le projet,
          des tests de cette fonctionnalité devraient être ajoutés
          à une suite de tests automatisée.
        details: >-
          Dès qu'une politique est en place, même par le bouche
          à oreille, qui spécifie que les développeurs devraient
          ajouter des tests à une suite de tests automatisée pour
          toute nouvelle fonctionnalité importante, sélectionnez
          « Atteint ».
      tests_are_added:
        description: >-
          Le projet DOIT avoir la preuve que la <a href="#test_policy">politique
          de test</a> pour l'ajout de tests a été respectée dans
          les dernières modifications majeures apportées au logiciel
          produit par le projet.
        details: >-
          Les principales fonctionnalités sont généralement mentionnées
          dans les notes de version. La perfection n'est pas nécessaire,
          il suffit de prouver que les tests sont généralement
          ajoutés en pratique à la suite de tests automatisée
          lorsque de nouvelles fonctionnalités majeures sont ajoutées
          au logiciel produit par le projet.
      tests_documented_added:
        description: >-
          Il est PROPOSÉ que cette politique sur l'ajout de tests
          (voir <a href="#test_policy">la politique de test</a>)
          soit <em>documentée</em> dans les instructions pour
          les propositions de modification.
        details: >-
          Cependant, même une règle informelle est acceptable
          tant que les tests sont ajoutés dans la pratique.
      warnings:
        description: >-
          Le projet DOIT activer une ou plusieurs options d'avertissement
          du compilateur, un mode du langage « sûr » ou utiliser
          un outil « linter » séparé pour rechercher des erreurs
          de qualité de code ou des erreurs simples courantes,
          s'il existe au moins un outil FLOSS qui peut implémenter
          ce critère dans le langage sélectionné.
        details: >-
          Des exemples d'options d'avertissement du compilateur
          incluent « -Wall » pour gcc/clang. Des exemples d'un
          mode de langage « sûr » incluent « use strict » en JavaScript
          et « use warnings » de perl5. Un outil « linter » distinct
          est simplement un outil qui examine le code source pour
          rechercher des erreurs de qualité de code ou des erreurs
          simples courantes. Ceux-ci sont généralement activés
          par le code source ou par les instructions de construction.
      warnings_fixed:
        description: Le projet DOIT résoudre les avertissements.
        details: >-
          Ce sont les avertissements identifiés par la mise en
          œuvre du critère <a href="#warnings">warnings</a>. Le
          projet doit corriger les avertissements ou les marquer
          dans le code source comme faux positifs. Idéalement,
          il n'y aurait pas d'avertissement, mais un projet PEUT
          accepter certains avertissements (généralement moins
          de 1 avertissement pour 100 lignes ou moins de 10 avertissements).
      warnings_strict:
        description: >-
          Il est PROPOSÉ que les projets soient maximalement stricts
          avec les avertissements dans le logiciel produit par
          le projet, quand cela est approprié.
        details: >-
          Certains avertissements ne peuvent être efficacement
          activés sur certains projets. Ce qui est nécessaire
          est la preuve que le projet s'efforce d'activer les
          options d'avertissements où il peut, de sorte que les
          erreurs soient détectées tôt.
      know_secure_design:
        description: >-
          Le projet DOIT avoir au moins un développeur principal
          qui sait comment concevoir un logiciel sécurisé. (Voir
          les « détails » pour les exigences exactes.)
        details: >-
          Cela nécessite de comprendre les principes de conception
          suivants, y compris les 8 principes de <a href="https://web.mit.edu/Saltzer/www/publications/protection/">Saltzer
          et Schroeder</a> : <ul> <li>économie de moyens (maintenez
          la conception aussi simple et petite que pratique, par
          exemple en adoptant des simplifications conséquentes)
          <li>valeurs sûres par défaut (les décisions d'accès
          par défaut devraient être de refuser l'accès et l'installation
          des projets devrait être sécurisée par défaut) <li>médiation
          complète (tous les accès qui pourraient être limités
          doivent être vérifiés pour l'autorité et ne pas être
          contournables) <li>conception ouverte (les mécanismes
          de sécurité ne doivent pas dépendre de l'ignorance par
          l'attaquant de sa conception, mais plutôt d'informations
          plus facilement protégées et modifiées comme des clés
          et des mots de passe) <li>séparation des privilèges
          (idéalement, l'accès aux objets importants devrait dépendre
          de plus d'une condition, de sorte que la défaillance
          d'un système de protection n'autorisera pas l'accès
          complet. Par exemple, l'authentification multi-facteurs,
          comme l'exigence d'un mot de passe et d'un jeton matériel,
          est plus forte qu'une authentification à un seul facteur)
          <li>principe de plus faible privilège (les processus
          doivent fonctionner avec le minimum de privilège requis)
          <li>mécanisme de partage minimal (la conception devrait
          minimiser les mécanismes communs à plus d'un utilisateur
          et nécessaires à tous les utilisateurs, par exemple,
          les répertoires pour les fichiers temporaires) <li>acceptabilité
          psychologique (l'interface humaine doit être conçue
          pour faciliter l'utilisation - la conception pour «
          l'étonnement minimal » peut aider) <li>surface d'attaque
          limitée (la surface d'attaque - l'ensemble des différents
          points où un attaquant peut essayer d'entrer ou d'extraire
          des données - devrait être limitée) <li>validation d'entrée
          avec des listes blanches (les entrées devraient généralement
          être vérifiées pour déterminer si elles sont valides
          avant qu'elles ne soient acceptées ; cette validation
          devrait utiliser des listes blanches (qui n'acceptent
          que des bonnes valeurs connues), et non des listes noires
          (qui tentent de répertorier les valeurs mauvaises connues)).
          </ul> Un « développeur principal » dans un projet est
          celui qui connaît la base de code du projet, est à l'aise
          pour faire des modifications et est reconnu comme tel
          par la plupart des autres participants au projet. Un
          développeur principal a effectué généralement un certain
          nombre de contributions au cours de l'année écoulée
          (du code, de la documentation ou des réponses aux questions).
          Des développeurs sont généralement considérés comme
          des développeurs principaux s'ils ont lancé le projet
          (et n'ont pas quitté le projet il y a plus de trois
          ans), ont la possibilité de recevoir des informations
          sur un canal privé de déclaration de vulnérabilités
          (s'il y en a un), peuvent accepter des contributions
          au nom du projet, ou effectuer les distributions finales
          du logiciel du projet. S'il n'y a qu'un seul développeur,
          cette personne est le développeur principal. De nombreux
          livres et cours sont disponibles pour vous aider à comprendre
          comment développer des logiciels plus sûrs et pour discuter
          de leur conception. Par exemple, le cours <a href="https://openssf.org/edx-courses/">Bases
          du développement logiciel sécurisé</a> est un ensemble
          gratuit de trois cours qui expliquent comment développer
          des logiciels plus sûrs (il est possible de le suivre
          gratuitement comme auditeur ; il est aussi possible
          de payer pour obtenir un certificat prouvant que vous
          avez compris les enseignements du cours).
      know_common_errors:
        description: >-
          Au moins l'un des principaux développeurs du projet
          DOIT connaître les types courants d'erreurs qui conduisent
          à des vulnérabilités dans ce genre de logiciel, ainsi
          qu'au moins une méthode pour contrer ou atténuer chacun
          d'eux.
        details: >-
          Des exemples (selon le type de logiciel) incluent l'injection
          SQL, l'injection OS, le débordement mémoire classique,
          le cross-site scripting, l'authentification manquante
          et l'autorisation manquante. Voir <a href="https://cwe.mitre.org/top25/">CWE/SANS
          top 25</a> ou <a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project">OWASP
          Top 10</a> pour les listes couramment utilisées. De
          nombreux livres et cours sont disponibles pour vous
          aider à comprendre comment développer des logiciels
          plus sûrs et discuter des erreurs courantes de mise
          en œuvre qui conduisent à des vulnérabilités. Par exemple,
          le cours <a href="https://openssf.org/edx-courses/">Bases
          du développement logiciel sécurisé</a> est un ensemble
          gratuit de trois cours qui expliquent comment développer
          des logiciels plus sûrs (gratuitement ; vous pouvez
          payer pour obtenir un certificat démontrant que vous
          avez assimilé le matériel présenté).
      crypto_published:
        description: >-
          Le logiciel produit par le projet DOIT utiliser, par
          défaut, uniquement les protocoles cryptographiques et
          les algorithmes publiés publiquement et revus par des
          experts (si des protocoles et algorithmes cryptographiques
          sont utilisés).
        details: >-
          Ces critères cryptographiques ne s'appliquent pas toujours
          car certains logiciels n'ont pas besoin d'utiliser directement
          de capacités cryptographiques.
      crypto_call:
        description: >-
          Si le logiciel produit par le projet est une application
          ou une bibliothèque, et si son objectif principal n'est
          pas d'implémenter de la cryptographie, alors il DEVRAIT
          simplement appeler un logiciel spécialement conçu pour
          implémenter des fonctions cryptographiques ; il ne DEVRAIT
          PAS ré-implémenter les siennes.
      crypto_floss:
        description: >-
          Toutes les fonctionnalités du logiciel produit par le
          projet qui dépendent de la cryptographie DOIVENT être
          réalisables à l'aide de FLOSS.
        details: >-
          Consultez les <a href="https://opensource.org/osr">Exigences
          des standards ouverts pour les logiciels par l'Open
          Source Initiative</a>.
      crypto_keylength:
        description: >-
          Les mécanismes de sécurité dans le logiciel produit
          par le projet DOIVENT utiliser des longueurs de clés
          par défaut qui satisfont au moins aux exigences minimales
          du NIST jusqu'à l'année 2030 (comme indiqué en 2012).
          Il DOIT être possible de configurer le logiciel afin
          que les plus petites longueurs de clés soient complètement
          désactivées.
        details: >-
          Ces longueurs de bit minimales sont : pour une clé symétrique
          112, pour un modulo de factorisation 2048, pour une
          clé de logarithme discret 224, pour un groupe du logarithmique
          discret 2048, pour une courbe elliptique 224 et pour
          un hachage 224 (le hachage de mot de passe n'est pas
          couvert par cette longueur de bit, plus d'informations
          sur le hachage de mot de passe peuvent être trouvées
          dans le critère <a href="#crypto_password_storage">crypto_password_storage</a>).
          Voir <a href="https://www.keylength.com">https://www.keylength.com</a>
          pour une comparaison des recommandations sur les longueurs
          de clés de diverses organisations. Le logiciel PEUT
          permettre de plus petites longueurs de clés dans certaines
          configurations (idéalement non, car cela permet des
          attaques de dégradation, mais des longueurs de clés
          plus courtes sont parfois nécessaires pour l'interopérabilité).
      crypto_working:
        description: >-
          Les mécanismes de sécurité par défaut dans le logiciel
          produit par le projet NE DOIVENT PAS dépendre d'algorithmes
          cryptographiques cassés (par exemple, MD4, MD5, DES
          unique, RC4, Dual_EC_DRBG) ou utiliser des modes de
          chiffrement inappropriés dans le contexte, sauf si ils
          sont nécessaires pour implémenter un protocole d'interopérabilité
          (où le protocole implémenté est la version la plus récente
          du standard supporté largement par l'écosystème du réseau,
          l'écosystème requiert l'utilisation de cet algorithme
          ou mode, et cet écosystème n'offre pas d'alternative
          plus sûre). La documentation DOIT décrire tous les risques
          de sécurité appropriés et les parades connues si ces
          algorithmes ou modes cassés sont nécessaires pour un
          protocole d'interopérabilité.
        details: >-
          Le mode ECB n'est presque jamais approprié car il révèle
          des blocs identiques dans le texte chiffré, comme le
          montre le <a href="https://blog.filippo.io/the-ecb-penguin/">pingouin
          ECB</a>, et le mode CTR est souvent inapproprié car
          il n'effectue pas d'authentification et provoque des
          doublons si l'état d'entrée est dupliqué. Dans de nombreux
          cas, il est préférable de choisir un mode d'algorithme
          de chiffrement de bloc conçu pour combiner le secret
          et l'authentification, par exemple Galois/Counter Mode
          (GCM) et EAX. Les projets PEUVENT permettre aux utilisateurs
          d'activer les mécanismes cassés (par exemple pendant
          la configuration) si nécessaire pour la compatibilité,
          mais les utilisateurs savent alors qu'ils le font.
      crypto_weaknesses:
        description: >-
          Les mécanismes de sécurité par défaut dans le logiciel
          produit par le projet NE DEVRAIENT PAS dépendre d'algorithmes
          ou de modes cryptographiques avec des faiblesses sérieuses
          connues (par exemple, l'algorithme de hachage cryptographique
          SHA-1 ou le mode CBC en SSH).
        details: >-
          Les préoccupations concernant le mode CBC en SSH sont
          discutées dans <a href="https://www.kb.cert.org/vuls/id/958563">CERT
          : vulnérabilité SSH CBC</a>.
      crypto_pfs:
        description: >-
          Les mécanismes de sécurité dans le logiciel produit
          par le projet DEVRAIENT implémenter la confidentialité
          persistante pour les protocoles d'échange de clés afin
          qu'une clé de session dérivée d'un ensemble de clés
          à long terme ne soit pas compromise si l'une des clés
          à long terme est compromise dans le futur.
      crypto_password_storage:
        description: >-
          Si le logiciel produit par le projet entraîne la sauvegarde
          de mots de passe pour l'authentification d'utilisateurs
          externes, les mots de passe DOIVENT être sauvegardés
          comme hachages itérés avec un salage par utilisateur
          en utilisant un algorithme d'étirement de clé (itéré)
          (par exemple Argon2id, Bcrypt, Scrypt, ou PBKDF2). Voir
          également le <a href="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html">pense-bête
          sur le stockage des clés d'OWASP</a>.
        details: >-
          Ce critère s'applique uniquement lorsque le logiciel
          applique l'authentification des utilisateurs utilisant
          des mots de passe pour les utilisateurs extérieurs (càd
          l'authentification entrante), telles que des applications
          Web côté serveur. Il ne s'applique pas dans les cas
          où le logiciel sauvegarde des mots de passe pour l'authentification
          dans d'autres systèmes (càd l'authentification sortante,
          par exemple, le logiciel implémente un client pour un
          autre système), car au moins certaines parties de ce
          logiciel doivent avoir souvent accès au mot de passe
          en clair.
      crypto_random:
        description: >-
          Les mécanismes de sécurité dans le logiciel produit
          par le projet DOIVENT générer toutes les clés cryptographiques
          et les nonces en utilisant un générateur de nombres
          aléatoires cryptographiquement sécurisé, et NE DOIVENT
          PAS le faire en utilisant des générateurs qui ne seraient
          pas cryptographiquement sécurisés.
        details: >-
          Un générateur de nombres aléatoires cryptographiquement
          sécurisé peut être un générateur de nombres aléatoires
          matériel ou un générateur de nombres pseudo-aléatoires
          cryptographiquement sécurisé (CSPRNG) utilisant un algorithme
          tel que Hash_DRBG, HMAC_DRBG, CTR_DRBG, Yarrow ou Fortuna.
          Des exemples d'appels de générateurs de nombres aléatoires
          <em>sûrs</em> incluent java.security.SecureRandom en
          Java et window.crypto.getRandomValues ​​de JavaScript.
          Des exemples d'appels de générateurs de nombres aléatoires
          <em>non sûrs</em> incluent java.util.Random en Java
          et Math.random en JavaScript.
      delivery_mitm:
        description: >-
          Le projet DOIT utiliser un mécanisme de livraison qui
          contrecarre les attaques MITM. L'utilisation de https
          ou ssh+scp est acceptable.
        details: >-
          Un mécanisme encore plus fort distribue le logiciel
          sous forme de paquetages signés numériquement, car cela
          atténue les attaques sur le système de distribution,
          mais cela ne fonctionne que si les utilisateurs peuvent
          être convaincus que les clés publiques pour les signatures
          sont correctes <em>et</em> si les utilisateurs vérifient
          la signature.
      delivery_unsigned:
        description: >-
          Un hachage cryptographique (par exemple, un sha1sum)
          NE DOIT PAS être récupéré par http et utilisé sans vérifier
          une signature cryptographique.
        details: Ces hachages peuvent être modifiés en transit.
      vulnerabilities_fixed_60_days:
        description: >-
          Il ne DOIT pas y avoir de vulnérabilités non corrigées
          de gravité moyenne ou supérieure connues publiquement
          depuis plus de 60 jours.
        details: >-
          La vulnérabilité doit être corrigée et diffusée par
          le projet lui-même (les correctifs peuvent être développés
          ailleurs). Une vulnérabilité devient publique (à cet
          effet) une fois qu'elle a un CVE avec des informations
          non payantes publiquement publiées (signalée, par exemple,
          dans la <a href="https://nvd.nist.gov/">Base de données
          Nationale des Vulnérabilités</a>) ou lorsque le projet
          a été informé et que l'information a été diffusée au
          public (éventuellement par le projet). Une vulnérabilité
          est considérée de gravité moyenne ou supérieure si son
          score de base qualitatif du <a href="https://www.first.org/cvss/">Système
          Commun d'Évaluation des Vulnérabilités (CVSS)</a> est
          moyen ou supérieur. Dans les versions CVSS 2.0 à 3.1,
          cela équivaut à un score CVSS de 4.0 ou supérieur. Les
          projets peuvent utiliser le score CVSS publié dans une
          base de données de vulnérabilité largement utilisée
          (telle que la <a href="https://nvd.nist.gov">base de
          données nationale des vulnérabilités</a>) en utilisant
          la version la plus récente de CVSS rapportée dans cette
          base de données. Les projets peuvent aussi calculer
          eux-mêmes la gravité à l'aide de la dernière version
          de <a href="https://www.first.org/cvss/">CVSS</a> au
          moment de la divulgation de la vulnérabilité, si les
          entrées de calcul sont révélées publiquement une fois
          que la vulnérabilité est connue du public.<strong>Note</strong>
          : cela signifie que les utilisateurs peuvent être laissés
          vulnérables à tous les attaquants du monde entier jusqu'à
          60 jours. Ce critère est souvent beaucoup plus facile
          à atteindre que ce que Google recommande dans son <a
          href="https://security.googleblog.com/2010/07/rebooting-responsible-disclosure-focus.html">Redémarrage
          de la divulgation responsable</a>, car Google recommande
          que la période de 60 jours commence lorsque le projet
          est notifié <em>même</em> si le rapport n'est pas public.
          Notez que ce critère de badge, comme d'autres critères,
          s'applique à un projet individuel. Certains projets
          font parti d'organisations ou de projets englobants,
          parfois à plusieurs niveaux, et de nombreux projets
          fournissent leurs résultats à d'autres organisations
          et projets au sein d'une chaîne approvisionnement potentiellement
          complexe. Un projet individuel ne peut souvent pas contrôler
          le reste, mais un projet individuel peut travailler
          à fournir un correctif de vulnérabilité à temps. Pour
          cette raison, nous nous concentrons seulement sur le
          temps de réponse des projets individuels. Une fois qu'un
          correctif est disponible de la part d'un projet individuel,
          les autres projets peuvent déterminer comment appliquer
          le correctif (par exemple, ils peuvent mettre à jour
          la dernière version ou ils peuvent appliquer uniquement
          le correctif).
      vulnerabilities_critical_fixed:
        description: >-
          Les projets DEVRAIENT corriger rapidement toutes les
          vulnérabilités critiques après leur signalement.
      no_leaked_credentials:
        description: >-
          Les dépôts publics NE DOIVENT PAS fuiter un certificat
          privé valide (par exemple, un mot de passe ou une clé
          privée) qui est destiné à limiter l'accès public.
        details: >-
          Un projet PEUT fuiter des « échantillons » de certificats
          pour les tests et pour des bases de données sans importance,
          pour autant qu'ils ne soient pas destinés à limiter
          l'accès public.
      static_analysis:
        description: >-
          Au moins un outil d'analyse statique de code (au-delà
          des avertissements du compilateur et des modes « sûrs
          » des languages) DOIT être appliqué à toute distribution
          majeure proposée avant sa sortie s'il existe au moins
          un outil FLOSS qui implémente ce critère dans le langage
          sélectionné.
        details: >-
          Un outil d'analyse statique de code examine le code
          logiciel (au niveau du code source, du code intermédiaire
          ou de l'exécutable) sans l'exécuter avec des entrées
          spécifiques. Aux fins de ce critère, les avertissements
          du compilateur et les modes de langage « sûrs » ne comptent
          pas comme des outils d'analyse statique de code (ceux-ci
          évitent généralement une analyse approfondie car la
          rapidité est vitale). Certains outils d'analyse statique
          se concentrent sur la détection de défauts génériques,
          d'autres se concentrent sur la détection de défauts
          spécifiques (tels que les vulnérabilités) et d'autres
          encore proposent une combinaison de ces deux types d'outils.
          Des exemples de tels outils d'analyse statique de code
          incluent <a href="http://cppcheck.sourceforge.net/">cppcheck</a>
          (C, C++), <a href="https://clang-analyzer.llvm.org/">clang
          static analyzer</a> (C, C++), <a href="https://spotbugs.github.io/">SpotBugs</a>
          (Java), <a href="http://findbugs.sourceforge.net/">FindBugs</a>
          (Java) (y compris <a href="https://h3xstream.github.io/find-sec-bugs/">FindSecurityBugs</a>),
          <a href="https://pmd.github.io/">PMD</a> (Java), <a
          href="https://brakemanscanner.org/">Brakeman</a> (Ruby
          on Rails), <a href="https://cran.r-project.org/web/packages/lintr/index.html">lintr</a>
          (R), <a href="https://cran.r-project.org/web/packages/goodpractice/index.html">goodpractice</a>
          (R), <a href="https://scan.coverity.com/">Coverity Quality
          Analyzer</a>, <a href="https://www.sonarqube.org/">SonarQube</a>,
          <a href="https://www.codacy.com/">Codacy</a> et <a href="https://saas.hpe.com/en-us/software/sca">HP
          Enterprise Fortify Static Code Analyzer</a>. Des listes
          plus vastes d'outils peuvent être trouvées dans des
          endroits tels que <a href="https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis">la
          liste Wikipedia d'outils pour l'analyse statique de
          code</a>, <a href="https://www.owasp.org/index.php/Static_Code_Analysis">l'information
          OWASP sur l'analyse statique de code</a>, <a href="https://samate.nist.gov/index.php/Source_Code_Security_Analyzers.html">la
          liste NIST des analyseurs de sécurité du code source</a>
          et <a href="https://www.dwheeler.com/essays/static-analysis-tools.html">la
          liste des outils d'analyse statique de Wheeler</a >.
          S'il n'y a pas d'outil d'analyse statique FLOSS disponible
          pour le(s) langage(s) d'implémentation utilisé(s), sélectionnez
          « N/A ».
        na_placeholder: >-
          Pourquoi cela ne peut-il pas être satisfait (par exemple,
          il n'existe pas d'outils FLOSS pour ce langage) ?
        met_placeholder: Quel(s) outil(s) d'analyse statique sont
          utilisés ?
      static_analysis_common_vulnerabilities:
        description: >-
          Il est PROPOSÉ qu'au moins l'un des outils d'analyse
          statique utilisés pour le critère d'analyse statique
          inclue des règles ou des approches pour rechercher des
          vulnérabilités courantes dans le langage ou l'environnement
          analysé.
        details: >-
          Les outils d'analyse statique spécialement conçus pour
          détecter les vulnérabilités les plus courantes sont
          plus susceptibles de les détecter. Cela dit, l'utilisation
          d'outils statiques aidera généralement à trouver des
          problèmes, nous suggérons donc, sans l'exiger, de le
          faire pour le badge de niveau « passant ».
      static_analysis_fixed:
        description: >-
          Toutes les vulnérabilités exploitables de gravité moyenne
          ou plus découvertes avec une analyse statique de code
          DOIVENT être corrigées en temps approprié après leur
          confirmation.
        details: >-
          Une vulnérabilité est considérée comme étant de gravité
          moyenne ou supérieure si son score qualitatif de base
          du <a href="https://www.first.org/cvss/">Système Commun
          d'Évaluation des Vulnérabilités (CVSS)</a> est moyen
          ou supérieur. Dans les versions CVSS 2.0 à 3.1, cela
          équivaut à un score CVSS de 4.0 ou supérieur. Les projets
          peuvent utiliser le score CVSS publié dans une base
          de données de vulnérabilité largement utilisée (telle
          que la <a href="https://nvd.nist.gov">base de données
          nationale des vulnérabilités</a>) en utilisant la version
          la plus récente de CVSS rapportée dans cette base de
          données. Les projets peuvent aussi calculer eux-mêmes
          la gravité à l'aide de la dernière version de <a href="https://www.first.org/cvss/">CVSS</a>
          au moment de la divulgation de la vulnérabilité, si
          les entrées de calcul sont révélées publiquement une
          fois que la vulnérabilité est connue du public. Remarquez
          que le critère vulnerabilities_fixed_60_days nécessite
          que de telles vulnérabilités soient corrigées dans les
          60 jours de leur divulgation publique.
      static_analysis_often:
        description: >-
          Il est PROPOSÉ que l'analyse statique du code source
          se produise à chaque commit ou au moins quotidiennement.
      dynamic_analysis:
        description: >-
          Il est PROPOSÉ qu'au moins un outil d'analyse dynamique
          soit appliqué à tout candidat pour une version majeure
          du logiciel avant sa distribution.
        details: >-
          Un outil d'analyse dynamique examine le logiciel en
          l'exécutant avec des entrées spécifiques. Par exemple,
          le projet PEUT utiliser un outil de fuzzing (par exemple,
          <a href="http://lcamtuf.coredump.cx/afl/">American Fuzzy
          Lop</a>) ou un scanner d'application Web (par exemple,
          <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">OWASP
          ZAP</a> ou <a href="https://w3af.org/">w3af</a>). Dans
          certains cas, le projet <a href="https://github.com/google/oss-fuzz#introduction">OSS-Fuzz</a>
          peut être prêt à appliquer des tests de fuzzing à votre
          projet. Aux fins de ce critère, l'outil d'analyse dynamique
          doit varier les entrées d'une manière ou d'une autre
          pour rechercher différents types de problèmes <em>ou</em>
          être une suite de test automatisée avec au moins 80%
          de couverture de branche. La <a href="https://en.wikipedia.org/wiki/Dynamic_program_analysis">page
          Wikipedia sur l'analyse dynamique</a> et la <a href="https://www.owasp.org/index.php/Fuzzing">page
          OWASP sur le fuzzing</a> identifient certains outils
          d'analyse dynamique. Le ou les outils d'analyse PEUVENT
          être axés sur la recherche de vulnérabilités de sécurité,
          mais cela n'est pas nécessaire.
      dynamic_analysis_unsafe:
        description: >-
          Il est PROPOSÉ que, si le logiciel produit par le projet
          comprend un logiciel écrit à l'aide d'un langage non
          sûr pour les accès mémoire (par exemple, C ou C ++),
          au moins un outil dynamique (par exemple, un fuzzer
          ou un scanner d'application Web) soit utilisé de façon
          routinière en combinaison avec un mécanisme pour détecter
          des problèmes de sécurité mémoire tels que les dépassements
          de zone mémoire. Si le projet ne produit pas de logiciel
          écrit dans un langage non sûr pour les accès mémoire,
          choisissez « non applicable » (N/A).
        details: >-
          Des exemples de mécanismes pour détecter les problèmes
          de sécurité de la mémoire comprennent <a href="https://github.com/google/sanitizers/wiki/AddressSanitizer">Address
          Sanitizer (ASAN)</a> (disponible dans GCC et LLVM),
          <a href="https://clang.llvm.org/docs/MemorySanitizer.html">Memory
          Sanitizer</a> et <a href="http://valgrind.org/">valgrind</a>.
          D'autres outils potentiellement utilisés incluent <a
          href="https://clang.llvm.org/docs/ThreadSanitizer.html">thread
          sanitizer</a> et <a href="https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html">undefined
          behavior sanitizer</a>. La généralisation de l'utilisation
          des assertions fonctionnera également.
      dynamic_analysis_enable_assertions:
        description: >-
          Il est PROPOSÉ que le projet utilise une configuration
          pour au moins une analyse dynamique (comme le test ou
          le fuzzing) qui active de nombreuses assertions. Dans
          de nombreux cas, ces assertions <i>ne</i> doivent <i>pas</i>
          être activées dans les versions de production.
        details: >-
          Ce critère ne suggère <i>pas</i> d'activer les assertions
          en production ; c'est entièrement au projet et à ses
          utilisateurs de le décider. L'objectif de ce critère
          est plutôt d'améliorer la détection des défauts lors
          de l'analyse dynamique <i>avant </i> le déploiement.
          L'activation des assertions en <i>production</i> est
          <i>complètement</i> différente de l'activation des assertions
          pendant l'analyse dynamique (comme les tests). Dans
          certains cas, il est extrêmement imprudent d'activer
          les assertions en production (en particulier dans les
          composants à haute intégrité). Il existe de nombreux
          arguments contre l'activation des assertions en production,
          par exemple, les bibliothèques ne devraient pas faire
          échouer les appelants, leur présence peut provoquer
          le rejet par les magasins d'applications et/ou l'activation
          d'une assertion en production peut exposer des données
          privées telles que des clés privées. Attention, dans
          de nombreuses distributions Linux, <tt>NDEBUG</tt> n'est
          pas défini, donc <t>assert()</tt> sera activé par défaut
          en C/C++ pour la production dans ces environnements.
          Il peut être important d'utiliser un mécanisme d'assertion
          différent ou de définir <tt>NDEBUG</tt> pour la production
          dans ces environnements.
      dynamic_analysis_fixed:
        description: >-
          Toutes les vulnérabilités exploitables de gravité moyenne
          ou plus découvertes avec une analyse de code dynamique
          DOIVENT être corrigées en un temps approprié après leur
          confirmation.
        details: >-
          Si vous n'utilisez pas d'analyse de code dynamique et
          n'avez donc trouvé aucune vulnérabilité de cette manière,
          choisissez « non applicable » (N/A). Une vulnérabilité
          est considérée comme étant de gravité moyenne ou supérieure
          si son score qualitatif de base du <a href="https://www.first.org/cvss/">Système
          Commun d'Évaluation des Vulnérabilités (CVSS)</a> est
          moyen ou supérieur. Dans les versions CVSS 2.0 à 3.1,
          cela équivaut à un score CVSS de 4.0 ou supérieur. Les
          projets peuvent utiliser le score CVSS publié dans une
          base de données de vulnérabilité largement utilisée
          (telle que la <a href="https://nvd.nist.gov">base de
          données nationale des vulnérabilités</a>) en utilisant
          la version la plus récente de CVSS rapportée dans cette
          base de données. Les projets peuvent aussi calculer
          eux-mêmes la gravité à l'aide de la dernière version
          de <a href="https://www.first.org/cvss/">CVSS</a> au
          moment de la divulgation de la vulnérabilité, si les
          entrées de calcul sont révélées publiquement une fois
          que la vulnérabilité est connue du public.
      maintained:
        description: Le projet DOIT être maintenu.
        details: >-
          Au minimum, le projet doit tenter de répondre aux rapports
          de problèmes et de vulnérabilités importants. Un projet
          qui poursuit activement un badge est probablement maintenu.
          Tous les projets et tous les individus ont des ressources
          limitées, et les projets typiques doivent rejeter certaines
          modifications proposées, de sorte que les ressources
          limitées et les rejets de propositions n'indiquent pas
          en eux-mêmes un projet non maintenu. <br><br> Lorsqu'un
          projet sait qu'il ne sera plus maintenu, il doit définir
          ce critère comme « Non satisfait » et utiliser le(s)
          mécanisme(s) approprié(s) pour indiquer aux autres qu'il
          n'est pas maintenu. Par exemple, utiliser « DEPRECATED
          » comme premier en-tête de son fichier README, ajouter
          « DEPRECATED » au début de sa page d'accueil, ajouter
          « DEPRECATED » au début de la description de projet
          de son dépôt de code, ajouter un <a href="https://unmaintained.tech/">badge
          sans maintenance</a> dans son README et/ou sa page d'accueil,
          le marquer comme obsolète dans tous les dépôts de paquets
          (par exemple, <a href="https://docs.npmjs.com/deprecating-and-undeprecating-packages-or-package-versions">npm
          deprecate</a>), et/ou utiliser le système de marquage
          du dépôt de code pour l'archiver (par exemple, le <a
          href="https://docs.github.com/en/enterprise-server@2.21/github/creating-cloning-and-archiving-repositories/archiving-a-github-repository">paramètre
          « archive »</a> de GitHub, le <a href="https://docs.gitlab.com/ee/user/project/settings/#archiving-a-project">marquage
          « archivé »</a> de GitLab, le statut « lecture seule
          » de Gerrit ou le statut de projet « abandonné » de
          SourceForge). Une discussion supplémentaire peut être
          trouvée <a href="https://medium.com/maintainer-io/how-to-deprecate-a-repository-on-github-8f0ceb9155e">ici</a>.
    '1':
      contribution_requirements:
        description: >-
          Les informations sur la façon de contribuer DOIVENT
          inclure les exigences pour des contributions acceptables
          (par exemple, une référence à toute règle de codage
          requise).
      dco:
        description: >-
          Le projet DEVRAIT avoir un mécanisme juridique par lequel
          tous les développeurs de quantités non triviales de
          logiciel du projet affirment qu'ils sont légalement
          autorisés à effectuer ces contributions. L'approche
          la plus commune et facilement mise en œuvre pour ce
          faire est d'utiliser un <a href="https://developercertificate.org/">Certificat
          d'origine du développeur (DCO)</a>, où les utilisateurs
          ajoutent une information « sign-off-by » dans leurs
          commits et le projet pointe vers le site Web du DCO.
          Cependant, cela PEUT être mis en œuvre en tant que contrat
          de licence de contributeur (CLA), ou tout autre mécanisme
          juridique.
        details: >-
          Le DCO est le mécanisme recommandé, car il est facile
          à mettre en œuvre, suivi dans le code source, et git
          prend directement en charge une fonction « approuvé
          » en utilisant « commit -s ». Pour être plus efficace,
          il est préférable que la documentation du projet explique
          ce que signifie « approuvé » pour ce projet. Un CLA
          est un accord juridique qui définit les termes en vertu
          desquels des travaux intellectuels ont été licenciés
          à une organisation ou un projet. Un accord de cession
          (CAA) est un accord légal qui transfère les droits dans
          un travail intellectuel à une autre partie ; il n'est
          pas exigé d'avoir des CAA pour les projets, car un CAA
          augmente le risque que les contributeurs potentiels
          ne contribuent pas, en particulier si le destinataire
          est un organisme à but lucratif. Les <a href="https://www.apache.org/licenses/">CLA
          de la Fondation Apache (la licence de contributeur individuel
          et la CLA d'entreprise)</a> sont des exemples de CLA
          pour des projets qui déterminent que les risques de
          ces types de CLA au projet sont inférieurs à leurs avantages.
      governance:
        description: >-
          Le projet DOIT définir et documenter clairement son
          modèle de gouvernance de projet (la façon dont il prend
          ses décisions, y compris les rôles clés).
        details: >-
          Il doit y avoir une manière documentée bien établie
          de prendre des décisions et de résoudre les différends.
          Dans les petits projets, cela peut être aussi simple
          que « le propriétaire du projet et dirigeant prend toutes
          les décisions finales ». Il existe différents modèles
          de gouvernance, y compris le dictateur bienveillant
          et la méritocratie formelle ; pour plus de détails,
          voir <a href="http://oss-watch.ac.uk/resources/governancemodels">Modèles
          de gouvernance</a>. Les approches centralisées (par
          exemple, un seul mainteneur) et décentralisées (par
          exemple, les groupes de mainteneurs) ont été utilisées
          avec succès dans des projets. L'information sur la gouvernance
          n'a pas besoin de documenter la possibilité de créer
          une duplication de projet, car cela est toujours possible
          pour les projets FLOSS.
      code_of_conduct:
        description: >-
          Le projet DOIT adopter un code de conduite et le publier
          dans un lieu standard.
        details: >-
          Les projets peuvent être en mesure d'améliorer la civilité
          de leur communauté et d'établir des attentes quant à
          une conduite acceptable en adoptant un code de conduite.
          Cela peut aider à éviter les problèmes avant leur apparition
          et faire du projet un lieu plus accueillant pour encourager
          les contributions. Cela devrait se concentrer uniquement
          sur le comportement au sein de la communauté / lieu
          de travail du projet. Des exemples de codes de conduite
          sont le <a href="https://www.kernel.org/doc/html/latest/process/code-of-conduct.html">code
          de conduite</a> du noyau Linux, le <a href="https://contributor-covenant.org/">code
          de conduite du pacte de contributeur</a>, le <a href="https://www.debian.org/code_of_conduct">code
          de conduite du projet Debian</a>, le <a href="https://www.ubuntu.com/about/about-ubuntu/conduct">code
          de conduite du projet Ubuntu</a>, le <a href="https://getfedora.org/code-of-conduct">code
          de conduite du projet Fedora</a>, le <a href="https://wiki.gnome.org/action/show/Foundation/CodeOfConduct">code
          de conduite du projet GNOME</a>, le <a href="https://www.kde.org/code-of-conduct/">code
          de conduite de la communauté KDE"</a>, le <a href="https://www.python.org/psf/codeofconduct/">code
          de conduite de la communauté Python</a>, le <a href="https://www.ruby-lang.org/en/conduct/">guide
          de conduite de la communauté Ruby</a>, et le <a href="https://www.rust-lang.org/en-US/conduct.html">code
          de conduite du projet Rust</a>.
      roles_responsibilities:
        description: >-
          Le projet DOIT clairement définir et documenter publiquement
          les rôles clés dans le projet et leurs responsabilités,
          y compris les tâches que ces rôles doivent accomplir.
          Il DOIT être clairement exprimé qui a quel(s) rôle(s),
          mais cela pourrait ne pas être documenté de la même
          manière.
        details: >-
          La documentation pour la <a href="#governance">gouvernance</a>
          et les rôles et responsabilités peut être à un seul
          endroit.
      access_continuity:
        description: >-
          Le projet DOIT pouvoir continuer avec une interruption
          minimale si une personne décède, est invalidée ou ne
          peut/veut plus continuer à maintenir le projet. En particulier,
          le projet DOIT être en mesure de créer et de fermer
          des problèmes, d'accepter les modifications proposées
          et de publier des versions du logiciel, dans un délai
          d'une semaine après confirmation du retrait d'un individu
          du projet. Cela PEUT être fait en s'assurant que quelqu'un
          d'autre possède les clés, les mots de passe et les droits
          juridiques nécessaires pour poursuivre le projet. Les
          personnes qui exécutent un projet FLOSS PEUVENT faire
          cela en fournissant des clés dans un coffre-fort et
          un testament fournissant les droits légaux nécessaires
          (par exemple, pour les noms DNS).
      bus_factor:
        description: Le projet DEVRAIT avoir un « bus factor »
          de 2 ou plus.
        details: >-
          Un « bus factor » (aussi connu en tant que « truck factor
          ») est le nombre minimum de membres du projet qui doivent
          disparaître soudainement d'un projet (« écrasé par un
          bus ») avant que le projet ne se bloque en raison du
          manque de personnel compétent. L'outil <a href="https://github.com/mtov/truck-factor">truck-factor</a>
          peut l'estimer pour des projets sur GitHub. Pour plus
          d'informations, voir <a href="https://www.researchgate.net/publication/272824568_assessing_the_bus_factor_of_git_repositories">Évaluation
          du « bus factor » des dépôts Git</a> par Cosentino et
          al.
      documentation_roadmap:
        description: >-
          Le projet DOIT avoir une feuille de route documentée
          qui décrit ce que le projet a l'intention de faire et
          ne pas faire pour au moins l'année suivante.
        details: >-
          Le projet pourrait ne pas atteindre la feuille de route,
          et c'est acceptable ; le but de la feuille de route
          est d'aider les utilisateurs et les contributeurs potentiels
          à comprendre l'orientation prévue du projet. Elle ne
          doit nécessairement pas être détaillée.
      documentation_architecture:
        description: >-
          Le projet DOIT inclure la documentation de l'architecture
          (aussi appelée conception de haut niveau) du logiciel
          produit par le projet. Si le projet ne produit pas de
          logiciel, sélectionnez « non applicable » (N/A).
        details: >-
          Une architecture de logiciel explique les structures
          fondamentales d'un programme, c'est-à-dire les principaux
          composants du programme, les relations entre eux et
          les propriétés clés de ces composants et de ces relations.
      documentation_security:
        description: >-
          Le projet DOIT documenter ce à quoi l'utilisateur peut
          et ne peut pas s'attendre en termes de sécurité à partir
          du logiciel produit par le projet (ses « exigences de
          sécurité »).
        details: >-
          Ce sont les exigences de sécurité que le logiciel est
          supposé remplir.
      documentation_quick_start:
        description: >-
          Le projet DOIT fournir un guide de « démarrage rapide
          » pour les nouveaux utilisateurs afin de les aider à
          faire rapidement quelque chose avec le logiciel.
        details: >-
          L'idée est de montrer aux utilisateurs comment démarrer
          et de faire en sorte que le logiciel fasse quelque chose.
          Ceci est d'une importance cruciale pour les utilisateurs
          potentiels pour les aider à démarrer.
      documentation_current:
        description: >-
          Le projet DOIT faire un effort pour maintenir la documentation
          conforme à la version actuelle des résultats du projet
          (y compris les logiciels produits par le projet). Tous
          les défauts de la documentation <em>connus</em> la rendant
          incohérente DOIVENT être corrigés. Si la documentation
          est généralement à jour, mais inclut de manière erronée
          certaines informations antérieures qui ne sont plus
          vraies, considérez cela comme un défaut, puis faites
          le suivi et corrigez comme d'habitude.
        details: >-
          La documentation PEUT inclure des informations sur les
          différences ou les modifications entre les versions
          du logiciel et/ou des liens vers les anciennes versions
          de la documentation. L'objectif de ce critère est de
          faire en sorte que la documentation soit cohérente et
          non pas que la documentation soit parfaite.
      documentation_achievements:
        description: >-
          La page d'accueil et/ou le site Web du dépôt du projet
          DOIVENT identifier et pointer tous les accomplissements,
          y compris ce badge sur les meilleures pratiques, dans
          les 48 heures suivant la reconnaissance publique que
          l'accomplissement a été atteint.
        details: >-
          Un accomplissement est un ensemble de critères externes
          que le projet a spécifiquement cherché à atteindre,
          y compris certains badges. Cette information ne doit
          pas nécessairement être sur la page d'accueil du site
          Web du projet. Un projet utilisant GitHub peut mettre
          des accomplissements sur la page d'accueil du dépôt
          en les ajoutant au fichier README.
      accessibility_best_practices:
        description: >-
          Le projet (à la fois les sites du projet et les résultats
          du projet) DEVRAIT suivre les meilleures pratiques d'accessibilité
          afin que les personnes handicapées puissent encore participer
          au projet et utiliser les résultats du projet où il
          est raisonnable de le faire.
        details: |-
          Pour les applications Web, consultez les <a href="https://www.w3.org/TR/WCAG20/">Directives d'accessibilité des contenus Web (WCAG 2.0)</a> et son document à l'appui <a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/Overview.html">Comprendre WCAG 2.0</a> ; voir aussi <a href="https://www.w3.org/standards/webdesign/accessibility">les informations d'accessibilité du W3C</a>. Pour les applications IHM, envisagez d'utiliser les directives d'accessibilité spécifiques à l'environnement (telles que <a href="https://developer.gnome.org/accessibility-devel-guide/stable/">Gnome</a>, <a href="https://accessibility.kde.org/">KDE</a>, <a href="https://docs.xfce.org/xfce/xfce4-settings/accessibility">XFCE</a>, <a href="https://developer.android.com/guide/topics/ui/accessibility/">Android</a>, <a href="https://developer.apple.com/accessibility/ios/">IOS</a>, <a href="https://www.apple.com/accessibility/osx/voiceover/">Mac</a> et <a href="https://docs.microsoft.com/fr-fr/windows/uwp/accessibility/accessibility-overview">Windows</a>). Certaines applications IHM textuelles (par exemple, les programmes « ncurses ») peuvent faire certaines choses pour se rendre plus accessibles (par exemple, le paramètre « force-arrow-cursor » de « alpine »). La plupart des applications en ligne de commande sont assez accessibles telles quelles. Ce critère est souvent N/A, par exemple, pour les bibliothèques. Voici quelques exemples d'actions à prendre ou de questions à considérer : <ul> <li>Fournir des alternatives de texte pour tout contenu non textuel afin qu'il puisse être changé en d'autres formes dont les gens ont besoin, comme une plus grande taille, le braille, une sortie vocale, des symboles ou une langue plus simple (<a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/text-equiv.html">WCAG 2.0 directive 1.1</a>)
          <li>La couleur n'est pas utilisée comme le seul moyen visuel de transmettre des informations, d'indiquer une action, de provoquer une réponse ou de distinguer un élément visuel. (<a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-without-color.html">WCAG 2.0 directive 1.4.1</a>)
          <li>La présentation visuelle du texte et des images du texte a un taux de contraste d'au moins 4,5:1, à l'exception du grand texte, du texte incident, et des logotypes (<a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html">WCAG 2.0 directive 1.4.3</a>)
          <li>Rendez toutes les fonctionnalités disponibles à partir d'un clavier (WCAG directive 2.1) <li>Une IHM ou un projet basé sur le Web DEVRAIT tester avec au moins un lecteur d'écran sur la (les) plate-forme(s) cible(s) (par exemple NVDA, Jaws ou WindowEyes sur Windows ; VoiceOver sur Mac & iOS ; Orca sous Linux/BSD ; TalkBack sur Android). Les programmes IHM textuels PEUVENT travailler à réduire le retrait excessif pour éviter la lecture redondante par les lecteurs d'écran.</ul>
      internationalization:
        description: >-
          Le logiciel produit par le projet DEVRAIT être internationalisé
          pour permettre une localisation facile pour la culture,
          la région ou la langue du public cible. Si l'internationalisation
          (i18n) ne s'applique pas (par exemple, le logiciel ne
          génère pas de texte destiné aux utilisateurs finaux
          et ne trie pas de texte lisible par les humains), sélectionnez
          « non applicable » (N/A).
        details: >-
          La localisation « réfère à l'adaptation du contenu d'un
          produit, d'une application ou d'un document pour répondre
          aux exigences linguistiques, culturelles et autres d'un
          marché cible spécifique (un lieu). » L'internationalisation
          est la « conception et le développement du contenu d'un
          produit, d'une application ou d'un document qui permette
          une localisation facile pour les publics cibles qui
          varient en culture, en région ou en langue. » (Voir
          <a href="https://www.w3.org/International/questions/qa-i18n">la
          page « Localisation ou Internationalisation » du W3C</a>.)
          Le logiciel répond à ce critère simplement en étant
          internationalisé. Aucune localisation pour une autre
          langue spécifique n'est requise, car une fois que le
          logiciel a été internationalisé, d'autres peuvent travailler
          sur la localisation.
      sites_password_security:
        description: >-
          Si les sites du projet (site Web, dépôt et URL de téléchargement)
          entreposent des mots de passe pour l'authentification
          d'utilisateurs externes, les mots de passe DOIVENT être
          entreposés comme hachages itérés avec salage par utilisateur
          en utilisant un algorithme d'étirement des clés (itéré)
          (par exemple, Argon2id, Bcrypt, Scrypt, ou PBKDF2).
          Si les sites du projet n'entreposent pas de mots de
          passe à cette fin, sélectionnez « non applicable » (N/A).
        details: >-
          Notez que l'utilisation de <a href="https://help.github.com/articles/github-security/">GitHub</a>
          répond à ce critère. Ce critère s'applique uniquement
          aux mots de passe utilisés pour l'authentification d'utilisateurs
          externes sur les sites du projet (càd l'authentification
          entrante). Si les sites du projet doivent se connecter
          à d'autres sites (càd l'authentification sortante),
          ils devront peut-être entreposer différemment des jetons
          d'identification à cette fin (puisque conserver un code
          de hachage serait inutile). Ceci applique le critère
          crypto_password_storage aux sites du projet, de manière
          similaire à sites_https.
      maintenance_or_update:
        description: >-
          Le projet DOIT maintenir les anciennes versions les
          plus utilisées du produit <em>ou</em> fournir un chemin
          de mise à niveau vers des versions plus récentes. Si
          le chemin de mise à niveau est difficile, le projet
          DOIT documenter comment effectuer la mise à niveau (par
          exemple, les interfaces qui ont changé et une suggestion
          d'étapes détaillées pour aider la mise à niveau).
      report_tracker:
        description: >-
          Le projet DOIT utiliser un suivi des problèmes pour
          le suivi des problèmes individuels.
      vulnerability_report_credit:
        description: >-
          Le projet DOIT créditer les auteurs de tous les signalements
          de vulnérabilité résolus au cours des 12 derniers mois,
          à l'exception des auteurs qui demandent l'anonymat.
          S'il n'y a pas eu de vulnérabilité résolue au cours
          des 12 derniers mois, sélectionnez « non applicable
          » (N/A).
      vulnerability_response_process:
        description: >-
          Le projet DOIT avoir un processus documenté pour répondre
          aux signalements de vulnérabilité.
        details: >-
          Ceci est fortement lié à vulnerability_report_process,
          qui exige qu'il existe un moyen documenté de signaler
          les vulnérabilités. Il a également trait à la vulnerability_report_response,
          qui nécessite une réponse aux signalements de vulnérabilité
          dans un certain laps de temps.
      coding_standards:
        description: >-
          Le projet DOIT identifier les guides de style de codage
          spécifiques pour les langages principaux qu'il utilise,
          et exiger que les contributions le respectent en général.
        details: >-
          Dans la plupart des cas, cela se fait en se référant
          à certains guides de style existants, ce qui permet
          d'énumérer les différences. Ces guides de style peuvent
          inclure des moyens d'améliorer la lisibilité et les
          moyens de réduire la probabilité de défauts (y compris
          les vulnérabilités). Beaucoup de langages de programmation
          ont un ou plusieurs guides de style largement utilisés.
          Des exemples de guides de style incluent <a href="https://github.com/google/styleguide">les
          guides de style de Google</a> et les <a href="https://www.securecoding.cert.org/">Règles
          de codage du SEI CERT</a>.
      coding_standards_enforced:
        description: >-
          Le projet DOIT imposer automatiquement son ou ses styles
          de codage sélectionnés s'il existe au moins un outil
          FLOSS qui peut le faire dans le(s) langage(s) sélectionné(s).
        details: >-
          Cela PEUT être mis en œuvre en utilisant des outils
          d'analyse statique et/ou en faisant passer le code à
          travers des outils de remise en forme. Dans de nombreux
          cas, la configuration de l'outil est incluse dans le
          dépôt du projet (car différents projets peuvent choisir
          différentes configurations). Les projets PEUVENT permettre
          des exceptions de style (et le font habituellement)
          ; là où les exceptions se produisent, elles DOIVENT
          être rares et documentées dans le code à leur emplacement,
          afin que ces exceptions puissent être revues et que
          les outils puissent les gérer automatiquement à l'avenir.
          Des exemples de tels outils incluent ESLint (JavaScript),
          Rubocop (Ruby) et <a href="https://cran.r-project.org/web/packages/devtools/index.html">devtools
          check</a> (R).
      build_standard_variables:
        description: >-
          Les systèmes de construction pour les binaires natifs
          DOIVENT honorer les variables (d'environnement) pertinentes
          du compilateur et du lieur qui leur sont transmises
          (par exemple, CC, CFLAGS, CXX, CXXFLAGS et LDFLAGS)
          et les transmettre aux invocations du compilateur et
          du lieur. Un système de construction PEUT les étendre
          avec des options supplémentaires ; il NE DOIT PAS simplement
          remplacer les valeurs fournies par les siennes. Si aucun
          fichier binaire natif n'est généré, sélectionnez « non
          applicable » (N/A).
        details: >-
          Il devrait être facile d'activer des fonctionnalités
          de construction spéciales telles que Address Sanitizer
          (ASAN), ou de se conformer aux meilleures pratiques
          de durcissement de la distribution (par exemple, en
          activant facilement les options de compilation pour
          le faire).
      build_preserve_debug:
        description: >-
          Le système de construction et d'installation DEVRAIT
          préserver les informations de débogage si elles sont
          demandées dans les options correspondants (par exemple,
          « install -s » n'est pas utilisé). S'il n'y a pas de
          système de construction ou d'installation (par exemple,
          les bibliothèques JavaScript typiques), sélectionnez
          « non applicable » (N/A).
        details: >-
          Par exemple, la définition de CFLAGS (C) ou CXXFLAGS
          (C++) devrait créer les informations de débogage pertinentes
          si ces langages sont utilisés et elles ne devraient
          pas être retirées pendant l'installation. Des informations
          de débogage sont nécessaires pour le support et l'analyse,
          et également utiles pour mesurer la présence de fonctionnalités
          de durcissement dans les binaires compilés.
      build_non_recursive:
        description: >-
          Le système de construction pour le logiciel produit
          par le projet NE DOIT PAS reconstruire de manière récursive
          des sous-répertoires s'il existe des dépendances croisées
          dans les sous-répertoires. S'il n'y a pas de système
          de construction ou d'installation (par exemple, les
          bibliothèques JavaScript typiques), sélectionnez « non
          applicable » (N/A).
        details: >-
          Les informations de dépendance internes du système de
          construction du projet doivent être précises, sinon,
          les modifications apportées au projet peuvent ne pas
          s'effectuer correctement. Des constructions incorrectes
          peuvent entraîner des défauts (y compris des vulnérabilités).
          Une erreur courante dans les grands systèmes de construction
          est d'utiliser une « construction récursive », c'est-à-dire
          une hiérarchie de sous-répertoires contenant des fichiers
          source, chaque sous-répertoire étant construit de manière
          indépendante. Sauf si chaque sous-répertoire est entièrement
          indépendant, ceci est une erreur, car les informations
          de dépendance sont incorrectes.
      build_repeatable:
        description: >-
          Le projet DOIT pouvoir répéter le processus de génération
          d'informations à partir de fichiers source et obtenir
          exactement le même résultat bit-à-bit. Si aucune construction
          ne se produit (par exemple, dans les langages de script
          où le code source est utilisé directement au lieu d'être
          compilé), sélectionnez « non applicable » (N/A).
        details: >-
          Les utilisateurs GCC et Clang peuvent trouver l'option
          -frandom-seed utile ; dans certains cas, cela peut être
          résolu en forçant un ordre de tri. Plus de suggestions
          peuvent être trouvées sur le site <a href="https://reproducible-builds.org/">pour
          une construction reproductible</a>.
      installation_common:
        description: >-
          Le projet DOIT fournir un moyen d'installer et de désinstaller
          facilement le logiciel produit par le projet en utilisant
          une convention couramment utilisée.
        details: >-
          Des exemples comprennent l'utilisation d'un gestionnaire
          de paquets (au niveau du système ou du langage), « make/install/uninstall
          » (supportant DESTDIR), un conteneur dans un format
          standard ou une image de machine virtuelle dans un format
          standard. Le processus d'installation et de désinstallation
          (par exemple, son paquetage) PEUT être mis en œuvre
          par un tiers tant qu'il est FLOSS.
      installation_standard_variables:
        description: >-
          Le système d'installation pour les utilisateurs finaux
          DOIT honorer les conventions standard pour sélectionner
          l'emplacement où les artefacts construits sont écrits
          au moment de l'installation. Par exemple, s'il installe
          des fichiers sur un système POSIX, il DOIT honorer la
          variable d'environnement DESTDIR. S'il n'y a pas de
          système d'installation ou pas de convention standard,
          sélectionnez « non applicable » (N/A).
      installation_development_quick:
        description: >-
          Le projet DOIT fournir un moyen pour les développeurs
          potentiels d'installer rapidement tous les résultats
          du projet ainsi que l'environnement nécessaire pour
          apporter des modifications, y compris les tests et l'environnement
          de test. Cela DOIT être effectué avec une convention
          couramment utilisée.
        details: >-
          Cela PEUT être implémenté à l'aide d'un conteneur généré
          et/ou d'un script d'installation. Les dépendances externes
          sont généralement installées en invoquant des gestionnaires
          de paquets du système et/ou du langage, comme précisé
          dans external_dependencies.
      external_dependencies:
        description: >-
          Le projet DOIT afficher ses dépendances externes de
          manière analysable par ordinateur.
        details: >-
          Généralement, cela se fait en utilisant les conventions
          du gestionnaire de paquets et/ou du système de construction.
          Notez que cela permet d'implémenter <a href="#installation_development_quick">installation_development_quick</a>.
      dependency_monitoring:
        description: >-
          Les projets DOIVENT surveiller ou vérifier périodiquement
          leurs dépendances externes (y compris les copies de
          commodité) pour détecter les vulnérabilités connues,
          et corriger les vulnérabilités exploitables ou les vérifier
          comme inexploitables.
        details: >-
          Cela peut se faire à l'aide d'un outil d'analyse d'origine,
          de vérification de dépendance ou d'analyse de la composition
          du logiciel tel que <a href="https://www.owasp.org/index.php/OWASP_Dependency_Check">Dependency-Check
          d'OWASP</a>, <a href="https://www.sonatype.com/nexus-auditor">Nexus
          Auditeur de Sonartype</a>, <a href="https://www.synopsys.com/software-integrity/security-testing/software-composition-analysis.html">Black
          Duck Software Composition Analysis de Synopsys</a>,
          et <a href="https://github.com/rubysec/bundler-audit">Bundler-audit
          (pour Ruby)</a>. Certains gestionnaires de paquets comprennent
          des mécanismes pour le faire. Il est acceptable que
          la vulnérabilité des composants ne puisse pas être exploitée,
          mais cette analyse est difficile et il est parfois plus
          simple de mettre à jour ou de corriger la dépendance.
      updateable_reused_components:
        description: |-
          Le projet DOIT :
          <ol>
          <li> rendre facile l'identification et la mise à jour des composants maintenus extérieurement au projet ; <strong>ou</strong> </li>
          <li> utiliser des composants standards fournis par le système ou le langage de programmation. </li>
          </ol>
          Ensuite, si une vulnérabilité se trouve dans un composant réutilisé, il sera
          facile de mettre à jour ce composant.
        details: >-
          Une façon typique de respecter ce critère est d'utiliser
          les systèmes de gestion des paquets du système et du
          langage de programmation. De nombreux programmes FLOSS
          sont distribués avec des « bibliothèques de commodité
          » qui sont des copies locales de bibliothèques standard
          (éventuellement dupliquées). En soi, c'est acceptable.
          Cependant, si le programme *doit* utiliser ces copies
          locales (dupliquées), la mise à jour des bibliothèques
          « standard » lors de mises à jour de sécurité laissera
          ces copies supplémentaires encore vulnérables. C'est
          particulièrement un problème pour les systèmes basés
          sur le cloud ; si le fournisseur du cloud met à jour
          ses librairies « standard » mais que le programme ne
          les utilise pas, les mises à jour ne vous aideront pas.
          Voir, par exemple, <a href="https://spot.livejournal.com/312320.html">«
          Chromium : pourquoi il n'est pas encore un vrai paquet
          dans Fedora » par Tom Callaway</a>.
      interfaces_current:
        description: >-
          Le projet DEVRAIT éviter d'utiliser des fonctions et
          des API obsolètes quand des alternatives FLOSS sont
          disponibles dans l'ensemble de technologies qu'il utilise
          (sa « pile de technologies ») et disponibles à une large
          majorité des utilisateurs supportés par le projet (afin
          que les utilisateurs puissent avoir accès à l'alternative).
      automated_integration_testing:
        description: >-
          Une suite de tests automatisée DOIT être appliquée à
          chaque commit dans un dépôt partagé pour au moins une
          branche. Cette suite de tests DOIT produire un rapport
          sur le succès ou l'échec du test.
        details: >-
          Cette exigence peut être considérée comme un sous-ensemble
          de test_continuous_integration, mais axée sur le simple
          test, sans nécessiter une intégration continue.
      regression_tests_added50:
        description: >-
          Le projet DOIT ajouter des tests de régression à une
          suite de tests automatisée pour au moins 50% des bogues
          corrigés au cours des six derniers mois.
      test_statement_coverage80:
        description: >-
          Le projet DOIT avoir une ou des suites de tests automatisées
          FLOSS qui fournissent une couverture d'instructions
          d'au moins 80% s'il existe au moins un outil FLOSS qui
          peut mesurer ce critère dans le langage sélectionné.
        details: >-
          De nombreux outils FLOSS sont disponibles pour mesurer
          la couverture des tests, y compris gcov/lcov, Blanket.js,
          Istanbul, JCov et <a href="https://cran.r-project.org/web/packages/covr/index.html">covr</a>
          (R). Notez que respecter ce critère n'est pas une garantie
          que la suite de tests est complète, mais, à l'inverse,
          ne pas respecter ce critère est un indicateur fort d'une
          suite de tests insuffisante.
      test_policy_mandated:
        description: >-
          Le projet DOIT avoir une politique écrite formelle,
          que dès qu'une nouvelle fonctionnalité majeure est ajoutée,
          des tests pour la nouvelle fonctionnalité DOIVENT être
          ajoutés à une suite de tests automatisée.
      tests_documented_added:
        description: >-
          Le projet DOIT inclure, dans ses instructions documentées
          pour les propositions de changement, la politique selon
          laquelle des tests doivent être ajoutés pour toute nouvelle
          fonctionnalité majeure.
      warnings_strict:
        description: >-
          Les projets DOIVENT être maximalement stricts avec les
          avertissements dans le logiciel produit par le projet,
          quand cela est approprié.
      implement_secure_design:
        description: >-
          Le projet DOIT implémenter des principes de conception
          sécurisés (à partir de « know_secure_design »), quand
          cela est approprié. Si le projet ne produit pas de logiciel,
          sélectionnez « non applicable » (N/A).
        details: >-
          Par exemple, les résultats du projet devraient avoir
          des valeurs sécurisées par défaut (les décisions d'accès
          devraient être de refuser par défaut et l'installation
          des projets devrait être sécurisée par défaut). Ils
          devraient également avoir une médiation complète (tout
          accès qui pourrait être limité doit être vérifié pour
          l'autorité et être non contournable). Notez que, dans
          certains cas, ces principes entrent en conflit, auquel
          cas un choix doit être fait (par exemple, de nombreux
          mécanismes peuvent rendre les choses plus complexes,
          en contravention de « l'économie de mécanisme » / principe
          KISS).
      input_validation:
        description: >-
          Les résultats du projet DOIVENT vérifier toutes les
          entrées provenant de sources potentiellement non fiables
          pour s'assurer qu'elles sont valides (une <em>liste
          blanche</em>) et rejeter les entrées non valides, en
          cas de restrictions sur les données.
        details: >-
          Notez que la comparaison de l'entrée par rapport à une
          liste de « mauvais formats » (aussi appelée <em>liste
          noire</em>) n'est normalement pas suffisante, car les
          attaquants peuvent souvent contourner une liste noire.
          En particulier, les nombres sont convertis en formats
          internes puis vérifiés pour s'assurer s'ils se situent
          entre leur minimum et maximum (inclus), et les chaînes
          de texte sont vérifiées pour s'assurer qu'elles sont
          des motifs de texte valides (par exemple, UTF-8 valide,
          longueur valide, syntaxe valide, etc.). Certaines données
          peuvent avoir besoin d'être « du tout venant » (par
          exemple, un téléchargement de fichier), mais celles-ci
          sont généralement rares.
      hardening:
        description: >-
          Les mécanismes de durcissement DOIVENT être utilisés
          dans le logiciel produit par le projet afin que les
          défauts du logiciel soient moins susceptibles d'entraîner
          des vulnérabilités de sécurité.
        details: >-
          Les mécanismes de durcissement peuvent inclure des en-têtes
          HTTP comme Content Security Policy (CSP), des options
          de compilation pour atténuer les attaques (telles que
          -fstack-protector) ou des options de compilation pour
          éliminer les comportements indéfinis. Pour nos besoins,
          le principe de plus faible privilège n'est pas considéré
          comme un mécanisme de durcissement (le principe de plus
          faible privilège est important, mais séparé).
      crypto_weaknesses:
        description: >-
          Les mécanismes de sécurité par défaut dans le logiciel
          produit par le projet NE DOIVENT PAS dépendre d'algorithmes
          ou de modes cryptographiques avec des faiblesses sérieuses
          connues (par exemple, l'algorithme de hachage cryptographique
          SHA-1 ou le mode CBC en SSH).
      crypto_algorithm_agility:
        description: >-
          Le projet DEVRAIT supporter plusieurs algorithmes cryptographiques,
          afin que les utilisateurs puissent rapidement changer
          si l'un deux est cassé. Les algorithmes à clés symétriques
          courants incluent AES, Twofish et Serpent. Les alternatives
          d'algorithme de hachage cryptographique courantes incluent
          SHA-2 (y compris SHA-224, SHA-256, SHA-384 ET SHA-512)
          et SHA-3.
      crypto_credential_agility:
        description: >-
          Le projet DOIT supporter le stockage des informations
          d'authentification (comme les mots de passe et les jetons
          dynamiques) et des clés cryptographiques privées dans
          des fichiers distincts des autres informations (fichiers
          de configuration, bases de données et journaux) et permettre
          aux utilisateurs de les mettre à jour et de les remplacer
          sans recompilation de code. Si le projet ne traite jamais
          d'informations d'authentification et de clés cryptographiques
          privées, sélectionnez « non applicable » (N/A).
      crypto_used_network:
        description: >-
          Le logiciel produit par le projet DEVRAIT supporter
          des protocoles sécurisés pour toutes ses communications
          réseau, tels que SSHv2 ou ultérieur, TLS1.2 ou ultérieur
          (HTTPS), IPsec, SFTP et SNMPv3. Les protocoles non sûrs
          tels que FTP, HTTP, telnet, SSLv3 ou antérieur, et SSHv1
          DEVRAIENT être désactivés par défaut et uniquement activés
          si l'utilisateur le configure spécifiquement. Si le
          logiciel produit par le projet ne prend pas en charge
          les communications réseau, sélectionnez « non applicable
          » (N/A).
      crypto_tls12:
        description: >-
          Le logiciel produit par le projet DEVRAIT, s'il prend
          en charge ou utilise TLS, prendre en charge au moins
          TLS version 1.2. Notez que le prédécesseur de TLS s'appelait
          SSL. Si le logiciel n'utilise pas TLS, sélectionnez
          « non applicable » (N/A).
      crypto_certificate_verification:
        description: >-
          Le logiciel produit par le projet DOIT, s'il prend en
          charge TLS, effectuer la vérification des certificats
          TLS par défaut lors de l'utilisation de TLS, y compris
          sur les sous-ressources. Si le logiciel n'utilise pas
          TLS, sélectionnez « non applicable » (N/A).
        details: >-
          Notez que la vérification incorrecte du certificat TLS
          est une erreur courante. Pour plus d'informations, voir
          <a href="https://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html">«
          Le code le plus dangereux du monde : la validation des
          certificats SSL dans du logiciel qui ne vient pas d'un
          navigateur » de Martin Georgiev et al.</a> et <a href="https://blogs.gnome.org/mcatanzaro/2016/03/12/do-you-trust-this-application/">«
          Avez-vous confiance en cette application ? » par Michael
          Catanzaro</a>.
      crypto_verification_private:
        description: >-
          Le logiciel produit par le projet DOIT, s'il supporte
          TLS, effectuer une vérification de certificat avant
          d'envoyer des en-têtes HTTP avec des informations privées
          (telles que des cookies sécurisés). Si le logiciel n'utilise
          pas TLS, sélectionnez « non applicable » (N/A).
      signed_releases:
        description: >-
          Le projet DOIT signer cryptographiquement les versions
          des résultats du projet destinées à une utilisation
          répandue, et il DOIT y avoir un processus documenté
          expliquant aux utilisateurs comment ils peuvent obtenir
          les clés de signature publique et vérifier la ou les
          signatures. La clé privée pour ces signature(s) NE DOIT
          PAS être sur le(s) site(s) utilisé(s) pour distribuer
          directement le logiciel au public. Si les versions ne
          sont pas destinées à une utilisation répandue, sélectionnez
          « non applicable » (N/A).
        details: >-
          Les résultats du projet incluent à la fois le code source
          et les produits livrés générés, le cas échéant (par
          exemple, les exécutables, les paquetages et les conteneurs).
          Les livrables générés PEUVENT être signés séparément
          du code source. Ces signatures PEUVENT être mises en
          œuvre sous forme de tags git signées (utilisant des
          signatures numériques cryptographiques). Les projets
          PEUVENT fournir des résultats générés séparément d'outils
          comme git, mais dans ce cas, les résultats distincts
          DOIVENT être signés séparément.
      version_tags_signed:
        description: >-
          Il est PROPOSÉ que, dans le système de contrôle de la
          version, chaque tag d'une version importante (un tag
          faisant partie d'une version majeure, d'une version
          mineure ou qui corrige des vulnérabilités notées publiquement)
          soit cryptographiquement signé et vérifiable comme décrit
          dans <a href="#signed_releases">signed_releases</a>.
      static_analysis_common_vulnerabilities:
        description: >-
          Le projet DOIT utiliser au moins un outil d'analyse
          statique avec des règles ou des approches pour rechercher
          des vulnérabilités courantes dans le langage ou l'environnement
          analysé, s'il existe au moins un outil FLOSS qui peut
          mettre en œuvre ce critère dans le langage sélectionné.
      dynamic_analysis_unsafe:
        description: >-
          <em>Si</em> le logiciel produit par le projet inclut
          un logiciel écrit à l'aide d'un langage non sûr pour
          les accès mémoire (par exemple C ou C++), <em>alors</em>
          le projet DOIT utiliser au moins un outil dynamique
          (par exemple, un fuzzer ou un scanneur d'application
          Web) utilisé de manière routinière en combinaison avec
          un mécanisme permettant de détecter des problèmes de
          sécurité mémoire tels que les dépassement mémoire. Si
          le projet ne produit pas de logiciel écrit dans un langage
          non sûr pour les accès mémoire, sélectionnez « non applicable
          » (N/A).
      assurance_case:
        description: >-
          Le projet DOIT fournir une analyse de fiabilité qui
          justifie pourquoi ses exigences de sécurité sont respectées.
          L'analyse de fiabilité DOIT inclure : une description
          du modèle de menace, une identification claire des limites
          de confiance, un argument selon lequel des principes
          de conception sécurisés ont été appliqués et un argument
          selon lequel les faiblesses de sécurité courantes de
          l'implémentation ont été contrées.
        details: >-
          Une analyse de fiabilité est « une preuve documentée
          qui fournit un argumentaire convaincant et correct selon
          lequel un ensemble spécifié de revendications critiques
          concernant les propriétés d'un système est adéquatement
          justifié pour une application donnée dans un environnement
          donné » (<a href="https://www.nist.gov/publications/software-assurance-using-structured-assurance-case-models">«
          Software Assurance Using Structured Assurance Case Models
          », Thomas Rhodes et al, NIST Interagency Report 7608</a>).
          Les limites de confiance sont des limites où les données
          ou l'exécution modifient leur niveau de confiance, par
          exemple, les limites d'un serveur dans une application
          Web typique. Il est fréquent d'énumérer des principes
          de conception sécurisés (tels que Saltzer et Schroeer)
          et des faiblesses de sécurité courantes de l'implémentation
          (comme le OWASP top 10 ou le CWE/SANS top 25) et de
          montrer comment chacun est contré. L'<a href="https://github.com/coreinfrastructure/best-practices-badge/blob/master/doc/security.md">analyse
          de fiabilité de BadgeApp</a> peut être un exemple utile.
          Ceci est lié à documentation_security, documentation_architecture
          et implement_secure_design.
      achieve_passing:
        description: Le projet DOIT atteindre un badge de niveau
          basique.
    '2':
      bus_factor:
        description: Le projet DOIT avoir un « facteur bus » de
          2 ou plus.
      contributors_unassociated:
        description: >-
          Le projet DOIT avoir au moins deux contributeurs significatifs
          non associés.
        details: >-
          Les contributeurs sont associés s'ils sont payés pour
          leur travail par la même organisation (en tant qu'employé
          ou contractuel) et si l'organisation bénéficie des résultats
          du projet. Les subventions financières ne comptent pas
          comme provenant de la même organisation si elles passent
          par d'autres organisations (par exemple, les subventions
          scientifiques versées à différentes organisations par
          un même gouvernement ou ONG ne rendent pas les contributeurs
          associés). Quelqu'un est un contributeur significatif
          s'il a apporté des contributions non triviales au projet
          au cours de la dernière année. Des exemples de bons
          indicateurs d'un contributeur significatif sont : écrit
          au moins 1 000 lignes de code, a contribué à 50 commits
          ou au moins 20 pages de documentation.
      copyright_per_file:
        description: >-
          Le projet DOIT inclure une déclaration de droit d'auteur
          dans chaque fichier source, identifiant le détenteur
          du droit d'auteur (par exemple, les contributeurs de
          [nom du projet]).
        details: >-
          Cela PEUT être fait en incluant ce qui suit à l'intérieur
          d'un commentaire au début de chaque fichier: « <tt>Copyright
          les contributeurs de [nom du projet].</tt> ». Voir <a
          href="https://www.linuxfoundation.org/blog/2020/01/copyright-notices-in-open-source-software-projects/">«
          Avis de droits d'auteur dans les projets de logiciels
          Open Source » par Steve Winslow</a>.
      license_per_file:
        description: >-
          Le projet DOIT inclure une déclaration de licence dans
          chaque fichier source. Cela PEUT être fait en incluant
          ce qui suit à l'intérieur d'un commentaire au début
          de chaque fichier : <a href="https://spdx.dev/ids/#how"><tt>SPDX-License-Identifier
          : [expression d'une licence SPDX pour le projet]</tt></a>.
        details: >-
          Cela PEUT également être fait en incluant une déclaration
          en langage naturel identifiant la licence. Le projet
          PEUT également inclure une URL stable indiquant le texte
          de la licence ou directement le texte complet de la
          licence. Notez que le critère license_location requiert
          que la licence du projet soit dans un emplacement standard.
          Voir <a href="https://github.com/david-a-wheeler/spdx-tutorial">ce
          didacticiel SPDX</a> pour plus d'informations sur les
          expressions de licence SPDX. Notez la relation avec
          <a href="#copyright_per_file">copyright_per_file</a>,
          dont le contenu devrait généralement précéder les informations
          sur la licence.
      repo_distributed:
        description: >-
          Le dépôt source du projet DOIT utiliser un logiciel
          courant de contrôle de version distribué (par exemple,
          git ou mercurial).
      small_tasks:
        description: >-
          Le projet DOIT identifier clairement les petites tâches
          qui peuvent être effectuées par des contributeurs nouveaux
          ou occasionnels.
        details: >-
          Cette identification se fait typiquement en marquant
          les problèmes sélectionnés dans un outil de suivi de
          problèmes avec une ou plusieurs étiquettes que le projet
          utilise à cet effet, par exemple <a href="https://up-for-grabs.net/#/">up-for-grabs</a>,
          <a href="https://www.firsttimersonly.com/">first-timers-only</a>,
          « Small fix », microtask ou IdealFirstBug. Ces nouvelles
          tâches n'ont pas besoin d'ajouter des fonctionnalités
          ; elles peuvent améliorer la documentation, ajouter
          des cas de test ou toute autre chose qui aide le projet
          et aide le contributeur à en comprendre davantage sur
          le projet.
      require_2FA:
        description: >-
          Le projet DOIT exiger l'authentification à deux facteurs
          (2FA) des développeurs pour changer un dépôt central
          ou accéder à des données sensibles (telles que des signalements
          de vulnérabilités privés). Ce mécanisme 2FA PEUT utiliser
          des mécanismes sans mécanismes cryptographiques tels
          que SMS, mais cela n'est pas recommandé.
      secure_2FA:
        description: >-
          L'authentification à deux facteurs du projet (2FA) DOIT
          utiliser des mécanismes cryptographiques pour empêcher
          l'emprunt d'identité. Une 2FA basée sur un service de
          messages courts (SMS), par elle-même, ne satisfait PAS
          à ce critère, car elle n'est pas chiffrée.
        details: >-
          Un mécanisme 2FA qui répond à ce critère serait une
          application de mot de passe à usage unique basé sur
          le temps (TOTP) qui génère automatiquement un code d'authentification
          qui change après un certain laps de temps. Notez que
          <a href="https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/">GitHub
          prend en charge TOTP</a>.
      code_review_standards:
        description: >-
          Le projet DOIT documenter ses exigences en matière de
          revue de code, y compris la façon dont la revue de code
          est menée, ce qui doit être vérifié et ce qui est requis
          pour être acceptable.
        details: >-
          Voir aussi <a href="#two_person_review">two_person_review</a>
          et contribution_requirements.
      two_person_review:
        description: >-
          Le projet DOIT avoir au moins 50% de toutes les modifications
          proposées revues avant la sortie par une personne autre
          que l'auteur, afin de déterminer s'il s'agit d'une modification
          valable et sans problèmes connus qui risqueraient de
          s'opposer à son inclusion.
      build_reproducible:
        description: >-
          Le projet DOIT avoir une <a href="https://reproducible-builds.org/">construction
          reproductible</a>. Si aucune construction ne se produit
          (par exemple, les langages de script où le code source
          est utilisé directement au lieu d'être compilé), sélectionnez
          « non applicable » (N/A).
        details: >-
          Une construction reproductible signifie que plusieurs
          parties peuvent refaire indépendamment le processus
          de génération d'informations à partir de fichiers source
          et obtenir exactement le même résultat bit-à-bit. Dans
          certains cas, cela peut être résolu en forçant un ordre
          de tri. Les développeurs JavaScript peuvent envisager
          d'utiliser npm shrinkwrap et webpack OccurenceOrderPlugin.
          Les utilisateurs GGC et clang peuvent trouver l'option
          -frandom-seed utile. L'environnement de construction
          (y compris le jeu d'outils) peut souvent être défini
          pour les parties externes en spécifiant le hachage cryptographique
          d'un conteneur spécifique ou d'une machine virtuelle
          qu'ils peuvent utiliser pour la reconstruction. Le <a
          href="https://reproducible-builds.org/docs/">projet
          de construction reproductible dispose de documentation
          sur la façon de le faire</a>.
      test_invocation:
        description: >-
          Une suite de tests DOIT être invocable d'une manière
          standard pour ce langage.
      test_continuous_integration:
        description: >-
          Le projet DOIT utiliser une intégration continue, où
          le code nouveau ou modifié est fréquemment intégré dans
          un dépôt de code central et des tests automatisés sont
          exécutés sur le résultat.
        details: >-
          Dans la plupart des cas, cela signifie que chaque développeur
          qui travaille à plein temps sur le projet intègre son
          code au moins tous les jours.
      test_statement_coverage90:
        description: >-
          Le projet DOIT avoir une ou des suites de tests automatisées
          FLOSS qui fournissent une couverture d'instructions
          d'au moins 90% s'il existe au moins un outil FLOSS qui
          peut mesurer ce critère dans le langage sélectionné.
      test_branch_coverage80:
        description: >-
          Le projet DOIT avoir une ou des suites de tests automatisées
          FLOSS qui fournissent une couverture de branche d'au
          moins 80% s'il existe au moins un outil FLOSS qui peut
          mesurer ce critère dans le langage sélectionné.
      crypto_used_network:
        description: >-
          Le logiciel produit par le projet DOIT supporter des
          protocoles sécurisés pour toutes ses communications
          réseau, tels que SSHv2 ou ultérieur, TLS1.2 ou ultérieur
          (HTTPS), IPsec, SFTP et SNMPv3. Les protocoles non sûrs
          tels que FTP, HTTP, telnet, SSLv3 ou antérieur, et SSHv1
          DOIVENT être désactivés par défaut et uniquement activés
          si l'utilisateur le configure spécifiquement. Si le
          logiciel produit par le projet ne prend pas en charge
          les communications réseau, sélectionnez « non applicable
          » (N/A).
      crypto_tls12:
        description: >-
          Le logiciel produit par le projet DOIT, s'il prend en
          charge ou utilise TLS, prendre en charge au moins TLS
          version 1.2. Notez que le prédécesseur de TLS s'appelait
          SSL. Si le logiciel n'utilise pas TLS, sélectionnez
          « non applicable » (N/A).
      hardened_site:
        description: >-
          Le site Web du projet, le dépôt (s'il est accessible
          via le Web) et le site de téléchargement (si séparé)
          DOIVENT inclure des en-têtes clés de durcissement avec
          des valeurs non admises.
        details: >-
          Notez que GitHub et GitLab sont connus pour le faire.
          Des sites tels que https://securityheaders.com/ peuvent
          le vérifier rapidement. Les en-têtes clés de durcissement
          sont : Content Security Policy (CSP), HTTP Strict Transport
          Security (HSTS), X-Content-Type-Options (comme « nosniff
          ») et X-Frame-Options. Les sites Web complètement statiques
          sans possibilité de se connecter à travers les pages
          Web peuvent éventuellement omettre certains entêtes
          de durcissement avec moins de risques, mais il n'existe
          aucune manière fiable de détecter ces sites, donc nous
          exigeons ces en-têtes mêmes pour les sites complètement
          statiques.
      security_review:
        description: >-
          Le projet DOIT avoir effectué une évaluation de la sécurité
          au cours des 5 dernières années. Cette revue DOIT prendre
          en considération les exigences de sécurité et les limites
          de sécurité.
        details: >-
          Cela PEUT être fait par les membres du projet et/ou
          une évaluation indépendante. Cette évaluation PEUT être
          soutenue par des outils d'analyse statiques et dynamiques,
          mais il doit aussi y avoir une revue par des humains
          pour identifier les problèmes (en particulier dans la
          conception) que les outils ne peuvent pas détecter.
      hardening:
        description: >-
          Des mécanismes de durcissement DOIVENT être utilisés
          dans le logiciel produit par le projet afin que les
          défauts du logiciel soient moins susceptibles d'entraîner
          des vulnérabilités de sécurité.
      dynamic_analysis:
        description: >-
          Le projet DOIT appliquer au moins un outil d'analyse
          dynamique à tout candidat pour une version majeure du
          logiciel produit par le projet avant sa sortie.
      dynamic_analysis_enable_assertions:
        description: >-
          Le projet DEVRAIT inclure de nombreuses assertions à
          l'exécution dans le logiciel qu'il produit, et vérifier
          ces assertions lors d'une analyse dynamique.
      achieve_silver:
        description: Le projet DOIT atteindre un badge de niveau
          argent.
  static_pages:
    home:
      badge_program: Programme de badge des meilleures pratiques
        de la OpenSSF
      get_your_badge: Obtenez votre badge immédiatement !
      p1_html: |-
        Le programme de badge des meilleures pratiques de
        la Open Source Security Foundation (OpenSSF) de la <a href="https://www.linuxfoundation.org/">Fondation Linux</a> est un moyen pour les projets de logiciel libre (FLOSS) de montrer qu'ils suivent les meilleures pratiques de développement. Les projets peuvent s'auto-évaluer de manière volontaire, sans frais, en utilisant cette application Web pour expliquer comment ils suivent chacune des meilleures pratiques. Le programme de badge des meilleures pratiques de la OpenSSF s'inspire des nombreux badges disponibles aux projets sur GitHub. Les consommateurs du badge peuvent évaluer rapidement quels projets de logiciel libre suivent les meilleures pratiques et, par conséquent, sont plus susceptibles de produire des logiciels sûrs et de meilleure qualité.
      p2_html: |-
        Vous pouvez facilement voir les <a href="/fr/criteria/0">critères pour le badge basique</a>. Plus d'informations sur le programme de badge
        des meilleures pratiques de la OpenSSF sont
        <a href='https://github.com/coreinfrastructure/best-practices-badge'>disponibles sur GitHub</a>.
        <a href="/fr/project_stats">Les statistiques des projets</a> et
        <a href="/fr/criteria_stats">les statistiques sur les critères</a> sont
        disponibles.  La <a href="/fr/projects">page des projets</a> liste les
        projets participants et permet des requêtes (par exemple, vous
        pouvez y voir
        <a href="/fr/projects?gteq=100">les projets ayant obtenu le
        badge basique</a>). Vous pouvez également y voir
        <a href='/fr/projects/1/0'>un exemple (où nous essayons
        d'obtenir notre propre badge)</a>. Ce projet était connu à l'origine comme le projet de Badge des Meilleures Pratiques de la Core Infrastructure Initiative (CII), et a été développé à l'origine dans le cadre de la CII. Il fait maintenant partie du <a href="https://github.com/ossf/wg-best-practices-os-developers">Groupe de travail (GT) sur les meilleures pratiques</a> de l'<a href="https://openssf.org/">Open Source Security Foundation (OpenSSF)</a>. OpenSSF est une fondation de la <a href="https://www.linuxfoundation.org/">Fondation Linux</a>. Le projet a été formellement renommé depuis le « Badge des Meilleures Pratiques de la CII » le 2021-12-24.
      p3_html: >-
        <em>Confidentialité et problèmes juridiques</em> : Consultez
        notre <a href="https://www.linuxfoundation.org/privacy">politique
        de confidentialité</a>,  <a href="/fr/cookies">à propos
        des cookies</a> et nos <a href="https://www.linuxfoundation.org/terms">conditions
        d'utilisation</a>. Le code de l'application de badge elle-même
        est distribué sous licence <a href="https://opensource.org/licenses/MIT">MIT</a>
        (les projets soumis pour un badge sont sous leur licence
        respectives). Tous les contenus publiquement disponibles
        de l'application de badge qui ne sont pas sous forme de
        code sont publiés sous la license <a href="https://creativecommons.org/licenses/by/3.0/">Creative
        Commons Attribution License version 3.0 (CC-BY-3.0)</a>
        ou plus permissive ; les contenus similaires plus récents
        sont diffusés sous la licence CC-BY version 3.0 ou ultérieure
        (CC-BY-3.0+).  Pour faire référence globalement à ces
        contenus, ou en l'absence d'instructions spécifiques,
        veuillez mentionner comme source les contributeurs du
        programme de badge des meilleures pratiques de la OpenSSF.
      check_us_out: >-
        Consultez le site Web du badge des meilleures pratiques
        de la OpenSSF !
      share_header_html: "<p> Merci de partager ceci : </p>"
      twitter: Twitter
      reddit: Reddit
      facebook: Facebook
      linkedin: LinkedIn
      email: Email
      projects_earned_badge: 'Quelques possesseurs de badges :'
      hacker_news: Hacker News
    cookies:
      cookies_header: À propos des cookies
      cookies_info_html: >-
        <p>Pour que ce site fonctionne correctement, nous plaçons
        parfois de petits fichiers de données appelés cookies
        sur votre appareil. De nombreux sites font cela. </p>
        <p>Un cookie est un petit fichier texte qu'un site Web
        enregistre sur votre ordinateur (y compris votre appareil
        mobile) lorsque vous visitez le site. Il permet au site
        Web de se souvenir de vos actions et de vos préférences
        (telles que l'identifiant de connexion, la langue, la
        taille de la police et d'autres préférences d'affichage)
        sur une période donnée. Vous n'avez donc pas à les saisir
        à chaque fois que vous revenez sur le site ou que vous
        naviguez d'une page à l'autre. Les cookies sont une partie
        standard du protocole HTTP qui implémente le World Wide
        Web (WWW) et sont spécifiés dans <a href="https://tools.ietf.org/html/rfc6265">RFC
        6265</a>. </p> <p> Nous utilisons des cookies de « session
        » propriétaires lorsque vous vous connectez. Par définition,
        les cookies de session sont conçus pour expirer lorsque
        vous quittez votre navigateur ou que vous vous déconnectez.
        Si vous activez « Rester connecté » (alias « Se souvenir
        de moi »), nous stockons également les informations dans
        un cookie « permanent » de votre navigateur afin que nous
        puissions vous reconnecter automatiquement lorsque vous
        visitez notre site, même après que vous ayez quitter votre
        navigateur. Si vous choisissez d'utiliser d'autres sites
        (tels que GitHub) pour l'authentification sur ce site,
        alors cet autre site utilisera probablement des cookies
        (et donc ce qu'ils font avec les cookies s'appliquera
        également). Veuillez noter que nous ne pouvons pas contrôler
        ce que font les autres sites. </p> <p> Les cookies que
        nous définissons ne sont utilisés que pour prendre en
        charge les fonctionnalités liées à ce site. Le consentement
        peut être retiré - il suffit de supprimer les cookies
        sur votre navigateur. Vous pouvez contrôler et/ou supprimer
        les cookies comme vous le souhaitez. Pour plus de détails,
        voir <a href="https://www.aboutcookies.org">cookies.org</a>.
        Vous pouvez supprimer tous les cookies qui sont déjà sur
        votre ordinateur et vous pouvez configurer la plupart
        des navigateurs pour les empêcher d'être placés. Si vous
        faites cela, cependant, vous devrez peut-être ajuster
        manuellement certaines préférences chaque fois que vous
        visitez un site et certains services et fonctionnalités
        peuvent ne pas fonctionner. En particulier, la connexion
        à ce site dépend des cookies de session (sur ce site et
        sur beaucoup d'autres sites). </p> <p> Ce texte est destiné
        à être conforme aux « lois sur les cookies » du Royaume-Uni
        et de l'UE. </p>
    error_404:
      heading: Erreur 404 - Page non trouvée
      no_such_page: Désolé, cette page n'existe pas.
      please_home: Allez s'il vous plaît à la page d'accueil.
    criteria_stats:
      criteria: Statistiques des critères
      project_stats_html: |-
        Les critères « actifs » sont ceux qui sont inclus dans les calculs de pourcentages (contrairement aux critères « futurs »). Les colonnes suivantes identifient le nombre de critères actifs à chaque niveau qui DOIVENT, DEVRAIENT ou PEUVENT être respectés, qui autorisent « N/A » comme réponse, qui requièrent une URL, qui incluent des détails, ou qui sont nouveaux à ce niveau. Les critères « futurs » sont affichés sur le formulaire, et devraient être ajoutés comme critères actifs à un certain niveau dans le futur, mais ne sont pas inclus dans les calculs de complétion. <br><br>
        Vous pouvez voir des statistiques sur les projets au cours du temps sur la <a href="/fr/project_stats">page des statistiques du projet</a>.
      level: Niveau
      must: DOIT
      should: DEVRAIT
      suggested: PROPOSÉ
      total_active: Total actif
      allow_na: Autoriser N/A
      require_url: Exiger une URL
      details: Comprend des détails
      future: Futur
      new_this_level: Nouveau à ce niveau
      met_justification_required: Justification requise
      met_justification_or_url_required: Justification ou URL
        requise
      see_actual_criteria: Vous pouvez également voir les critères
        réels.
    error_409:
      heading: 'Erreur 409 : conflit'
      conflict: >-
        Désolé, plusieurs entrées correspondent à la demande,
        ce qui entraîne un conflit.
  headings:
    Accessibility and internationalization: Accessibilité et internationalisation
    Analysis: Analyse
    Automated test suite: Suite de tests automatisée
    Basic project website content: Contenu basique du site Web
      du projet
    Basics: Notions de base
    Bug-reporting process: Procédure de signalement des bogues
    Change Control: Contrôle des modifications
    Coding standards: Normes de codage
    Documentation: Documentation
    Dynamic code analysis: Analyse dynamique de code
    Externally-maintained components: Composants maintenus à l'extérieur
    Future: Futur
    future: futur
    Installation system: Système d'installation
    New functionality testing: Nouveau test de fonctionnalité
    Other: Autre
    Other security issues: Autres problèmes de sécurité
    Previous versions: Versions précédentes
    Project oversight: Supervision du projet
    Public version-controlled source repository: Dépôt source
      public sous contrôle de version
    Publicly known vulnerabilities fixed: Vulnérabilités publiquement
      identifiées et corrigées
    Quality: Qualité
    Release notes: Notes de version
    Reporting: Compte-rendu
    Secure development knowledge: Connaissance du développement
      sécurisé
    Secure release: Livraison sécurisée
    Secured delivery against man-in-the-middle (MITM) attacks: >-
      Livraison sécurisée contre les attaques man-in-the-middle
      (MITM)
    Security: Sécurité
    Static code analysis: Analyse statique de code
    Unique version numbering: Numérotation unique de la version
    Use basic good cryptographic practices: Utiliser de bonnes
      pratiques de base de cryptographie
    Vulnerability report process: Processus de signalement de
      vulnérabilité
    Warning flags: Options d'avertissement
    Working build system: Système de construction opérationnel
    Identification: Identification
    Prerequisites: Conditions préalables
    FLOSS license: Licence FLOSS
  last_entry: Dernière entrée de traduction
  admin_only: Admin seulement.
  criterion_status:
    Met: Atteint
    Unmet: Non atteint
    NA: N/A
  error_messages:
    need_home_page_or_url: >-
      Au minimum une page d'accueil ou une URL de dépôt est nécessaire
    form_contains:
      one: Le formulaire contient 1 erreur.
      other: Le formulaire contient %{count} erreurs.
      few: Le formulaire contient %{count} erreurs.
      many: Le formulaire contient %{count} erreurs.
    not_an_email: " n'est pas un email"
    known_bad_password: " est un (mauvais) mot de passe bien connu"
    valid_text: |2-
       doit avoir un codage UTF-8 valide et aucun caractère de
      contrôle invalide
    url_message: |2-
       doit commencer par http: ou https: et utiliser un jeu de caractères
          limité
  criteria_overall:
    beginning_header_all: Critères des meilleures pratiques FLOSS
      (tous les niveaux)
    beginning_header_0: Critères des meilleures pratiques FLOSS
      (niveau basique)
    beginning_header_1: Critères des meilleures pratiques FLOSS
      (niveau Argent)
    beginning_header_2: Critères des meilleures pratiques FLOSS
      (niveau Or)
    beginning_all_html: >-
      <p> Il s'agit de l'ensemble des meilleures pratiques pour
      les projets de logiciels libres et open source (FLOSS) pour
      obtenir les badges des meilleures pratiques de la Open Source
      Security Foundation (OpenSSF) aux niveaux basique, argent
      et or. Vous pouvez afficher cette liste avec <a href="/fr/criteria">uniquement
      les critères</a> ou avec <a href="/fr/criteria?details=true&rationale=true">des
      informations supplémentaires</a>. Vous pouvez également
      afficher uniquement les critères du niveau <a href="/fr/criteria/0">basique</a>
      , <a href="/fr/criteria/1">argent</a> et <a href="/fr/criteria/2">or</a>,
      ainsi que les <a href="/fr/criteria_stats">statistiques
      des critères</a>.
    beginning_0_html: >-
      <p> Il s'agit de l'ensemble des meilleures pratiques pour
      les projets de logiciels libres et open source (FLOSS) pour
      obtenir le badge des meilleures pratiques de la Open Source
      Security Foundation (OpenSSF) au niveau basique. Vous pouvez
      afficher cette liste avec <a href="/fr/criteria/0">uniquement
      les critères</a> ou avec <a href="/fr/criteria/0?details=true&rationale=true">des
      informations supplémentaires</a>. <a href="/fr/criteria">L'ensemble
      complet des critères pour tous les niveaux de badge</a>
      est également disponible.
    beginning_1_html: >-
      <p> Il s'agit de l'ensemble des meilleures pratiques pour
      les projets de logiciels libres et open source (FLOSS) pour
      obtenir le badge des meilleures pratiques de la Open Source
      Security Foundation (OpenSSF) au niveau argent. Vous pouvez
      afficher cette liste avec <a href="/fr/criteria/1">uniquement
      les critères</a> ou avec <a href="/fr/criteria/1?details=true&rationale=true">des
      informations supplémentaires</a>. <a href="/fr/criteria">L'ensemble
      complet des critères pour tous les niveaux de badge</a>
      est également disponible.
    beginning_2_html: >-
      <p> Il s'agit de l'ensemble des meilleures pratiques pour
      les projets de logiciels libres et open source (FLOSS) pour
      obtenir le badge des meilleures pratiques de la Open Source
      Security Foundation (OpenSSF) au niveau or. Vous pouvez
      afficher cette liste avec <a href="/fr/criteria/2">uniquement
      les critères</a> ou avec <a href="/fr/criteria/2?details=true&rationale=true">des
      informations supplémentaires</a>. <a href="/fr/criteria">L'ensemble
      complet des critères pour tous les niveaux de badge</a>
      est également disponible.
    see_discussion_html: >-
      <p> Voir la <a href="/fr/criteria_discussion">discussion
      des critères</a> pour plus d'informations sur ces critères.
    future: "{Futur}"
    na_allowed: "{N/A autorisé}"
    na_justification_required: "{N/A justification}"
    met_justification_required: "{Atteint justification}"
    met_url_required: "{Atteint URL}"
  criteria_discussion:
    intro_p01_html: >-
      <h1 id='criteria_discussion'>Discussion sur les critères</h1>
    intro_p02_html: >-
      <p> Il n’existe aucun ensemble de pratiques pouvant <i>garantir</i>
      que les logiciels ne présenteront jamais de défauts ou de
      vulnérabilités. Même les méthodes formelles peuvent échouer
      si les spécifications ou les hypothèses sont erronées. Il
      n’existe pas non plus d’ensemble de pratiques garantissant
      qu’un projet maintiendra une communauté de développement
      saine et qui fonctionne bien. </p>
    intro_p03_html: |-
      <p> Cependant,
      suivre certaines meilleures pratiques peut aider à améliorer les résultats des projets. Par exemple, certaines pratiques permettent un examen par plusieurs personnes avant la publication, ce qui peut à la fois aider à trouver des vulnérabilités techniques autrement difficiles à trouver et à renforcer la confiance et le désir d'interactions répétées entre les développeurs de différentes organisations. </p>
    intro_p04_html: >-
      <p> Cette page présente l'ensemble des meilleures pratiques
      pour les projets de logiciels libres et open source (FLOSS)
      développé pour le badge des meilleures pratiques de la Open
      Source Security Foundation (OpenSSF). Les projets qui suivent
      ces meilleures pratiques pourront s'auto-certifier volontairement
      et montrer qu'ils ont obtenu le badge correspondant. Les
      projets peuvent le faire, sans frais, en utilisant une application
      Web (BadgeApp) pour expliquer comment ils respectent ces
      pratiques et leurs critères détaillés. </p>
    intro_p05_html: "<p> Ces bonnes pratiques ont été créées pour
      : </p>"
    intro_p06_html: >-
      <ol > <li> encourager les projets à suivre les meilleures
      pratiques, </li> <li> aider les nouveaux projets à découvrir
      quelles sont ces pratiques, et </li> <li> aider les utilisateurs
      à savoir quels projets suivent les meilleures pratiques
      (afin que les utilisateurs puissent choisir ces projets).
      </li> </ol>
    intro_p07_html: |-
      <p> L'idiome « meilleures pratiques » signifie « une procédure ou un ensemble de procédures qui est préféré ou considéré comme standard au sein d'une organisation, d'un secteur, etc. » (source : <a href="http://www.dictionary.com/browse/best-practice" rel="nofollow">Dictionary.com</a>).
      Ces critères sont ce que nous pensons être largement « préféré ou considéré comme standard » dans la communauté FLOSS au sens large. </p>
    intro_p08_html: >-
      <p> Pour plus d'informations sur la manière dont ces critères
      ont été développés, consultez le <a href="https://github.com/coreinfrastructure/best-practices-badge">site
      GitHub du badge des meilleures pratiques OpenSSF</a>. </p>
      <p> Vous pouvez également <a href="/fr/criteria"> voir les
      critères complets</a>. </p>
    structure_p01_html: >-
      <p> </p> <h2 id='criteria_structure'>Structure des critères</h2>
    structure_p02_html: >-
      <p> Les critères de bonnes pratiques sont divisés en trois
      niveaux : <ul> <li> <b> Basique </b> se concentre sur les
      meilleures pratiques que les projets FLOSS bien gérés suivent
      généralement déjà. Obtenir le badge basique est une réussite
      ; à tout moment, seuls 10% environ des projets poursuivant
      un badge atteignent le niveau basique. <li> <b> Argent </b>
      est un ensemble de critères plus stricts que basique, mais
      devrait être réalisable par des projets de petite taille
      et mono-organisation. <li> <b> Or </b> est encore plus strict
      qu'argent et inclut des critères qui ne sont pas réalisables
      par des projets de petite taille ou d'une seule organisation.
      </ul>
    structure_p03_html: >-
      <p> Chaque critère a un nom court, indiqué sous forme de
      texte en exposant entre crochets après le texte du critère.
    other_p01_html: >-
      <p> </p> <h2 id='criteria_other_projects'>Relation avec
      d'autres projets</h2>
    other_p02_html: >-
      <p> La Fondation Linux parraine également le <a href="https://www.openchainproject.org/"
      rel = "nofollow">Projet OpenChain</a>, qui identifie les
      critères d'un « programme de conformité aux logiciels libres
      et open source (FLOSS) de haute qualité ». OpenChain se
      concentre sur la façon dont les organisations peuvent utiliser
      au mieux le FLOSS et contribuer en retour aux projets FLOSS,
      tandis que le badge des meilleures pratiques de la OpenSSF
      se concentre sur les projets FLOSS eux-mêmes. Le badge des
      meilleures pratiques de la OpenSSF et OpenChain travaillent
      ensemble pour aider à améliorer le FLOSS et la façon dont
      le FLOSS est utilisé.
    automation_p01_html: >-
      </p> <p> <h2 id = 'criteria_automation'>Automatisation des
      critères</h2>
    automation_p02_html: >-
      <p>Dans certains cas, nous testons et remplissons automatiquement
      les informations si le projet suit les conventions standard
      et est hébergé sur un site (par exemple, GitHub) avec un
      support API décent. </p>
    automation_p03_html: >-
      <p> Nous avons l'intention d'améliorer cette automatisation
      à l'avenir. Les améliorations apportées à l'automatisation
      sont les bienvenues ! </p>
    automation_p04_html: >-
      <p> Cependant, nous avons délibérément priorisé « ce qui
      est important », même s'il ne peut pas être automatisé en
      pratique. Nous aimons les mesures automatisées, mais tout
      ce qui est important n'est pas automatisable ou ne peut
      pas être automatisé en pratique. </p>
    changes_p01_html: >-
      <p> </p> <h2 id = 'criteria_changes'>Changements au fil
      du temps</h2>
    changes_p02_html: >-
      <p> Nous nous attendons à ce que ces  pratiques et leurs
      critères détaillés soient mis à jour au fil du temps. Nous
      prévoyons d'ajouter de nouveaux critères mais de les marquer
      comme critères « futurs », afin que les projets puissent
      ajouter ces informations et conserver leur badge. </p>
    changes_p03_html: >-
      <p> Les commentaires sont <em>très</em> bienvenus via le
      <a href="https://github.com/coreinfrastructure/best-practices-badge">site
      GitHub en tant que problèmes ou pull request</a>. Il existe
      également une <a href="https://lists.coreinfrastructure.org/mailman/listinfo/cii-badges"
      rel="nofollow">liste de diffusion pour une discussion générale</a>.
      </p>
    keywords_p01_html: "<p> </p> <h2 id = 'keywords'>Mots clés</h2>"
    keywords_p02_html: >-
      <p> Les mots clés « DOIT », « NE DOIT PAS », « DEVRAIT »,
      « NE DEVRAIT PAS » et « PEUT » dans ce document sont à interpréter
      comme décrit dans la <a href="https://tools.ietf.org/html/rfc2119"
      rel="nofollow">RFC 2119</a>. Le terme supplémentaire PROPOSÉ
      est ajouté. En résumé, ces mots clés ont les significations
      suivantes : </p>
    keywords_p03_html: >-
      <ul> <li> Le terme DOIT est une exigence absolue, et NE
      DOIT PAS est une interdiction absolue. </li>
    keywords_p04_html: >-
      <li> Le terme DEVRAIT indique un critère normalement requis,
      mais il peut exister des raisons valables dans des circonstances
      particulières de l'ignorer. Cependant, toutes les implications
      doivent être comprises et soigneusement pesées avant de
      choisir un cours différent. </li>
    keywords_p05_html: >-
      <li> Le terme PROPOSÉ est utilisé à la place de DEVRAIT
      lorsque le critère doit être considéré, mais les raisons
      valables de ne pas le faire sont encore plus communes que
      pour DEVRAIT. </li>
    keywords_p06_html: >-
      <li> Le terme PEUT fournit une façon de faire quelque chose,
      par exemple, pour indiquer clairement que l'implémentation
      décrite est acceptable. </li> </ul>
    keywords_p07_html: >-
      <p>Souvent, un critère est énoncé comme quelque chose qui
      DEVRAIT être fait, ou est PROPOSÉ, car il peut être difficile
      à mettre en œuvre ou les coûts pour le faire peuvent être
      élevés. </p>
    achieving_p01_html: >-
      <p> </p> <h2 id = 'criteria_achieving_badge '>Obtenir un
      badge</h2>
    achieving_p02_html: >-
      <p> Pour obtenir un badge, tous les critères DOIT et NE
      DOIT PAS doivent être remplis, tous les critères DEVRAIT
      doivent être remplis OU non remplis avec justification,
      et tous les critères PROPOSÉ doivent être pris en compte
      (il doit être marqué comme satisfait ou non, mais aucune
      justification n'est requise, sauf indication contraire).
      Une réponse N/A (« non applicable »), lorsqu'elle est autorisée,
      est considérée comme satisfaite. Dans certains cas, en particulier
      aux niveaux supérieurs, une justification et / ou une URL
      peuvent être requises. </p>
    achieving_p03_html: >-
      <p> Certains critères ont des marquages ​​spéciaux qui influencent
      ceci : <ul> <li> <b> {N/A autorisé} </b> - « N/A » (« Non
      applicable ») est autorisé. <li> <b> {N/A justification}
      </b> - « N/A » (« Non applicable ») est autorisé et nécessite
      une justification. <li> <b> {Atteint justification} </b>
      - « Atteint » nécessite une justification. <li> <b> {Atteint
      URL} </b> - « Atteint » nécessite une justification avec
      une URL. <li> <b> {Futur} </b> - la réponse à ce critère
      n'a actuellement aucun effet, mais elle peut être requise
      à l'avenir. </ul>
    achieving_p04_html: >-
      <p> Un projet doit atteindre le niveau précédent pour atteindre
      le niveau suivant. Dans certains cas, les critères DEVRAIT
      deviennent DOIT dans les badges de niveau supérieur, et
      certains critères PROPOSÉ à des niveaux inférieurs deviennent
      DEVRAIT ou DOIT aux badges de niveau supérieur. Les niveaux
      supérieurs nécessitent également plus de justification,
      car nous voulons que d'autres puissent comprendre <i>comment</i>
      les critères sont remplis. </p>
    achieving_p05_html: >-
      <p> Les (nombreux) critères cryptographiques ne s'appliquent
      pas toujours, car certains logiciels n'ont pas besoin d'utiliser
      directement les capacités cryptographiques. Dans ces cas,
      répondez N/A.
    achieving_p06_html: >-
      <p> Il y a un critère de réussite implicite - chaque projet
      DOIT avoir un site Web public avec une URL stable. Cela
      est nécessaire pour créer une entrée de badge en premier
      lieu. </p>
    terminology_p01_html: "<p> </p> <h2 id = 'criteria_terminology'>Terminologie</h2>"
    terminology_p02_html: >-
      <p> Si vous n'êtes pas familier avec le développement de
      logiciels ou l'exécution d'un projet FLOSS, des ressources
      telles que <a href="http://producingoss.com/" rel="nofollow">
      <em> Produire un logiciel Open Source </em> par Karl Fogel
      </a> peuvent vous être utiles. </p>
    terminology_p03_html: "<p>Voici quelques termes clés: </p>
      <ul>"
    terminology_p04_html: >-
      <li> Un <em> projet </em> est une entité active qui a des
      membres du projet et produit des résultats de projet. Ses
      membres utilisent les sites du projet pour coordonner et
      diffuser les résultats. Un projet n'a pas besoin d'être
      une entité juridique formelle. </li>
    terminology_p05_html: >-
      <li> Les <em>membres</em> du projet sont le groupe d'une
      ou plusieurs personnes ou entreprises qui travaillent ensemble
      pour tenter de produire des résultats de projet. Certains
      projets FLOSS peuvent avoir différents types de membres,
      avec des rôles différents, mais cela ne relève pas de notre
      portée. </li>
    terminology_p06_html: >-
      <li> Les <em>résultats</em> du projet sont ce que les membres
      du projet produisent ensemble comme objectif final de leur
      travail. Il s'agit normalement d'un logiciel, mais les résultats
      du projet peuvent également inclure d'autres éléments. Les
      critères qui font référence aux « logiciels produits par
      le projet » font référence aux résultats du projet. </li>
    terminology_p07_html: >-
      <li> Les <em> sites </em> du projet sont les sites dédiés
      au développement et à la diffusion des résultats du projet,
      et incluent le site Web du projet, les dépôts et sites de
      téléchargement, le cas échéant (voir <a href="#sites_https">sites_https</a>).
      </li>
    terminology_p08_html: >-
      <li> Le <em>site Web</em> du projet, également appelé page
      d'accueil du projet, est la page principale du World Wide
      Web (WWW) qu'un nouvel utilisateur visiterait généralement
      pour voir des informations sur le projet ; il peut être
      le même que le dépôt du projet (c'est souvent le cas sur
      GitHub). </li>
    terminology_p09_html: >-
      <li> Le <em> dépôt </em> du projet gère et stocke les résultats
      du projet et l'historique des révisions des résultats du
      projet. Ceci est également appelé le <em> dépôt source </em>
      du projet, car nous n'avons besoin que de la gestion et
      du stockage des versions modifiables et non des résultats
      générés automatiquement (dans de nombreux cas, les résultats
      générés ne sont pas stockés dans un dépôt). </li>
    terminology_p10_html: >-
      <li> Un <em> mécanisme de sécurité du projet </em> est un
      mécanisme de sécurité fourni par le logiciel du projet livré.
      </ul>
    noncriteria_p01_html: "<p> </p> <h2 id = 'criteria_noncriteria'>
      Non-critères </h2>"
    noncriteria_p02_html: "<p> Les critères : <ul>"
    noncriteria_p03_html: >-
      <li> ne nécessitent <em> aucune </em> technologie, produit
      ou service spécifique. Par exemple, ils n'ont <em> pas </em>
      besoin de git, GitHub ou GitLab. Les critères <em> fournissent
      </em> des conseils et une aide pour les cas courants, car
      ces informations peuvent aider les gens à comprendre et
      à répondre aux critères. Il existe une automatisation spéciale
      pour les projets utilisant git ou GitHub, pour aider les
      utilisateurs dans ces cas courants, mais ils ne sont pas
      <em> obligatoires</em>. Ainsi, à mesure que de nouveaux
      outils et capacités deviennent disponibles, les projets
      peuvent rapidement y basculer. À titre d'exception, les
      critères nécessitent une page Web de projet et TLS.
    noncriteria_p04_html: >-
      <li> n'exigent ou n'interdisent <em> pas </em> un langage
      de programmation particulier. Ils exigent que des mesures
      supplémentaires soient prises pour certains <em> types </em>
      de langages de programmation, mais c'est différent.
    noncriteria_p05_html: >-
      <li> n'exigent <em> jamais </em> l’utilisation d’un logiciel
      propriétaire, d’un service propriétaire ou d’une technologie
      propriétaire, car de nombreux développeurs de <a href="https://www.gnu.org/philosophy/free-sw.fr.html"
      rel="nofollow"> logiciels libres </a> rejetteraient ces
      critères. Les projets sont <em> autorisés </em> à les utiliser
      et à en dépendre.
    noncriteria_p06_html: >-
      <li> ne nécessitent <em> pas </em> de développement actif
      ou de discussion utilisateur au sein d'un projet. Certains
      projets très matures changent rarement et peuvent donc avoir
      peu d'activité. Les critères <em> exigent</em>, cependant,
      que le projet soit réactif si des vulnérabilités sont signalées
      au projet.
    noncriteria_p07_html: >-
      <li> n’exigent <em> pas </em> de frais pour obtenir un badge.
    noncriteria_p08_html: >-
      <li> n'exigent <em> pas </em> que tous les critères soient
      mis en œuvre en même temps ; la plupart des projets les
      mettent en œuvre au fil du temps. </ul>
    noncriteria_p09_html: >-
      <p> Le niveau basique ne comprend pas de critères qui ne
      seraient pas pratiques pour un projet à une seule personne,
      par exemple, quelque chose qui nécessite une somme d'argent
      importante. De nombreux projets FLOSS sont petits et nous
      ne voulons pas les priver de leurs droits.
    identify_p01_html: >-
      <p> </p> <h2 id = 'criteria_id_project'> Identification
      d'un projet </h2>
    identify_p02_html: >-
      <p> Notre application attribue à chaque entrée de projet
      un identifiant unique, mais cela n'aide pas les personnes
      à rechercher le projet. Pour nos besoins, le nom <em> réel
      </em> d'un projet est l'URL de son dépôt, et là où ce n'est
      pas disponible, l'URL de la « page d'accueil » du projet.
      Nous limitons la fréquence des modifications apportées à
      l'URL du dépôt pour éviter certaines absurdités. Les projets
      ont normalement un nom lisible par les humains, mais ces
      noms ne sont pas assez uniques.
    criteria_why_p01_html: >-
      <p> </p> <h2 id = 'criteria_why'> Pourquoi avoir des critères
      ? </h2>
    criteria_why_p02_html: |-
      <p> Le document <a href="http://www.researchinlearningtechnology.net/index.php/rlt/article/view/23563" rel="nofollow"> Badges ouverts pour l'éducation : quelles implications à l'intersection des systèmes ouverts et des badges ? </a> identifie trois raisons générales pour les systèmes de badges (tous sont valables ici) : </p>
      <ol>
    criteria_why_p03_html: >-
      <li> Les badges comme motivateurs de comportement. Nous
      espérons qu'en identifiant les meilleures pratiques, nous
      encouragerons les projets à mettre en œuvre ces meilleures
      pratiques s'ils ne les appliquent pas déjà. </li>
    criteria_why_p04_html: >-
      <li> Les badges comme outil pédagogique. Certains projets
      peuvent ne pas être conscients de certaines des meilleures
      pratiques appliquées par d'autres, ni de la manière dont
      elles peuvent être appliquées dans la pratique. Le badge
      les aidera à en prendre conscience et à les mettre en œuvre.
      </li>
    criteria_why_p05_html: >-
      <li> Les badges comme signifiant ou identifiant. Les utilisateurs
      potentiels veulent utiliser des projets qui appliquent les
      meilleures pratiques pour produire systématiquement de bons
      résultats ; les badges permettent aux projets de signifier
      facilement qu'ils respectent les meilleures pratiques et
      permettent aux utilisateurs de voir facilement quels projets
      le font. </li> </ol>
    self_certification_p01_html: >-
      <h3 id="criteria_self_certification"> Pourquoi l'auto-certification
      ? </h3>
    self_certification_p02_html: >-
      <p> Nous avons choisi d'utiliser l'autocertification, car
      cela permet à un grand nombre de projets (même petits) de
      participer. Il existe des millions de projets FLOSS et le
      fait de payer des tiers pour évaluer chacun d'eux de manière
      indépendante ne passe pas à l'échelle. Il y a un risque
      que les projets fassent de fausses déclarations, mais nous
      pensons que le risque est faible, les utilisateurs peuvent
      vérifier les allégations par eux-mêmes et les fausses déclarations
      peuvent être annulées. Nous utilisons également l'automatisation
      pour remplacer les fausses déclarations lorsque nous pouvons
      être sûrs des résultats. </p>