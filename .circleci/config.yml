version: 2.1
# This CircleCI config.yml file uses PINNED dependencies as required by
# OpenSSF Scorecard. You can see the hash pins on the various "image:"
# values. That prevents downloading of later subversions AND of later
# updates. When you *DO* want to update, you can easily find out the hash
# of a given docker container via:
# https://hub.docker.com/r/cimg/postgres/tags
# For more info: https://circleci.com/developer/images/image/cimg/postgres
# You could also run something like:
# > docker pull circleci/postgres:13.14
#
orbs:
  browser-tools: circleci/browser-tools@1.4.9
  codecov: codecov/codecov@3.2.4
  dscar-brakeman: naokikimura/dscar-brakeman@0.9.0

# WARNING: In some cases you MUST update the cache version control value.
# WHEN TO BUMP: Increment the version number (e.g., v8 -> v9) when:
#   - Upgrading Ruby major/minor version (e.g., 3.4 -> 3.5)
#   - Upgrading Bundler major version (e.g., 2.7 -> 2.8)
#   - Gems cached with old versions cause issues
# DON'T BUMP for: Gemfile.lock changes or patch updates
# TO UPDATE: Search for "v.*-dep-" and update the number (2 occurrences below)
# We don't do this with YAML anchors because they don't work with
# CircleCI's template syntax.

# Reusable executors - define Docker images once, use them multiple times
executors:
  ruby-postgres:
    docker:
      # Primary image - Ruby with browsers for testing
      # When updating Ruby: update SHA256 here, tag comment, and cache version below
      - image: drdavidawheeler/cii-bestpractices@sha256:97770a22ec2c88bf9fa028cc136446129f33e15df62bb4c0dc65f2c25d22ffe7 # pin :3.4.1-browsers
        environment:
          PG_HOST: localhost
          PG_USER: ubuntu
          RAILS_ENV: test
          RACK_ENV: test
      # Secondary image - PostgreSQL for database
      - image: cimg/postgres@sha256:2e4f1a965bdd9ba77aa6a0a7b93968c07576ba2a8a7cf86d5eb7b31483db1378 # pin :16.4
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: circle_ruby_test

  ruby-only:
    docker:
      # Single Ruby image for deployment job (doesn't need PostgreSQL)
      - image: drdavidawheeler/cii-bestpractices@sha256:97770a22ec2c88bf9fa028cc136446129f33e15df62bb4c0dc65f2c25d22ffe7 # pin :3.4.1-browsers
        environment:
          PG_HOST: localhost
          PG_USER: ubuntu
          RAILS_ENV: test
          RACK_ENV: test

jobs:
  build:
    executor: ruby-postgres
    working_directory: ~/coreinfrastructure/best-practices-badge
    parallelism: 1
    resource_class: medium
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    steps:
    - checkout
    # For more on browser-tools integration with the main image, see:
    # https://circleci.com/developer/images/image/cimg/ruby
    # https://circleci.com/developer/orbs/orb/circleci/browser-tools
    # https://github.com/CircleCI-Public/browser-tools-orb
    # Chromedriver is finicky. browser-tools-orb version 1.4.2 fixed problems:
    # https://github.com/CircleCI-Public/browser-tools-orb/issues/75
    # https://github.com/CircleCI-Public/browser-tools-orb/releases/tag/v1.4.2
    - browser-tools/install-chromedriver
    - run: pwd
    - run: ls -l
    - run: |
        ruby --version
        node --version
        java --version
        google-chrome --version
    # Prepare for artifact and test results
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    # Force cleanup to make deterministic.
    # See https://circleci.com/docs/2.0/caching
    # - run: bundle clean --force
    # Dependencies
    # Restore the dependency cache
    - restore_cache:
        keys:
        # Cache version control.
        # Find a cache corresponding to this particular Gemfile.lock checksum.
        # When updating, change BOTH this line and save_cache below
        - v8-dep-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
    # This would show what we restored
    # - run: find ~/.rubygems || true
    - run:
        name: Update bundler to match Gemfile.lock
        command: >
          sudo sh -c 'yes | gem install bundler --no-document
          -v "$(cat Gemfile.lock | tail -1 | tr -d \\\\" \\\\")"'
    - run:
        name: Bundler Version
        command: bundle --version
    - run:
        name: Install Bundle
        # Note: --path=vendor/bundle removed, we don't need it.
        command: >
          bundle check ||
          bundle install --jobs=4 --retry=3
    # Here's how we could show more:
    # - run: find ~/.rubygems || true
    # - run: find ~/.bundle || true
    # - run: find ~ -name "*rack-timeout*" || true
    # Save dependency cache
    - save_cache:
        # Cache version control.
        # Find a cache corresponding to this particular Gemfile.lock checksum.
        # When updating, change BOTH this line and save_cache below
        key: v8-dep-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        paths:
          - ~/.rubygems
          - ~/.bundle
    - run:
        name: Configure database
        command: |
          cd config/
          cp {database.ci,database}.yml
    - run:
        name: Create database
        command: bundle exec rake db:setup
    # Start testing
    - run:
        name: Check for whitespace issues.
        command: '[[ ! -s "$(git rev-parse --git-dir)/shallow" ]] || git fetch --unshallow'
    - run:
        name: Run comprehensive checks and tests (rake default)
        command: CI=true bundle exec rake
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: coverage
    - store_artifacts:
        path: license_finder_report.html
    - store_artifacts:
        path: log/test.log
    - store_artifacts:
        path: tmp/capybara
    - store_artifacts:
        path: test/html_reports
    - store_artifacts:
        path: /tmp/circleci-test-results
    - codecov/upload:
        file: coverage/codecov-result.json
    - dscar-brakeman/analyze

  # I haven't found a reliable way to calculate HEROKU_APP just once,
  # so it gets recalculated. This approach still greatly reduces
  # duplication.
  deploy:
    executor: ruby-only
    steps:
      - checkout
      - run:
          # We are downloading these tools from a trusted source, so we *do*
          # want to use the latest version, not a pinned version.
          # Heroku doesn't support pinning these anyway.
          # These aren't included in the final result, nor used
          # in the process of testing the final result... they're
          # just tools we use to *transfer* the final result to deployment.
          # The shell installer loads and installs the actual tool.
          # We aren't using pipe-to-shell, but downloading and printing a
          # sha256 of the install program first.
          # This provides a log to help us notice potential problems.
          # See: https://devcenter.heroku.com/articles/heroku-cli
          name: Download Heroku CLI tools (to easily control maintenance mode)
          command: |
            echo "** PATH=$PATH"
            # verifies the right Node.js version is in the environment
            echo "** Node version:"
            node -v # should print `v22.12.0`
            # verifies the right npm version is in the environment
            echo "** Getting installer"
            rm -f install.sh
            wget https://cli-assets.heroku.com/install.sh
            echo "** Computing SHA-256 of installer"
            sha256sum install.sh
            echo "** Running installer"
            chmod a+x install.sh
            sh install.sh
      - run:
          name: Deploy to Heroku
          # export PATH="$PATH:$(pwd)/heroku/bin"
          command: |
            export PATH="$PATH:/usr/local/bin:/usr/local/bin"
            export HEROKU_APP="$CIRCLE_BRANCH"-bestpractices
            # Set file .netrc so "git push heroku ..." will work later.
            # Heroku uses HEROKU_API_KEY, but git only knows about ~/.netrc.
            # https://devcenter.heroku.com/articles/authentication
            echo 'Set up .netrc so git push will work'
            printf 'machine git.heroku.com\n  login %s\n  password %s\n' \
              'bestpractices@linuxfoundation.org' "$HEROKU_API_KEY" > ~/.netrc
            echo "Set git remote heroku for $HEROKU_APP"
            heroku git:remote -a "$HEROKU_APP"
            git remote get-url heroku
            echo "Switching to maintenance mode in $HEROKU_APP"
            heroku maintenance:on --app "$HEROKU_APP"
            # Give production site a few seconds to complete ongoing work.
            [ "$HEROKU_APP" != 'production-bestpractices' ] || sleep 10
            echo "Deploying to $HEROKU_APP"
            # Switching from "master" here requires additional work, see:
            # https://stackoverflow.com/questions/10451330/clean-git-repo-on-heroku
            # https://stackoverflow.com/questions/36111040/error-message-after-successfully-pushing-to-heroku
            GIT_CURL_VERBOSE=1 GIT_TRACE=1 git push heroku "$CIRCLE_BRANCH:master"
      # - run:
      #       # This may no longer be necessary
      #       name: Setup Heroku
      #       command: bash .circleci/setup-heroku.sh
      - run:
          name: Migrate DB
          command: |
            export PATH="$PATH:$(pwd)/heroku/bin"
            export HEROKU_APP="$CIRCLE_BRANCH"-bestpractices
            heroku run --app "$HEROKU_APP" -- bundle exec rails db:migrate
            if [ -f '.recalculate' ] ; then
                echo 'Recalculation marker found, performing recalculation.'
                heroku run --app "$HEROKU_APP" -- rake update_all_badge_percentages
                rm -f '.recalculate'
            fi
            heroku maintenance:off --app "$HEROKU_APP"
          no_output_timeout: 20m
      # Not reliable enough:
      # - run:
          # name: Test Fastly
          # command: script/fastly_test
workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - staging
                - production
