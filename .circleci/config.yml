version: 2.1
# This CircleCI config.yml file uses PINNED dependencies as required by
# OpenSSF Scorecard. You can see the hash pins on the various "image:"
# values. That prevents downloading of later subversions AND of later
# updates. When you *DO* want to update, you can easily find out the hash
# of a given docker container via:
# https://hub.docker.com/r/cimg/postgres/tags
# For more info: https://circleci.com/developer/images/image/cimg/postgres
# You could also run something like:
# > docker pull circleci/postgres:13.14
#
orbs:
  browser-tools: circleci/browser-tools@1.4.1
  codecov: codecov/codecov@3.2.4
  dscar-brakeman: naokikimura/dscar-brakeman@0.9.0
jobs:
  build:
    working_directory: ~/coreinfrastructure/best-practices-badge
    parallelism: 1
    resource_class: medium
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    docker:
    - image: afader/cii-bestpractices@sha256:c692fea707a2bd6cdca3f47af6405cd698cd969350e740f8291bf5700204fa01 # pin :3.2.2-browsers
      environment:
        PG_HOST: localhost
        PG_USER: ubuntu
        RAILS_ENV: test
        RACK_ENV: test
    - image: cimg/postgres@sha256:86e5a2c769da73ad7c6fa2de1b520d44566c146ba9f5c33382be023754804128 # pin :14.11
      environment:
        POSTGRES_USER: ubuntu
        POSTGRES_DB: circle_ruby_test
    steps:
    - checkout
    - run: pwd
    - run: ls -l
    - browser-tools/install-chromedriver
    # Prepare for artifact and test results
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    # Force cleanup to make deterministic.
    # See https://circleci.com/docs/2.0/caching
    # - run: bundle clean --force
    # Dependencies
    # Restore the dependency cache
    - restore_cache:
        keys:
        # Find the most recently generated cache used
        # Find a cache corresponding to this particular Gemfile.lock checksum
        - v7-dep-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        - v7-dep-{{ arch }}-{{ .Branch }}-
        - v7-dep-{{ arch }}-
        # This was suggested, but it seems like a bad idea to me:
        # - v7-dep-
    # This would show what we restored
    # - run: find ~/.rubygems || true
    - run:
        name: Update bundler to match Gemfile.lock
        command: >
          sudo sh -c 'yes | gem install bundler --no-document
          -v "$(cat Gemfile.lock | tail -1 | tr -d \\\\" \\\\")"'
    - run:
        name: Bundler Version
        command: bundle --version
    - run:
        name: Install Bundle
        # Note: --path=vendor/bundle removed, we don't need it.
        command: >
          bundle check ||
          bundle install --jobs=4 --retry=3
    - run:
       name: Update Chromedriver
       command: bundle exec rake update_chromedriver
    # Here's how we could show more:
    # - run: find ~/.rubygems || true
    # - run: find ~/.bundle || true
    # - run: find ~/.rbenv || true
    # - run: find vendor/bundle || true
    # - run: find ~ -name "*rack-timeout*" || true
    # Save dependency cache
    - save_cache:
        key: v7-dep-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        paths:
          - ~/.rubygems
          - ~/.bundle
          # Not used in current config; we include these just in case they
          # get used later:
          - ~/.rbenv/versions
          - vendor/bundle
    - run:
        name: Configure database
        command: |
          cd config/
          cp {database.ci,database}.yml
    - run:
        name: Create database
        command: bundle exec rake db:setup
    # Start testing
    - run:
        name: Check for whitespace issues.
        command: '[[ ! -s "$(git rev-parse --git-dir)/shallow" ]] || git fetch --unshallow'
    - run:
        name:  Run test suite (both system and non-system tests)
        command: bundle exec rails test:system test
    - run:
        name:  Run pronto GitHub
        command: >
          bundle exec pronto run -f github text
          -c=$(git log --pretty=format:%H | tail -1) --exit-code
    # Temporarily disable bundle doctor; trying to run it produces an error.
    # - run: bundle exec bundle doctor
    - run: bundle exec rake bundle_audit
    - run: bundle exec rake whitespace_check
    - run: bundle exec rake license_finder_report.html
    - run: script/report_code_statistics
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: coverage
    - store_artifacts:
        path: license_finder_report.html
    - store_artifacts:
        path: log/test.log
    - store_artifacts:
        path: tmp/capybara
    - store_artifacts:
        path: test/html_reports
    - store_artifacts:
        path: /tmp/circleci-test-results
    - codecov/upload:
        file: coverage/codecov-result.json
    - dscar-brakeman/analyze

  # I haven't found a reliable way to calculate HEROKU_APP just once,
  # so it gets recalculated. This approach still greatly reduces
  # duplication.
  deploy:
    docker:
      - image: buildpack-deps@sha256:73f48ef53511ce25f37dc17849fb467925f1bfdcb758c77e8437284158a251ce # pin :bionic
    steps:
      - checkout
      - run:
          # We don't pin these, as Heroku doesn't support pinning.
          # In any case, these aren't included in the final result, nor used
          # in the process of testing the final result... they're
          # just tools we use to *transfer* the final result to deployment.
          # We are downloading these tools from a trusted source, so we *do*
          # want to use the latest version, not a pinned version.
          name: Install Heroku CLI tools (to easily control maintenance mode)
          command: |
            wget https://cli-assets.heroku.com/heroku-linux-x64.tar.gz
            tar xzf heroku-linux-x64.tar.gz
      - run:
          name: Deploy to Heroku
          command: |
            export PATH="$PATH:$(pwd)/heroku/bin"
            export HEROKU_APP="$CIRCLE_BRANCH"-bestpractices
            # Set file .netrc so "git push heroku ..." will work later.
            # Heroku uses HEROKU_API_KEY, but git only knows about ~/.netrc.
            # https://devcenter.heroku.com/articles/authentication
            echo 'Set up .netrc so git push will work'
            printf 'machine git.heroku.com\n  login %s\n  password %s\n' \
              'bestpractices@linuxfoundation.org' "$HEROKU_API_KEY" > ~/.netrc
            echo "Set git remote heroku for $HEROKU_APP"
            heroku git:remote -a "$HEROKU_APP"
            git remote get-url heroku
            echo "Switching to maintenance mode in $HEROKU_APP"
            heroku maintenance:on --app "$HEROKU_APP"
            # Give production site a few seconds to complete ongoing work.
            [ "$HEROKU_APP" != 'production-bestpractices' ] || sleep 10
            echo "Deploying to $HEROKU_APP"
            # Switching from "master" here requires additional work, see:
            # https://stackoverflow.com/questions/10451330/clean-git-repo-on-heroku
            # https://stackoverflow.com/questions/36111040/error-message-after-successfully-pushing-to-heroku
            GIT_CURL_VERBOSE=1 GIT_TRACE=1 git push heroku "$CIRCLE_BRANCH:master"
      - run:
            # This may no longer be necessary
            name: Setup Heroku
            command: bash .circleci/setup-heroku.sh
      - run:
          name: Migrate DB
          command: |
            export PATH="$PATH:$(pwd)/heroku/bin"
            export HEROKU_APP="$CIRCLE_BRANCH"-bestpractices
            heroku run --app "$HEROKU_APP" -- bundle exec rails db:migrate
            if [ -f '.recalculate' ] ; then
                echo 'Recalculation marker found, performing recalculation.'
                heroku run --app "$HEROKU_APP" -- rake update_all_badge_percentages
                rm -f '.recalculate'
            fi
            heroku maintenance:off --app "$HEROKU_APP"
          no_output_timeout: 20m
      # Not reliable enough:
      # - run:
          # name: Test Fastly
          # command: script/fastly_test
workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - staging
                - production
