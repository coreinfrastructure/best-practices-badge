---
fr:
  helpers:
    select:
      prompt: Veuillez sélectionner
    submit:
      create: Créer un(e) %{model}
      update: Modifier ce(tte) %{model}
      submit: Enregistrer ce(tte) %{model}
  hello: Bonjour le monde
  projects_count:
    one: "%{count} Projet"
    other: "%{count} Projets"
    zero: Aucun Projet
    few: "%{count} Projets"
    many: "%{count} Projets"
  feed_title: >-
    Mise à Jour des Projets de la BadgeApp Meilleures Pratiques
    de la CII
  layouts:
    cii_best_practices: Meilleures Pratiques de la CII
    projects: Projets
    users: Utilisateurs
    profile: Profil
    settings: Paramètres
    logout_html: >-
      <span class="glyphicon glyphicon-log-out"></span> Déconnection
    signup_html: <span class="glyphicon glyphicon-user"></span>
      S'inscrire
    login_html: >-
      <span class="glyphicon glyphicon-log-in"></span> S'identifier
    footer_text_html: >-
      <small> <strong>Vous avez besoin d'aide ? Vous avez une
      question ? Vous voyez un problème ? Merci d'<em><a href="mailto:&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;">envoyer
      un email</a></em> ou de <em><a href="https://github.com/coreinfrastructure/best-practices-badge/issues"
      target="_blank">reporter un problème</a></i>.</strong> ©
      2015-2017 <a href="https://www.coreinfrastructure.org/"
      target="_blank">Core Infrastructure Initiative</a>, un projet
      collaboratif de la <a href="https://www.linuxfoundation.org/"
      target="_blank">Fondation Linux</a>. Tous droits réservés.
      Consultez notre <a href="https://www.linuxfoundation.org/privacy"
      target="_blank">politique de confidentialité</a> et nos
      <a href="https://www.linuxfoundation.org/terms" target="_blank">conditions
      d'utilisation </a>. </small>
    account: Compte
    choose_locale: Choisir la langue
  sessions:
    login_header: S'identifier
    login_with_github_html: >-
      <span class="fa fa-github"></span> Connectez-vous avec GitHub
    or: ou
    email: Email
    password: Mot de passe
    forgot_password: Vous avez oublié votre mot de passe ?
    remember_me: Se souvenir de moi
    login_custom: Connectez-vous en utilisant un compte personnalisé
    no_custom: Aucun compte personnalisé ? Inscrivez-vous maintenant
      !
    already_logged_in: Vous êtes déjà connecté.
    incorrect_login_info: Informations de connexion incorrectes
    invalid_combo: Combinaison de messagerie / mot de passe invalide
    signed_in: Connecté !
    not_activated: >-
      Compte non activé. Vérifiez votre email pour le lien d'activation.
    signed_out: Déconnecté !
    cookie_details_html:
  users:
    new:
      signup_header: S'inscrire
      intro_html: >-
        Si vous ne souhaitez pas vous connecter en utilisant votre
        compte GitHub, vous pouvez vous inscrire ici à la place.
        <br> <br> Si vous n'avez pas reçu votre lien d'activation,
        veuillez vous inscrire à nouveau et nous vous enverrons
        un nouveau lien.
      name: Nom
      email: Email
      password: Mot de passe
      password_confirmation: Confirmez le mot de passe
      create_account: Créer mon compte
      preferred_locale: Langue préférée
      intro_github: >-
        Si vous avez un compte GitHub, vous pouvez simplement
        l'utiliser pour vous connectez.
    show:
      see_external: Voir la page externe de cet utilisateur.
      other_projects_edit: Autres projets que vous pouvez modifier
      as_admin: 'en tant qu''administrateur, vous pouvez également
        :'
      send_email_to: 'Envoyer un email à :'
      delete_link_name: supprimer
      confirm_delete: Êtes-vous sûr(e) de vouloir supprimer cet
        utilisateur ?
      edit_user: Modifier l'utilisateur
      projects_owned: 'Projets possédés :'
      projects_additional_rights: 'Projets avec des droits supplémentaires
        :'
      is_admin: >-
        Cet utilisateur est un administrateur de l'application
        de badge.
    update:
      profile_updated: Profil mis à jour
    destroy:
      cannot_delete_self: Impossible de se supprimer soi-même.
      user_deleted: Utilisateur supprimé.
    redirect_existing: Cet utilisateur existe déjà. Voulez-vous
      vous connecter ?
    new_activation_link_created: >-
      Nouveau lien d'activation créé. Veuillez vérifier votre
      email pour activer votre compte.
    please_log_in: Connectez-vous.
    edit:
      update_user_info: Mettre à jour les informations de l'utilisateur
      save_changes: Enregistrer les modifications
  project_stats:
    index:
      project_stats_header: Statistiques du projet
      all_projects: Tous les projets
      projects_nontrivial: Projets avec des progrès significatifs
      projects_activity_30: >-
        Projets avec une activité de soumission au cours des 30
        derniers jours
      daily_activity: Activité journalière de soumission
      reminders: Rappels
      admin_html: >-
        En tant qu'administrateur, vous pouvez également voir
        les <a href="/fr/reminders">informations détaillées sur
        les rappels</a>.
      raw_data: 'Vous pouvez également voir les données brutes
        :'
      json_format: format JSON
      csv_format: format CSV téléchargeable
      active_projects: >-
        Projets actifs (créés / mis à jour dans les 30 derniers
        jours)
      active_in_progress: >-
        Projets en cours  (d'obtention) actifs (créés / mis à
        jour dans les 30 derniers jours)
      active_edited: >-
        Projets modifiés actifs (mis à jour dans les 30 derniers
        jours)
      active_edited_in_progress: >-
        Projets en cours (d'obtention) modifiés actifs (mis à
        jour dans les 30 derniers jours)
      projects_created_since_yesterday: Projets créés depuis le
        jour précédent
      projects_updated_since_yesterday: Projets mis à jour depuis
        le jour précédent
      reminders_sent_since_yesterday: Rappels envoyés depuis hier
      reactivated_projects: Projets réactivés dans les 14 jours
        suivant un rappel
      projects_created_average_7_days: projets créés en moyenne
        sur 7 jours
      projects_updated_average_7_days: projets mis à jour en moyenne
        sur 7 jours
      projects_created_updated_daily: >-
        La donnée « projets créés depuis la veille » est l'ensemble
        des nombres de projets créés dans les 24 heures précédent
        la date donnée (en ignorant les projets qui ont également
        été supprimés dans la même période de 24 heures). De même,
        la donnée « projets édités depuis la veille » est un ensemble
        des nombres de projets mis à jour dans les 24 heures précédent
        la date donnée (en ignorant les projets créés ou supprimés
        dans la même période de 24 heures). Les moyennes sur 7
        jours montrent les moyennes correspondantes sur 7 jours.
        Vous pouvez sélectionner des couleurs dans la légende
        pour cacher et afficher les données correspondantes.
      projects_silver: Progrès du projet vers le niveau argent
      projects_gold: Progrès du projet vers le niveau or
      projects_completed_silver_and_gold: Projets ayant atteint
        le niveau argent ou or
      percent_projects_earning_badges: Pourcentage de projets
        ayant obtenu un badge
  projects:
    index:
      add_link: Ajouter
      add_new: Ajouter un nouveau projet
      badge_status: Statut de soumission
      exclude_passing: Exclure les badges obtenus
      text_search: Recherche textuelle
      name_or_description: Nom ou texte de description
      search: Recherche
      all: Tous
      passing_100: Atteint (100%)
      in_progress_variable: En cours (%{percent}% ou plus)
    table:
      id: Id
      name: Nom
      description: Description
      website: Site Web
      license: Licence
      owner: Propriétaire
      last_achieved: Obtenu le
      pachieved: "% Atteint"
      can_also_sort: 'Vous pouvez également trier par les critères
        suivants :'
      repository_url: URL du dépôt
      create_time: date de création (pour la soumission)
      update_time: dernière date de mise à jour (pour la soumission)
      user_id: id utilisateur
      paren_name_unknown: "(Nom inconnu)"
      badge_level: Le niveau de badge pour le projet %{id} est
        %{percent}%
    new:
      post_delay_warning: >-
        Il peut y avoir un délai important après la soumission
        car nous essayons de remplir automatiquement les informations.
      new_badge: Nouveau badge
      may_select_html: >-
        Vous pouvez choisir parmi l'un de vos dépôts GitHub <em>OU</em>
        fournir des informations sur un autre projet.
      select_one_github: Sélectionnez l'un de vos dépôts GitHub
      submit_github: Soumettre le dépôt GitHub
      url_of_homepage: >-
        Quelle est l'URL de la page d'accueil du projet (l'URL
        pour le projet dans son ensemble) ? Commencez par http(s)://
        (plusieurs caractères ne sont pas autorisés, y compris
        "?")
      placeholder_of_homepage: http(s)://... pour l'URL de la
        page d'accueil du projet
      url_of_repo: >-
        Quelle est l'URL du dépôt sous contrôle de version (qui
        peut être la même que la page d'accueil du projet) ? Commencez
        par http(s):// (plusieurs caractères ne sont pas autorisés,
        y compris "?")
      placeholder_of_repo: http(s)://... pour l'URL du dépôt du
        projet
      submit_urls: Envoyer l'URL
      sign_in_first: Connectez-vous pour ajouter un projet !
      thanks_adding: >-
        Merci d'avoir ajouté le projet ! Remplissez le reste des
        informations pour obtenir le badge.
      project_already_exists: Ce projet existe déjà !
      final_text_html: >-
        Remarque : si votre URL de dépôt est sur GitHub, toute
        personne qui a les droits de commit dans le dépôt pourra
        éditer les informations du badge.
      new_badge_or: OU
      original_repos: "=> Dépôts GitHub Originaux"
      fork_repos: "=> Dépôts GitHub Dupliqués"
    show:
      edit: Modifier
      delete: Supprimer
      confirm_delete: >-
        Êtes-vous SÛR(E) de vouloir SUPPRIMER ENTIÈREMENT le projet
        %{project_id} ?
      back: Retour
      cc_by_3plus_html: >-
        Ces données sont disponibles sous <a href="https://creativecommons.org/licenses/by/3.0/us"
        target="_blank">une licence Creative Commons Attribution
        version 3.0 ou ultérieure (CC-BY-3.0+)</a>. Chacun peut
        librement partager et adapter les données, à condition
        de créditer leur origine. Veuillez créditer %{user} et
        les contributeurs du badge des meilleures pratiques de
        la CII.<br><br>
      cc_by_3only_html: >-
        Ces données sont disponibles sous <a href="https://creativecommons.org/licenses/by/3.0/us"
        target="_blank">licence Creative Commons Attribution version
        3.0 (CC-BY-3.0) </a> comme indiqué dans les <a href="https://www.linuxfoundation.org/terms"
        target="_blank">conditions d'utilisation</a> de la <a
        href="https://www.coreinfrastructure.org/" target="_blank">Core
        Infrastructure Initiative</a>. Chacun peut librement partager
        et adapter les données, à condition de créditer leur origine.
        Veuillez créditer %{user} et les contributeurs du badge
        des meilleures pratiques de la CII.<br><br>
      owned_by: 'Soumission du badge du projet appartenant à :'
      created_at_html: "<strong>Soumission créée le</strong> %{when},"
      updated_at_html: "<strong>dernière mise à jour le</strong>
        %{when}."
      last_lost_html: Le dernier badge perdu l'a été le %{when}.
      last_achieved_html: Le dernier badge obtenu l'a été le %{when}.
    edit:
      submit_cc_by_3plus_html: >-
        En soumettant ces données sur le projet, vous acceptez
        de les publier sous au moins <a href="https://creativecommons.org/licenses/by/3.0/us"
        target="_blank">une licence Creative Commons Attribution
        version 3.0 ou ultérieure (CC-BY-3.0+)</a>. Cela signifie
        que tous sont libres de partager et d'adapter les données,
        mais ils doivent créditer leur origine. Vous conservez
        le droit d'auteur (le cas échéant) et la licence du projet
        n'est pas affectée.<br><br>
      save_and_continue: Sauvegarder (et continuer)
      submit_and_exit: Soumettre (et quitter)
      repo_url_limits: Vous ne pouvez modifier votre repo_url
        que de http à https
      changed_since_html: >-
        Un autre utilisateur a apporté une modification à cet
        enregistrement depuis que vous avez accédé au formulaire
        d'édition. <br>Veuillez ouvrir un nouveau <a href="%{edit_url}"
        target="_blank">formulaire d'édition</a> pour transférer
        vos modifications.
      successfully_updated: Le projet a été mis à jour avec succès.
      congrats_new: >-
        FÉLICITATIONS pour l'obtention d'un badge %{new_badge_level}
        ! Si vous ne l'avez pas encore fait, indiquez le statut
        de votre badge sur la page de votre projet (voir le texte
        « comment l'intégrer » ci-dessous si vous ne savez pas
        comment le faire).
      lost_badge: Le projet a perdu un badge.
      static_analysis_updated_html: >-
        Nous avons mis à jour nos exigences pour le critère <a
        href="#static_analysis">static_analysis</a>. Veuillez
        ajouter une justification pour ce critère.
      edit_status: Éditer le statut du badge du projet
    form_basics:
      project_name:
        description: Quel est le nom intelligible du projet ?
        details: Notez que d'autres projets peuvent utiliser le
          même nom.
        placeholder: Nom du projet FLOSS
      description:
        description: Pouvez-vous donner une brève description
          du projet ?
        details: >-
          Inclure des commentaires clés sur le projet. Utiliser
          la syntaxe markdown. Cette information est utilisée
          lors de l'affichage des informations de badge.
        placeholder: Description du projet
      homepage_url:
        description: Quelle est l'URL du projet (dans son ensemble)
          ?
        placeholder: URL du site Web du projet
      repo_url:
        description: >-
          Quelle est l'URL du dépôt sous contrôle de version (qui
          peut être la même que l'URL du projet) ?
        placeholder: URL du dépôt du projet
      implementation_languages:
        description: >-
          Quel(s) langage(s) de programmation sont utilisés pour
          implémenter le projet ?
        details: >-
          S'il y a plus d'un langage, listez-les en tant que valeurs
          séparées par des virgules (espaces facultatifs) et triez-les
          du plus au moins utilisé. S'il y a une longue liste,
          veuillez lister au moins les trois premiers. S'il n'y
          a pas de langage (par exemple, il s'agit d'un projet
          uniquement de documentation ou de test), utilisez le
          caractère unique « - ». Utilisez une capitalisation
          conventionnelle pour chaque langage, par exemple « JavaScript
          ».
        placeholder: >-
          Langage(s) d'implémentation utilisé(s), présentés sous
          forme d'une liste séparée par des virgules, triés par
          utilisation décroissante
      cpe:
        description_html: >-
          Quel est le nom de <a href="https://nvd.nist.gov/cpe.cfm">plate-forme
          commune d'énumération (CPE)</a> pour le projet (s'il
          en a un) ?
        details_html: >-
          La <a href="https://nvd.nist.gov/cpe.cfm">plate-forme
          commune d'énumération (CPE)</a> est un schéma de dénomination
          structuré pour les systèmes, les logiciels et les paquetages
          des technologies de l'information. Il est utilisé dans
          un certain nombre de systèmes et de bases de données
          pour signaler des vulnérabilités.
        placeholder: "(Facultatif) nom CPE"
      license:
        description_html: Sous quelle(s) licence(s) le projet
          est-il distribué ?
        details_html: >-
          Utilisez un <a href="https://spdx.org/licenses/">format
          d'expression de licence SPDX</a> ; des exemples sont
          « Apache-2.0 », « BSD-2-Clause », « BSD-3-Clause »,
          « GPL-2.0+ », « LGPL-3.0+ », « MIT » et « (BSD-2-Clause
          OU Ruby) ».
        placeholder: Licence FLOSS
      additional_rights_changes:
        description: >-
          (Avancé) Quels autres utilisateurs ont les droits supplémentaires
          pour modifier cette soumission de badge? Actuellement
          : %{current_rights}
        details_html: >-
          La plupart des projets devraient ignorer ce champ. Les
          soumissions de badge des projets peuvent toujours être
          modifiées par le propriétaire de la soumission de badge
          (créateur), les administrateurs de BadgeApp et toute
          personne qui peut committer dans le dépôt GitHub (s'il
          est sur GitHub). Si vous souhaitez que quelqu'un d'autre
          puisse modifier cette soumission de badge et que vous
          ayez déjà des droits d'édition sur cette soumission
          de badge de projet, vous pouvez ajouter d'autres utilisateurs
          avec des droits d'édition. Entrez simplement « + » suivi
          d'une liste d'entiers d'identifiants utilisateur séparés
          par des virgules. Ces utilisateurs seront également
          autorisés à modifier cette soumission de projet. Si
          vous êtes le propriétaire de la soumission du badge
          ou un administrateur BadgeApp, vous pouvez supprimer
          des utilisateurs de cette liste en entrant « - » suivi
          d'une liste d'entiers d'identifiants utilisateur séparés
          par des virgules. Cette application utilise un verrouillage
          optimiste pour éviter de sauvegarder des données périmées
          si plusieurs utilisateurs essaient de faire des modifications
          simultanément. Seuls les propriétaires de cette soumission
          de projet et les administrateurs BadgeApp peuvent modifier
          ce champ.
        placeholder: >-
          Changer avec + ou - suivi d'une liste d'identifiants
          utilisateur séparés par des virgules
    form_early:
      badge_intro:
        description: >-
          Les projets qui suivent les meilleures pratiques ci-dessous
          seront en mesure de s'auto-certifier et de montrer qu'ils
          ont obtenu le badge de la Core Infrastructure Initiative
          (CII).
        details_html: >-
          Il n'existe aucun ensemble de pratiques qui garantissent
          que ce logiciel n'aura jamais de défauts ou de vulnérabilités
          ; même les méthodes formelles peuvent échouer si les
          spécifications ou les hypothèses sont fausses. Il n'y
          a pas non plus de pratiques qui peuvent garantir qu'un
          projet permettra de maintenir une communauté de développement
          saine et qui fonctionne bien. Toutefois, suivre les
          meilleures pratiques peut contribuer à améliorer les
          résultats des projets. Par exemple, certaines pratiques
          permettent la revue par plusieurs personnes avant publication,
          ce qui peut aider à trouver des vulnérabilités techniques
          difficiles à trouver autrement et à renforcer la confiance
          et un désir d'interaction répétée entre les développeurs
          de différentes entreprises. Pour gagner un badge, tous
          les critères DOIT et NE DOIT PAS doivent être satisfaits,
          tous les critères DEVRAIT doivent être satisfaits OU
          non satisfaits avec justification, <em>et</em> tous
          les critères PROPOSÉ doivent être satisfaits OU non
          satisfaits (nous voulons au moins qu'ils soient considérés).
          Les commentaires sont les bienvenus via le <a href="https://github.com/coreinfrastructure/best-practices-badge">site
          GitHub en tant que problèmes ou pull requests</a>. Il
          existe également une <a href="https://lists.coreinfrastructure.org/mailman/listinfo/cii-badges">liste
          de diffusion pour discussion générale</a>. <br /> <br
          /> Nous fournissons volontiers l'information dans plusieurs
          langues, cependant, s'il existe un conflit ou une contradiction
          entre les traductions, la version anglaise est la version
          qui fait autorité.
      got_badge:
        description_1: >-
          Si c'est votre projet, veuillez indiquer votre statut
          de badge sur votre page de projet ! Le statut du badge
          ressemble à ceci :
        description_2: 'Voici comment l''intégrer :'
        details_html: >-
          Vous pouvez afficher votre statut de badge en incorporant
          ceci dans votre fichier markdown : <br />%{markdown_embedding}<br
          /> ou en incorporant ceci dans votre HTML : <br />%{html_embedding}<br
          />
        editing_description_html: >-
          <strong>Veuillez « soumettre » souvent</strong> pour
          enregistrer votre travail (vous pouvez toujours revenir
          en arrière et éditer plus tard). <br><br> Si vous avez
          besoin d'aide, voulez poser une question ou voyez un
          problème, veuillez <em><a href="mailto:&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;">envoyer
          un email</a> </em>ou<em> <a href="https://github.com/coreinfrastructure/best-practices-badge/issues"
          target="_blank">signaler un problème</a></em>.
        badge_alt: Le niveau de badge pour le projet %{id} est
          %{level}
      level:
        0_html: >-
          Ce sont les critères du niveau %{passing}. Vous pouvez
          également afficher les critères des niveaux %{silver}
          ou %{gold}.
        1_html: >-
          Ce sont les critères du niveau %{silver}. Vous pouvez
          également afficher les critères des niveaux %{passing}
          ou %{gold}.
        2_html: >-
          Ce sont les critères du niveau %{gold}. Vous pouvez
          également afficher les critères des niveaux %{passing}
          ou %{silver}.
        '0': Basique
        '1': Argent
        '2': Or
    misc:
      disabled_reminders: >-
        (Avancé) Désactiver le rappel d'inactivité (nous vous
        recommandons de laisser ceci non sélectionné)
      general_comments:
        description: 'Autres commentaires généraux sur le projet
          :'
        placeholder: Commentaires additionnels (en syntaxe markdown)
      some_not_crypto_html: >-
        Notez que certains logiciels n'ont pas besoin d'utiliser
        des mécanismes cryptographiques.
      dont_use_crypto: >-
        Appuyez ici si le logiciel produit par le projet n'utilise
        pas de mécanismes cryptographiques
      future_header_html: >-
        Ce sont des critères que nous avons l'intention d'ajouter
        dans un proche avenir, mais qui ne sont <em>pas</em> actuellement
        requis pour un badge. Cette période de grâce permet aux
        projets de se mettre à jour par rapport aux critères modifiés
        et de conserver leur badge au fur et à mesure que les
        meilleures pratiques s'améliorent.
      in_javascript:
        collapse_all_title: Réduire tous les panneaux
        collapse_all: Réduire les panneaux
        expand_all_title: Développer tous les panneaux
        expand_all: Développer les panneaux
        show_details: Afficher les détails
        hide_details: Masquer les détails
        show_all_details: Afficher tous les détails
        hide_all_details: Masquer tous les détails
        show_met_title: Afficher les critères atteints & N/A
        show_met_html: Afficher atteints &amp; N/A
        hide_met_title: >-
          Masquer les critères atteints & N/A (en laissant les
          critères non satisfaits et inconnus)
        hide_met_html: Masquer atteints &amp; N/A
        passing_alt: Assez pour un badge !
        barely_alt: À peine suffisant pour un badge.
        failing_alt: Pas assez pour un badge.
        unknown_alt: Informations inconnues requises, pas assez
          pour un badge.
        met_url_placeholder: >-
          (URL requise) Veuillez expliquer comment cela est atteint,
          en incluant 1+ URL clés.
        met_justification_placeholder: >-
          (Obligatoire) Veuillez expliquer comment cela est atteint,
          en incluant peut-être 1+ URL clés.
        met_placeholder: >-
          (Facultatif) Veuillez expliquer comment cela est atteint,
          en incluant peut-être 1+ URL clés.
        unmet_placeholder: >-
          Expliquez pourquoi il est acceptable que cela ne soit
          pas satisfait, en incluant 1+ URL clés.
        na_justification_placeholder: >-
          (Obligatoire) Veuillez expliquer pourquoi cela ne s'applique
          pas (N/A), en incluant peut-être 1+ URL clés.
        na_placeholder: >-
          (Facultatif) Expliquez pourquoi cela ne s'applique pas
          (N/A), en incluant peut-être 1+ URL clés.
        unknown_placeholder: Expliquez s'il vous plaît
      toggle_details_title: Basculer le texte détaillé
      details: Détails
      url_required: URL requise
      future_criterion: Critère futur
      url_required_warning: >-
        Attention : une URL est requise, mais aucune URL n'a été
        trouvée.
      justification_required_warning: 'Attention : cela nécessite
        une justification plus longue.'
    delete:
      done: Le projet a été supprimé avec succès.
  user_mailer:
    account_activation:
      before_html: |-
        <h1>Programme de badge des Meilleures Pratiques de lq CII</h1>
        <p>Bonjour,</p>
        <p>
        Bienvenue dans le programme de badge !
        Cliquez sur le lien ci-dessous pour activer votre compte :
        </p>
      before_text: |
        Bonjour,
        Bienvenue dans le programme de badge des Meilleures Pratiques de la CII !
        Cliquez sur le lien ci-dessous pour activer votre compte :
      activate: Activer
      subject: Activation de compte
    github_welcome:
      before_html: |
        <h1>Programme de badge des Meilleures Pratiques de la CII</h1>
        <p>Bonjour,</p>
        <p>
        Merci d'avoir relié votre compte GitHub et bienvenue
        au programme de badge des Meilleures Pratiques de la CII !
        </p>
        <p>
        Si vous n'êtes pas à l'origine de cette action, vérifiez votre
        journal de sécurité GitHub sous Paramètres&gt;Sécurité.
        </p>
      before_text: |
        Bonjour,
        Merci d'avoir relié votre compte GitHub et bienvenue
        au programme de badge des Meilleures Pratiques de la CII !
        Si vous n'êtes pas à l'origine de cette action, vérifiez votre
        journal de sécurité GitHub sous Paramètres>Sécurité.
      subject: Bienvenue dans le programme de badge
    password_reset:
      before_html: |
        <h1>Réinitialisation du mot de passe</h1>
        <p>Pour réinitialiser votre mot de passe, cliquez sur le lien ci-dessous :</p>
      before_text: >-
        Pour réinitialiser votre mot de passe, cliquez sur le
        lien ci-dessous :
      after_html: |
        <p>Ce lien expirera d'ici deux heures.</p>
        <p>
        Si vous n'avez pas demandé à réinitialiser votre mot de passe,
        ignorez cet email et votre mot de passe restera identique.
        </p>
      after_text: |
        Ce lien expirera d'ici deux heures.
        Si vous n'avez pas demandé à réinitialiser votre mot de passe,
        ignorez cet email et votre mot de passe restera identique.
      reset_password: Réinitialiser le mot de passe
      subject: Réinitialisation du mot de passe
    user_update:
      before_text: >-
        Certaines des données utilisateur de votre compte ont
        été mises à jour.
      username_changed: Nom d'utilisateur modifié.
      email_changed: Adresse email modifiée.
      password_changed: Mot de passe modifié.
      locale_changed: Langue modifiée.
      current_state: 'Pour l''état actuel, voir :'
      after_text: Veuillez nous avertir en cas de problème.
      subject: Données utilisateur modifiées
  submit: Soumettre
  account_activations:
    activated: Compte activé !
    failed_activation: Lien d'activation invalide
  password_resets:
    forgot_password: Mot de passe oublié
    reset_password: Réinitialiser le mot de passe
    password_confirmation: Confirmation
    email_not_found: Adresse e-mail introuvable
    password_empty: Le mot de passe ne peut pas être vide
    password_reset: Le mot de passe a été réinitialisé
    instructions_sent: >-
      E-mail envoyé avec les instructions de réinitialisation
      du mot de passe
    cant_reset_nonlocal: >-
      Désolé, il n'est pas possible de réinitialiser le mot de
      passe pour un utilisateur non local
    reset_expired: La réinitialisation du mot de passe est expirée.
    update_password: Mise à jour du mot de passe
  report_mailer:
    new_project_heading: >-
      Merci d'avoir ajouté votre projet au programme de badge
      des Meilleures Pratiques
    new_project_part1: |-
      Merci d'avoir ajouté votre projet au programme de badge des Meilleures Pratiques.
      Le nom actuel que nous avons pour ce projet est :
    new_project_part2: |-
      Veuillez visiter votre soumission pour compléter les informations et obtenir votre badge !
      Voici l'URL de votre soumission :
    new_project_part3_html: "<p>\nNous vous encourageons à continuer
      à progresser.\n</p>\n<p>\nSi vous voulez voir <em>seulement</em>
      ce qui vous manque,\nvisitez votre soumission \npuis cliquez
      sur le bouton près du haut étiqueté « Masquer atteints &
      N/A ».\nSi vous avez des questions ou avez besoin d'aide,
      contactez-nous à\n<a href=\"mailto:&#99;ii&#45;badges&#45;questions&#45.own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;\">&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;</a>
      \nou reportez un problème sur\n<a href=\"https://github.com/coreinfrastructure/best-practices-badge/issues\">
      https://github.com/coreinfrastructure/best-practices-badge/issues
      </a>\n(cliquez sur « nouveau problème »).\n</p>\n\n<p>\nMerci
      pour vos efforts.\n</p>\n"
    new_project_part3_text: |
      Nous vous encourageons à continuer à progresser.
      Si vous voulez voir seulement ce qui vous manque, visitez votre soumission puis cliquez sur le bouton près du haut étiqueté « Masquer atteints & N/A ».
      Si vous avez des questions ou avez besoin d'aide, contactez-nous à
      cii-badges-questions-owner@lists.coreinfrastructure.org
      ou reportez un problème sur
      https://github.com/coreinfrastructure/best-practices-badge/issues
      (cliquez sur « nouveau problème »).
      Merci pour vos efforts.
    in_markdown_add: 'En markdown, vous pouvez ajouter ceci :'
    in_html_add: 'En HTML, vous pouvez ajouter ceci :'
    ending: >-
      --- David A. Wheeler, Directeur Technique du programme CII
      Best Practices Badge
    subject_achieved_passing: >-
      FÉLICITATIONS pour l'obtention d'un badge %{new_level} des
      meilleures pratiques !
    subject_no_longer_passing: Votre badge des meilleures pratiques
      n'est plus %{old_level}
    subject_new_project: >-
      Vous avez ajouté un projet au programme de badge des meilleures
      pratiques de la CII
    subject_reminder: >-
      Votre projet n'a pas encore le badge « meilleures pratiques
      »
    subject_project_deleted: Le projet %{project_id} nommé %{project_name}
      a été supprimé
    gained_level_part1: |
      Toutes nos félicitations!
      Selon les informations que vous avez fournies,
      votre projet a obtenu le badge '%{new_level}' des meilleures pratiques de la CII.
      Pour plus d'informations, consultez cette URL :
    gained_level_part2: |-
      Ajoutez votre badge à votre projet et/ou site de dépôt ;
      vous l'avez mérité :
    gained_level_part3: |
      Nous vous encourageons vivement à ajouter ou à améliorer le texte de justification,
      y compris par l'ajout d'URL qui redirigent vers plus d'informations.
      Si vous avez des suggestions sur la façon d'améliorer les critères ou
      l'application Web du badge, veuillez soumettre un problème sur :
      https://github.com/coreinfrastructure/best-practices-badge/issues
      Si vous avez apporté des modifications à votre projet pour obtenir un badge, veuillez nous le faire savoir
      par email à cii-badges-questions@lists.coreinfrastructure.org.
      L'un de nos objectifs est d'encourager les projets à apporter des améliorations.
      Nous mettons certains de ces rapports sur le wiki public ; veuillez nous en informer
      si vous ne souhaitez PAS que les changements soient publiés publiquement à
      https://github.com/coreinfrastructure/best-practices-badge/wiki/Impacts
      Merci et félicitations.
    lost_level_message: |-
      Nous sommes désolés, mais votre projet n'a plus le badge « %{old_level} »
      et est maintenant « %{new_level} ».
      Consultez l'URL suivante pour plus d'informations :
    reminder_body_html: "<h1>Rappel automatique du badge des meilleures
      pratiques pour %{project_name}</h1>\n<p>\nCeci est un rappel
      automatisé que votre projet\n« %{project_name} »\nn'a pas
      actuellement de badge « meilleures pratiques »,\net son
      entrée de badge n'a pas été mise à jour depuis un moment.\n</p>\n<p>\nVotre
      entrée de badge des meilleures pratiques est à\n<a href=\"%{project_info_url}\">%{project_info_url}</a>\net
      a été mis à jour pour la dernière fois le %{project_updated_at}.\nIl
      est actuellement à %{project_badge_percentage_0}% (sur 100%).\n</p>\n\n<p>\nNous
      vous encourageons à continuer à progresser.\nVeuillez visiter
      votre entrée de badge à\n<a href=\"%{project_info_url}\">%{project_info_url}</a>\npour
      compléter l'information et obtenir votre badge !\n</p>\n\n<p>\nSi
      vous voulez voir <em>seulement</em> ce qui vous manque,
      visitez votre entrée de badge,\nsélectionnez le bouton près
      du haut étiqueté « Développer les panneaux », \npuis sélectionnez
      le bouton près du sommet étiqueté « Masquer atteints & N/A
      ».\nSi vous avez des questions ou si vous avez besoin d'aide,
      veuillez contacter\n<a href=\"mailto:&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;\">&#99;ii&#45;badges&#45;questions&#45;own&#101;r&#64;lists&#46;coreinfrastructure&#46;or&#103;</a>\nou
      reporter un problème à\n<a href=\"https://github.com/coreinfrastructure/best-practices-badge/issues\">https://github.com/coreinfrastructure/best-practices-badge/issues</a>\n(cliquez
      sur « nouveau problème »).\n</p>\n\n<p>\nNous n'envoyons
      pas de rappels si vous continuez à mettre à jour votre entrée
      de badge, et nous envoyons seulement des rappels environ
      tous les 30-60 jours. Cependant, si vous souhaitez désactiver
      ces messages de rappel, modifiez votre entrée de badge à
      <a href=\"%{project_info_url}\">%{project_info_url}</a>\npour
      activer « Désactiver le rappel d'inactivité ».\nNous espérons
      que vous continuerez à travailler sur votre soumission pour
      finalement obtenir le badge.\n</p>\n\n<p>\nMerci pour votre
      attention.\n</p>"
    reminder_body_text: "Ceci est un rappel automatisé que votre
      projet\n« %{project_name} »\nn'a pas actuellement de badge
      « meilleures pratiques »,\net son entrée de badge n'a pas
      été mise à jour depuis un moment.\nVotre entrée de badge
      des meilleures pratiques est à\n%{project_info_url}\net
      a été mis à jour pour la dernière fois le %{project_updated_at}.\nIl
      est actuellement à %{project_badge_percentage_0}% (sur 100%).\n\nNous
      vous encourageons à continuer à progresser.\nVeuillez visiter
      votre entrée de badge à\n%{project_info_url}\npour compléter
      l'information et obtenir votre badge !\n\nSi vous voulez
      voir seulement ce qui vous manque, visitez votre entrée
      de badge,\nsélectionnez le bouton près du haut étiqueté
      « Développer les panneaux », \npuis sélectionnez le bouton
      près du sommet étiqueté « Masquer atteints & N/A ».\nSi
      vous avez des questions ou si vous avez besoin d'aide, veuillez
      contacter\ncii-badges-questions-owner@lists.coreinfrastructure.org\nou
      reporter un problème à\nhttps://github.com/coreinfrastructure/best-practices-badge/issues\n(cliquez
      sur « nouveau problème »).\n\nNous n'envoyons pas de rappels
      si vous continuez à mettre à jour votre entrée de badge,
      et nous envoyons seulement des rappels environ tous les
      30-60 jours. Cependant, si vous souhaitez désactiver ces
      messages de rappel, modifiez votre entrée de badge à %{project_info_url}\npour
      activer « Désactiver le rappel d'inactivité ».\nNous espérons
      que vous continuerez à travailler sur votre soumission pour
      finalement obtenir le badge.\n\nMerci pour votre attention."
  project_name_unknown: "(Nom inconnu)"
  locale_name:
    en: Anglais / English (en)
    fr: Français (fr)
    zh-CN: Chinois (simplifié) / 简体 中文 (zh-CN)
    de: Allemand / Deutsch (de)
    ja: Japonais / 日本語 (ja)
    ru: Russe / Русский (ru)
  criteria:
    '0':
      description_good:
        description: >-
          Le site du projet DOIT décrire succinctement ce que
          le logiciel fait (quel problème résout-il ?).
        details: >-
          Cela DOIT être dans un langage que les utilisateurs
          potentiels peuvent comprendre (par exemple, il utilise
          un jargon minimal).
        met_placeholder: >-
          (Facultatif) Où est la description succincte ? Envisagez
          de fournir une URL.
      interact:
        description: >-
          Le site Web du projet DOIT fournir des informations
          sur la façon d'obtenir, de fournir des commentaires
          (comme des signalements de bogues ou des demandes d'amélioration)
          et de contribuer au logiciel.
        met_placeholder: >-
          (Facultatif) Où est cette information ? Envisagez de
          fournir des URL(s).
      contribution:
        description: >-
          L'information sur la façon de contribuer DOIT expliquer
          le processus de contribution (par exemple, les pull
          requests sont-ils utilisés ?)
        details: >-
          Nous supposons que <a href="https://guides.github.com/activities/contributing-to-open-source/">les
          projets sur GitHub utilisent les problèmes et les pull
          requests</a>, sauf indication contraire. Cette information
          peut être courte, par exemple, en indiquant que le projet
          utilise les pull requests, un suivi des problèmes ou
          des messages dans une liste de diffusion (laquelle ?)
        met_placeholder: >-
          (URL requise) Quel est le processus ? Quelle URL l'explique
          ?
      contribution_requirements:
        description: >-
          Les informations sur la façon de contribuer DEVRAIENT
          inclure les exigences pour des contributions acceptables
          (par exemple, une référence à toute norme de codage
          requise).
        unmet_placeholder: >-
          Pourquoi les exigences sont-elles si évidentes que cette
          information n'est pas nécessaire ?
      floss_license:
        description: >-
          Le logiciel produit par le projet DOIT être distribué
          en tant que FLOSS.
        details: >-
          FLOSS est un logiciel distribué d'une manière qui répond
          à la <a href="https://opensource.org/osd-annotated">Définition
          de l'Open Source</a> ou à la <a href="http://www.gnu.org/philosophy/free-sw.fr.html">Définition
          du Logiciel Libre</a>. Des exemples de ces licences
          sont <a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>,
          <a href="https://opensource.org/licenses/MIT">MIT</a>,
          <a href="https://opensource.org/licenses/BSD-2-Clause">BSD
          2-clause</a>, <a href="https://opensource.org/licenses/BSD-3-Clause">BSD
          3-clause révisée</a>, <a href="https://opensource.org/licenses/Apache-2.0">Apache
          2.0</a>, <a href="https://opensource.org/licenses/lgpl-license">Lesser
          GNU General Public License (LGPL)</a>, et <a href="https://opensource.org/licenses/gpl-license">GNU
          General Public License (GPL)</a>. Pour nos besoins,
          cela signifie que la licence DOIT être : <ul> <li> <a
          href="https://opensource.org/licenses">une licence approuvée
          par l'Open Source Initiative (OSI)</a>, ou </li> <li>
          <a href="https://www.gnu.org/licenses/license-list.html">une
          licence libre approuvée par la Free Software Foundation
          (FSF)</a>, ou </li> <li> <a href="https://www.debian.org/legal/licenses/">une
          licence libre acceptable pour Debian main</a> ou </li>
          <li><a href="https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing">une
          « bonne » licence selon Fedora</a>. </li> </ul> Le logiciel
          PEUT également être distribué avec d'autres licences
          (par exemple, « GPLv2 ou propriétaire » est acceptable).
      floss_license_osi:
        description: >-
          Il est PROPOSÉ que toute licence requise pour le logiciel
          produit par le projet soit <a href="https://opensource.org/licenses">approuvée
          par l'Open Source Initiative (OSI).</a>
        details: >-
          L'OSI utilise un processus d'approbation rigoureux pour
          déterminer quelles licences sont OSS.
      license_location:
        description: >-
          Le projet DOIT afficher la ou les licences de ses résultats
          dans un emplacement standard dans leur dépôt source.
        details: >-
          Par exemple, dans un fichier à la racine du dépôt appelé
          LICENSE ou COPYING. Les noms de fichiers de licence
          PEUVENT être suivis d'une extension telle que « .txt
          » ou « .md ».
      documentation_basics:
        description: >-
          Le projet DOIT fournir une documentation de base pour
          le logiciel produit par le projet.
        details: >-
          Cette documentation doit se trouver dans un certain
          format (comme le texte ou la vidéo) qui comprend : comment
          l'installer, comment le démarrer, comment l'utiliser
          (éventuellement avec un tutoriel à l'aide d'exemples)
          et comment l'utiliser en toute sécurité (par exemple,
          quoi faire et ne pas faire) si c'est un sujet approprié
          pour le logiciel. La documentation de sécurité n'a pas
          besoin d'être longue. Le projet PEUT utiliser des liens
          hypertextes vers du matériel hors projet en tant que
          documentation. Si le projet ne produit pas de logiciel,
          choisissez « non applicable » (N/A).
        met_placeholder: >-
          (Facultatif) Quelle(s) URL(s) sont les points de départ
          pour la documentation ?
      documentation_interface:
        description: >-
          Le projet DOIT fournir une documentation de référence
          qui décrit l'interface externe (entrée et sortie) du
          logiciel produit par le projet.
        details: >-
          La documentation d'une interface externe explique à
          un utilisateur final ou un développeur comment l'utiliser.
          Cela inclut son interface de programmation (API) si
          le logiciel en possède une. S'il s'agit d'une bibliothèque,
          documentez les principales classes / types et méthodes
          / fonctions pouvant être appelés. S'il s'agit d'une
          application Web, définissez son interface URL (souvent
          son interface REST). S'il s'agit d'une interface de
          ligne de commande, documentez les paramètres et les
          options qu'elle supporte. Dans de nombreux cas, il est
          préférable que la plupart de cette documentation soit
          générée automatiquement, de sorte que cette documentation
          reste synchronisée avec le logiciel au fur et à mesure
          qu'il change, mais cela n'est pas nécessaire. Le projet
          PEUT utiliser des liens hypertextes vers du matériel
          hors projet en tant que documentation. La documentation
          PEUT être générée automatiquement (quand c'est possible,
          c'est souvent la meilleure façon de le faire). La documentation
          d'une interface REST peut être générée à l'aide de Swagger
          / OpenAPI. La documentation de l'interface de code PEUT
          être générée à l'aide d'outils tels que <a href="http://usejsdoc.org/">JSDoc</a>
          (JavaScript), <a href="https://esdoc.org/">ESDoc</a>
          (JavaScript), pydoc (Python) et Doxygen (plusieurs).
          Le simple fait d'avoir des commentaires dans le code
          source n'est pas suffisant pour satisfaire ce critère
          ; il doit y avoir un moyen simple de voir l'information
          sans lire l'intégralité du code source. Si le projet
          ne produit pas de logiciel, choisissez « non applicable
          » (N/A).
      sites_https:
        description: >-
          Les sites du projet (site Web, dépôt et URLs de téléchargement)
          DOIVENT supporter HTTPS en utilisant TLS.
        details: >-
          Vous pouvez obtenir des certificats gratuits de <a href="https://letsencrypt.org/">
          Let's Encrypt</a>. Les projets PEUVENT implémenter ce
          critère en utilisant (par exemple) <a href="https://help.github.com/articles/securing-your-github-pages-site-with-https/">des
          pages GitHub</a>, <a href="https://about.gitlab.com/2016/12/24/were-bringing-gitlab-pages-to-community-edition/">des
          pages GitLab</a> ou <a href="https://sourceforge.net/blog/introducing-https-for-project-websites/">des
          pages de projet SourceForge</a>. Si vous utilisez des
          pages GitHub avec des domaines personnalisés, vous POUVEZ
          utiliser un réseau de distribution de contenu (CDN)
          comme proxy pour prendre en charge HTTPS, tel que décrit
          dans <a href="https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/">le
          post de blog « Secure and fast GitHub Pages with CloudFlare
          »</a>, pour satisfaire ce critère. Si vous autorisez
          HTTP, nous vous invitons instamment à rediriger le trafic
          HTTP vers HTTPS.
      discussion:
        description: >-
          Le projet DOIT avoir un ou plusieurs mécanismes de discussion
          (y compris les changements et les problèmes proposés)
          qui peuvent être recherchés, permettent de désigner
          les messages et les sujets par une URL, permettent aux
          nouvelles personnes de participer à certaines des discussions
          et ne nécessitent pas d'installation côté client de
          logiciels propriétaires.
        details: >-
          Parmi les exemples de mécanismes acceptables figurent
          les listes de diffusion archivées, les problèmes de
          GitHub et les discussions sur les pull requests, Bugzilla,
          Mantis et Trac. Les mécanismes de discussion asynchrones
          (comme IRC) sont acceptables s'ils répondent à ces critères
          ; assurez-vous qu'il existe un mécanisme d'archivage
          adressable par URL. Une solution propriétaire en JavaScript,
          tout en étant découragée, est autorisée.
      english:
        description: >-
          Le projet DEVRAIT fournir de la documentation en anglais
          et être en mesure d'accepter les signalements de bogues
          et les commentaires sur le code en anglais.
        details: >-
          L'anglais est actuellement la <a href="https://fr.wikipedia.org/wiki/Langue_v%C3%A9hiculaire">langue
          véhiculaire</a> des technologies informatiques ; l'utilisation
          de l'anglais augmente le nombre de développeurs et de
          relecteurs potentiels dans le monde entier. Un projet
          peut répondre à ce critère même si la langue principale
          de ses principaux développeurs n'est pas l'anglais.
      repo_public:
        description: >-
          Le projet DOIT avoir un dépôt source sous contrôle de
          version qui est publiquement lisible et possède une
          URL.
        details: >-
          L'URL PEUT être identique à l'URL du projet. Le projet
          PEUT utiliser des branches privées (non publiques) dans
          des cas spécifiques alors que la modification n'est
          pas diffusée publiquement (par exemple, pour la correction
          d'une vulnérabilité avant qu'elle ne soit révélée au
          public).
      repo_track:
        description: >-
          Le dépôt source du projet DOIT suivre les changements
          apportés, qui a effectué les changements et quand les
          changements ont été effectués.
      repo_interim:
        description: >-
          Pour permettre une analyse collaborative, le dépôt source
          du projet DOIT inclure des versions provisoires pour
          examen entre versions officielles ; Il NE DOIT PAS inclure
          que les dernières versions.
        details: >-
          Les projets PEUVENT choisir d'omettre des versions intermédiaires
          spécifiques dans leurs dépôts source publics (par exemple,
          celles qui corrigent des vulnérabilités de sécurité
          non publiques spécifiques, ne peuvent jamais être rendues
          publiques ou incluent des éléments qui ne peuvent être
          légalement publiés et ne sont pas dans la version finale).
      repo_distributed:
        description: >-
          Il est PROPOSÉ qu'un logiciel reconnu de contrôle de
          version distribué soit utilisé (par exemple, git) pour
          le dépôt source du projet.
        details: >-
          Git n'est pas spécifiquement requis et les projets peuvent
          utiliser un logiciel de contrôle de version centralisé
          (comme subversion) avec justification.
      version_unique:
        description: >-
          Les résultats du projet DOIVENT avoir un identifiant
          de version unique pour chaque version destinée à être
          utilisée par les utilisateurs.
        details: >-
          Cela PEUT être satisfait de diverses façons, y compris
          les identifiants de commit (comme git commit id ou mercure
          changeset id) ou un numéro de version (y compris les
          numéros de version qui utilisent la version sémantique
          ou les systèmes basés sur la date comme YYYYMMDD).
      version_semver:
        description: >-
          Il est PROPOSÉ que le <a href="http://semver.org">format
          de Versionage Sémantique (SemVer)</a> soit utilisé pour
          les numéros de versions.
        details: >-
          D'autres systèmes de numérotation de version, tels que
          les identifiants de commit (tels que git commit id ou
          mercurial changeset id) ou les systèmes basés sur la
          date comme YYYYMMDD, PEUVENT être utilisés comme numéros
          de version, car ils sont uniques. Certaines alternatives
          peuvent causer des problèmes, car les utilisateurs peuvent
          ne pas être en mesure de déterminer facilement s'ils
          sont à jour. SemVer peut être moins utile pour identifier
          les versions de logiciels si tous les destinataires
          n'exécutent que la dernière version (par exemple, c'est
          le code d'un seul site Web ou d'un service Internet
          qui est constamment mis à jour via une livraison continue).
      version_tags:
        description: >-
          Il est PROPOSÉ que les projets identifient chaque version
          dans leur système de contrôle de version. Par exemple,
          il est PROPOSÉ que ceux qui utilisent git identifient
          chaque version à l'aide des tags de git.
      release_notes:
        description: >-
          Le projet DOIT fournir, avec chaque distribution, des
          notes de version qui sont un résumé lisible par les
          humains des changements majeurs dans cette version afin
          d'aider les utilisateurs à déterminer s'ils doivent
          se mettre à niveau et quel sera l'impact de la mise
          à niveau. Les notes de version NE DOIVENT PAS être la
          sortie brute d'un journal de contrôle de version (par
          exemple, les résultats de la commande « git log » ne
          sont pas des notes de version). Les projets dont les
          résultats ne sont pas destinés à être réutilisés dans
          plusieurs emplacements (tels que le logiciel pour un
          site Web ou un service unique) ET qui utilisent la livraison
          continue PEUVENT sélectionner « N/A ».
        details: >-
          Les notes de version PEUVENT être mises en œuvre de
          différentes façons. De nombreux projets les fournissent
          dans un fichier nommé « NEWS », « CHANGELOG » ou « ChangeLog
          », éventuellement avec des extensions telles que « .txt
          », « .md » ou « .html ». Historiquement, le terme «
          journal des modifications » signifiait un enregistrement
          de <em>chaque</em> changement, mais pour répondre à
          ces critères, il faut un résumé lisible par un humain.
          Les notes de version PEUVENT être fournies à la place
          par des mécanismes de système de contrôle de version
          tels que le <a href="https://github.com/blog/1547-release-your-software">GitHub
          Releases workflow</a>.
      release_notes_vulns:
        description: >-
          Les notes de version DOIVENT identifier toutes les vulnérabilités
          publiquement connues qui sont résolues dans chaque nouvelle
          version. Il s'agit de « N/A » s'il n'y a pas de notes
          de version ou qu'il n'y a pas eu de vulnérabilité publique.
      report_process:
        description: >-
          Le projet DOIT fournir un processus permettant aux utilisateurs
          de soumettre des signalements de bogue (par exemple,
          en utilisant un suivi des problèmes ou une liste de
          diffusion).
      report_tracker:
        description: >-
          Le projet DEVRAIT utiliser un suivi des problèmes pour
          le suivi des problèmes individuels.
        unmet_placeholder: Pourquoi n'y a-t-il pas de suivi des
          problèmes ?
      report_responses:
        description: >-
          Le projet DOIT confirmer une majorité des signalements
          de bogues soumis au cours des 2 à 12 derniers mois (inclus)
          ; la réponse ne doit pas nécessairement inclure une
          correction.
      enhancement_responses:
        description: >-
          Le projet DEVRAIT répondre à une majorité (&gt;50%)
          des demandes d'amélioration au cours des 2 à 12 derniers
          mois (inclus).
        details: >-
          La réponse PEUT être « non » ou une discussion sur ses
          mérites. Le but est simplement qu'il y ait une réponse
          à certaines demandes, ce qui indique que le projet est
          toujours en vie. Aux fins de ce critère, les projets
          ne doivent pas compter les fausses demandes (par exemple,
          provenant de spammeurs ou de systèmes automatisés).
          Si un projet ne fait plus d'améliorations, sélectionnez
          « non satisfait » et incluez l'URL qui rend cette situation
          claire pour les utilisateurs. Si un projet tend à être
          submergé par le nombre de demandes d'amélioration, sélectionnez
          « non satisfait » et expliquez.
      report_archive:
        description: >-
          Le projet DOIT avoir une archive publique pour les signalements
          et les réponses pour une recherche ultérieure.
      vulnerability_report_process:
        description: >-
          Le projet DOIT publier le processus de signalement des
          vulnérabilités sur le site du projet.
        details: >-
          Par exemple, une adresse postale clairement désignée
          sur https://PROJECTSITE/security, souvent sous la forme
          security@example.org. Cela PEUT être identique à son
          processus de signalement des bogues. Les signalements
          de vulnérabilités PEUVENT toujours être publics, mais
          de nombreux projets disposent d'un mécanisme privé de
          signalement des vulnérabilités.
      vulnerability_report_private:
        description: >-
          Si les signalements de vulnérabilités privés sont pris
          en charge, le projet DOIT inclure la façon d'envoyer
          l'information de manière confidentielle.
        details: >-
          Des exemples incluent un signalement de défaut privé
          envoyé sur le Web en utilisant HTTPS (TLS) ou un courrier
          électronique chiffré à l'aide d'OpenPGP. Si les signalements
          de vulnérabilités sont toujours publics (donc il n'y
          a jamais de signalements de vulnérabilités privés),
          choisissez « non applicable » (N/A).
      vulnerability_report_response:
        description: >-
          Le temps de réponse initial du projet pour tout signalement
          de vulnérabilité reçu au cours des 6 derniers mois DOIT
          être inférieur ou égal à 14 jours.
        details: >-
          S'il n'y a pas eu de vulnérabilité signalée au cours
          des 6 derniers mois, choisissez « non applicable » (N/A).
      build:
        description: >-
          Si le logiciel produit par le projet nécessite d'être
          construit pour être utilisé, le projet DOIT fournir
          un système de construction fonctionnel qui peut reconstruire
          automatiquement le logiciel à partir du code source.
        details: >-
          Un système de construction détermine quelles actions
          doivent se produire pour reconstruire le logiciel (et
          dans quel ordre), puis exécute ces étapes. Par exemple,
          il peut invoquer un compilateur pour compiler le code
          source. Si un exécutable est créé à partir du code source,
          il doit être possible de modifier le code source du
          projet, puis de générer un exécutable mis à jour avec
          ces modifications. Si le logiciel produit par le projet
          dépend de bibliothèques externes, le système de construction
          n'a <em>pas</em> besoin de construire ces bibliothèques
          externes. S'il n'est pas nécessaire de construire quoi
          que ce soit pour utiliser le logiciel après la modification
          de son code source, sélectionnez « non applicable »
          (N/A).
      build_common_tools:
        description: >-
          Il est PROPOSÉ d'utiliser des outils courants pour la
          construction du logiciel.
        details: Par exemple, Maven, Ant, cmake, autotools, make
          ou rake.
      build_floss_tools:
        description: >-
          Le projet DEVRAIT être constructible en utilisant uniquement
          des outils FLOSS.
      test:
        description: >-
          Le projet DOIT utiliser au moins une suite de tests
          automatisée publiée publiquement comme FLOSS (cette
          suite de tests peut être maintenue sous la forme d'un
          projet FLOSS distinct).
        details: >-
          Le projet PEUT utiliser plusieurs suites de tests automatisées
          (par exemple, une qui s'exécute rapidement, par rapport
          à une autre qui est plus approfondie, mais nécessite
          un équipement spécial).
      test_invocation:
        description: >-
          Une suite de tests DEVRAIT être invocable d'une manière
          standard pour ce langage.
        details: Par exemple, « make check », « mvn test » ou
          « rake test ».
      test_most:
        description: >-
          Il est PROPOSÉ que la suite de tests couvre la plupart
          (ou idéalement toutes) les branches du code, les champs
          de saisie et les fonctionnalités.
      test_continuous_integration:
        description: >-
          Il est PROPOSÉ que le projet utilise une intégration
          continue (où le code nouveau ou modifié est fréquemment
          intégré dans un dépôt de code central et des tests automatisés
          sont exécutés sur le résultat).
      test_policy:
        description: >-
          Le projet DOIT avoir une politique générale (formelle
          ou non) qui spécifie que, dès qu'une nouvelle fonctionnalité
          majeure est ajoutée au logiciel produit par le projet,
          des tests de cette fonctionnalité devraient être ajoutés
          à une suite de tests automatisée.
        details: >-
          Dès qu'une politique est en place, même par le bouche
          à oreille, qui spécifie que les développeurs devraient
          ajouter des tests à une suite de tests automatisée pour
          toute nouvelle fonctionnalité importante, sélectionnez
          « Atteint ».
      tests_are_added:
        description: >-
          Le projet DOIT avoir la preuve que la <a href="#test_policy">politique
          de test</a> pour l'ajout de tests a été respectée dans
          les dernières modifications majeures apportées au logiciel
          produit par le projet.
        details: >-
          Les principales fonctionnalités sont généralement mentionnées
          dans les notes de version. La perfection n'est pas nécessaire,
          il suffit de prouver que les tests sont généralement
          ajoutés en pratique à la suite de tests automatisée
          lorsque de nouvelles fonctionnalités majeures sont ajoutées
          au logiciel produit par le projet.
      tests_documented_added:
        description: >-
          Il est PROPOSÉ que cette politique sur l'ajout de tests
          (voir <a href="#test_policy">la politique de test</a>)
          soit <em>documentée</em> dans les instructions pour
          les propositions de modification.
        details: >-
          Cependant, même une règle informelle est acceptable
          tant que les tests sont ajoutés dans la pratique.
      warnings:
        description: >-
          Le projet DOIT activer une ou plusieurs options d'avertissement
          du compilateur, un mode du langage « sûr » ou utiliser
          un outil « linter » séparé pour rechercher des erreurs
          de qualité de code ou des erreurs simples courantes,
          s'il existe au moins un outil FLOSS qui peut implémenter
          ce critère dans le langage sélectionné.
        details: >-
          Des exemples d'options d'avertissement du compilateur
          incluent « -Wall » pour gcc/clang. Des exemples d'un
          mode de langage « sûr » incluent « use strict » en JavaScript
          et « use warnings » de perl5. Un outil « linter » distinct
          est simplement un outil qui examine le code source pour
          rechercher des erreurs de qualité de code ou des erreurs
          simples courantes. Ceux-ci sont généralement activés
          par le code source ou par les instructions de construction.
      warnings_fixed:
        description: Le projet DOIT résoudre les avertissements.
        details: >-
          Ce sont les avertissements identifiés par la mise en
          œuvre du critère <a href="#warnings">warnings</a>. Le
          projet doit corriger les avertissements ou les marquer
          dans le code source comme faux positifs. Idéalement,
          il n'y aurait pas d'avertissement, mais un projet PEUT
          accepter certains avertissements (généralement moins
          de 1 avertissement pour 100 lignes ou moins de 10 avertissements).
      warnings_strict:
        description: >-
          Il est PROPOSÉ que les projets soient maximalement stricts
          avec les avertissements dans le logiciel produit par
          le projet, quand cela est approprié.
        details: >-
          Certains avertissements ne peuvent être efficacement
          activés sur certains projets. Ce qui est nécessaire
          est la preuve que le projet s'efforce d'activer les
          options d'avertissements où il peut, de sorte que les
          erreurs soient détectées tôt.
      know_secure_design:
        description: >-
          Le projet DOIT avoir au moins un développeur principal
          qui sait comment concevoir un logiciel sécurisé.
        details: >-
          Cela nécessite de comprendre les principes de conception
          suivants, y compris les 8 principes de <a href="http://web.mit.edu/Saltzer/www/publications/protection/">Saltzer
          et Schroeder</a> : <ul> <li>économie de moyens (maintenez
          la conception aussi simple et petite que pratique, par
          exemple en adoptant des simplifications conséquentes)
          <li>valeurs sûres par défaut (les décisions d'accès
          par défaut devraient être de refuser l'accès et l'installation
          des projets devrait être sécurisée par défaut) <li>médiation
          complète (tous les accès qui pourraient être limités
          doivent être vérifiés pour l'autorité et ne pas être
          contournables) <li>conception ouverte (les mécanismes
          de sécurité ne doivent pas dépendre de l'ignorance par
          l'attaquant de sa conception, mais plutôt d'informations
          plus facilement protégées et modifiées comme des clés
          et des mots de passe) <li>séparation des privilèges
          (idéalement, l'accès aux objets importants devrait dépendre
          de plus d'une condition, de sorte que la défaillance
          d'un système de protection n'autorisera pas l'accès
          complet. Par exemple, l'authentification multi-facteurs,
          comme l'exigence d'un mot de passe et d'un jeton matériel,
          est plus forte qu'une authentification à un seul facteur)
          <li>principe de plus faible privilège (les processus
          doivent fonctionner avec le minimum de privilège requis)
          <li>mécanisme de partage minimal (la conception devrait
          minimiser les mécanismes communs à plus d'un utilisateur
          et nécessaires à tous les utilisateurs, par exemple,
          les répertoires pour les fichiers temporaires) <li>acceptabilité
          psychologique (l'interface humaine doit être conçue
          pour faciliter l'utilisation - la conception pour «
          l'étonnement minimal » peut aider) <li>surface d'attaque
          limitée (la surface d'attaque - l'ensemble des différents
          points où un attaquant peut essayer d'entrer ou d'extraire
          des données - devrait être limitée) <li>validation d'entrée
          avec des listes blanches (les entrées devraient généralement
          être vérifiées pour déterminer si elles sont valides
          avant qu'elles ne soient acceptées ; cette validation
          devrait utiliser des listes blanches (qui n'acceptent
          que des bonnes valeurs connues), et non des listes noires
          (qui tentent de répertorier les valeurs mauvaises connues)).
          </ul> Un « développeur principal » dans un projet est
          celui qui connaît la base de code du projet, est à l'aise
          pour faire des modifications et est reconnu comme tel
          par la plupart des autres participants au projet. Un
          développeur principal a effectué généralement un certain
          nombre de contributions au cours de l'année écoulée
          (du code, de la documentation ou des réponses aux questions).
          Des développeurs sont généralement considérés comme
          des développeurs principaux s'ils ont lancé le projet
          (et n'ont pas quitté le projet il y a plus de trois
          ans), ont la possibilité de recevoir des informations
          sur un canal privé de déclaration de vulnérabilités
          (s'il y en a un), peuvent accepter des contributions
          au nom du projet, ou effectuer les distributions finales
          du logiciel du projet. S'il n'y a qu'un seul développeur,
          cette personne est le développeur principal.
      know_common_errors:
        description: >-
          Au moins l'un des principaux développeurs du projet
          DOIT connaître les types courants d'erreurs qui conduisent
          à des vulnérabilités dans ce genre de logiciel, ainsi
          qu'au moins une méthode pour contrer ou atténuer chacun
          d'eux.
        details: >-
          Des exemples (selon le type de logiciel) incluent l'injection
          SQL, l'injection OS, le débordement mémoire classique,
          le cross-site scripting, l'authentification manquante
          et l'autorisation manquante. Voir <a href="http://cwe.mitre.org/top25/">CWE/SANS
          top 25</a> ou <a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project">OWASP
          Top 10</a> pour les listes couramment utilisées.
      crypto_published:
        description: >-
          Le logiciel produit par le projet DOIT utiliser, par
          défaut, uniquement les protocoles cryptographiques et
          les algorithmes publiés publiquement et revus par des
          experts (si des protocoles et algorithmes cryptographiques
          sont utilisés).
        details: >-
          Ces critères cryptographiques ne s'appliquent pas toujours
          car certains logiciels n'ont pas besoin d'utiliser directement
          de capacités cryptographiques.
      crypto_call:
        description: >-
          Si le logiciel produit par le projet est une application
          ou une bibliothèque, et si son objectif principal n'est
          pas d'implémenter de la cryptographie, alors il DEVRAIT
          simplement appeler un logiciel spécialement conçu pour
          implémenter des fonctions cryptographiques ; il ne DEVRAIT
          PAS ré-implémenter les siennes.
      crypto_floss:
        description: >-
          Toutes les fonctionnalités du logiciel produit par le
          projet qui dépendent de la cryptographie DOIVENT être
          réalisables à l'aide de FLOSS.
        details: >-
          Consultez les <a href="https://opensource.org/osr">Exigences
          des standards ouverts pour les logiciels par l'Open
          Source Initiative</a>.
      crypto_keylength:
        description: >-
          Les mécanismes de sécurité dans le logiciel produit
          par le projet DOIVENT utiliser des longueurs de clés
          par défaut qui satisfont au moins aux exigences minimales
          du NIST jusqu'à l'année 2030 (comme indiqué en 2012).
          Il DOIT être possible de configurer le logiciel afin
          que les plus petites longueurs de clés soient complètement
          désactivées.
        details: >-
          Ces longueurs de bit minimales sont : pour une clé symétrique
          112, pour un modulo de factorisation 2048, pour une
          clé de logarithme discret 224, pour un groupe du logarithmique
          discret 2048, pour une courbe elliptique 224 et pour
          un hachage 224 (le hachage de mot de passe n'est pas
          couvert par cette longueur de bit, plus d'informations
          sur le hachage de mot de passe peuvent être trouvées
          dans le critère <a href="#crypto_password_storage">crypto_password_storage</a>).
          Voir <a href="http://www.keylength.com">http://www.keylength.com</a>
          pour une comparaison des recommandations sur les longueurs
          de clés de diverses organisations. Le logiciel PEUT
          permettre de plus petites longueurs de clés dans certaines
          configurations (idéalement non, car cela permet des
          attaques de dégradation, mais des longueurs de clés
          plus courtes sont parfois nécessaires pour l'interopérabilité).
      crypto_working:
        description: >-
          Les mécanismes de sécurité par défaut dans le logiciel
          produit par le projet NE DOIVENT PAS dépendre d'algorithmes
          cryptographiques brisés (par exemple, MD4, MD5, DES
          unique, RC4, Dual_EC_DRBG) ou utiliser des modes de
          chiffrement inappropriés dans le contexte (par exemple,
          le mode ECB n'est presque jamais approprié car il révèle
          des blocs identiques dans le texte chiffré comme en
          témoigne le <a href="https://blog.filippo.io/the-ecb-penguin/">pingouin
          ECB</a>, et le mode CTR est souvent inapproprié car
          il n'effectue pas d'authentification et provoque des
          doublons si l'état d'entrée est répété).
        details: >-
          Dans de nombreux cas, il est préférable de choisir un
          mode d'algorithme de chiffrement de bloc conçu pour
          combiner le secret et l'authentification, par exemple
          Galois/Counter Mode (GCM) et EAX. Les projets PEUVENT
          permettre aux utilisateurs d'activer les mécanismes
          cassés si nécessaire pour la compatibilité, mais les
          utilisateurs savent qu'ils le font.
      crypto_weaknesses:
        description: >-
          Les mécanismes de sécurité par défaut dans le logiciel
          produit par le projet NE DEVRAIENT PAS dépendre d'algorithmes
          ou de modes cryptographiques avec des faiblesses sérieuses
          connues (par exemple, l'algorithme de hachage cryptographique
          SHA-1 ou le mode CBC en SSH).
        details: >-
          Les préoccupations concernant le mode CBC en SSH sont
          discutées dans <a href="https://www.kb.cert.org/vuls/id/958563">CERT
          : vulnérabilité SSH CBC</a>.
      crypto_pfs:
        description: >-
          Les mécanismes de sécurité dans le logiciel produit
          par le projet DEVRAIENT implémenter la confidentialité
          persistante pour les protocoles d'échange de clés afin
          qu'une clé de session dérivée d'un ensemble de clés
          à long terme ne soit pas compromise si l'une des clés
          à long terme est compromise dans le futur.
      crypto_password_storage:
        description: >-
          Si le logiciel produit par le projet entraîne la sauvegarde
          de mots de passe pour l'authentification d'utilisateurs
          externes, les mots de passe DOIVENT être sauvegardés
          comme hachages itérés avec un salage par utilisateur
          en utilisant un algorithme d'étirement de clé (itéré)
          (par exemple PBKDF2, Bcrypt ou Scrypt).
        details: >-
          Ce critère s'applique uniquement lorsque le logiciel
          applique l'authentification des utilisateurs utilisant
          des mots de passe, telles que des applications Web côté
          serveur. Il ne s'applique pas dans les cas où le logiciel
          sauvegarde des mots de passe pour l'authentification
          dans d'autres systèmes (par exemple, le logiciel implémente
          un client pour un autre système), car au moins certaines
          parties de ce logiciel doivent avoir souvent accès au
          mot de passe en clair.
      crypto_random:
        description: >-
          Les mécanismes de sécurité dans le logiciel produit
          par le projet DOIVENT générer toutes les clés cryptographiques
          et les nonces en utilisant un générateur de nombres
          aléatoires cryptographiquement sécurisé, et NE DOIVENT
          PAS le faire en utilisant des générateurs qui ne seraient
          pas cryptographiquement sécurisés.
        details: >-
          Un générateur de nombres aléatoires cryptographiquement
          sécurisé peut être un générateur de nombres aléatoires
          matériel ou un générateur de nombres pseudo-aléatoires
          cryptographiquement sécurisé (CSPRNG) utilisant un algorithme
          tel que Hash_DRBG, HMAC_DRBG, CTR_DRBG, Yarrow ou Fortuna.
          Des exemples d'appels de générateurs de nombres aléatoires
          <em>sûrs</em> incluent java.security.SecureRandom en
          Java et window.crypto.getRandomValues ​​de JavaScript.
          Des exemples d'appels de générateurs de nombres aléatoires
          <em>non sûrs</em> incluent java.util.Random en Java
          et Math.random en JavaScript.
      delivery_mitm:
        description: >-
          Le projet DOIT utiliser un mécanisme de livraison qui
          contrecarre les attaques MITM. L'utilisation de https
          ou ssh+scp est acceptable.
        details: >-
          Un mécanisme encore plus fort distribue le logiciel
          sous forme de paquetages signés numériquement, car cela
          atténue les attaques sur le système de distribution,
          mais cela ne fonctionne que si les utilisateurs peuvent
          être convaincus que les clés publiques pour les signatures
          sont correctes <em>et</em> si les utilisateurs vérifient
          la signature.
      delivery_unsigned:
        description: >-
          Un hachage cryptographique (par exemple, un sha1sum)
          NE DOIT PAS être récupéré par http et utilisé sans vérifier
          une signature cryptographique.
        details: Ces hachages peuvent être modifiés en transit.
      vulnerabilities_fixed_60_days:
        description: >-
          Il NE DOIT PAS y avoir de vulnérabilités non corrigées
          de gravité moyenne ou élevée connues publiquement depuis
          plus de 60 jours.
        details: >-
          La vulnérabilité doit être corrigée et diffusée par
          le projet lui-même (les correctifs peuvent être développés
          ailleurs). Une vulnérabilité devient publique (à cet
          effet) une fois qu'il a un CVE avec des informations
          non payantes publiquement publiées (signalé, par exemple,
          dans la <a href="https://nvd.nist.gov/">Base de données
          Nationale des Vulnérabilités</a>) ou lorsque le projet
          a été informé et que l'information a été diffusée au
          public (éventuellement par le projet). Une vulnérabilité
          est de gravité moyenne à élevée si son score de base
          <a href="https://nvd.nist.gov/cvss.cfm">CVSS 2.0</a>
          est 4 ou supérieur. <strong>Note</strong> : cela signifie
          que les utilisateurs peuvent être laissés vulnérables
          à tous les attaquants du monde entier jusqu'à 60 jours.
          Ce critère est souvent beaucoup plus facile à atteindre
          que ce que Google recommande dans son <a href="https://security.googleblog.com/2010/07/rebooting-responsible-disclosure-focus.html">Redémarrage
          de la divulgation responsable</a>, car Google recommande
          que la période de 60 jours commence lorsque le projet
          est notifié <em>même</em> si le rapport n'est pas public.
      vulnerabilities_critical_fixed:
        description: >-
          Les projets DEVRAIENT corriger rapidement toutes les
          vulnérabilités critiques après leur signalement.
      no_leaked_credentials:
        description: >-
          Les dépôts publics NE DOIVENT PAS fuiter un certificat
          privé valide (par exemple, un mot de passe ou une clé
          privée) qui est destiné à limiter l'accès public.
        details: >-
          Un projet PEUT fuiter des « échantillons » de certificats
          pour les tests et pour des bases de données sans importance,
          pour autant qu'ils ne soient pas destinés à limiter
          l'accès public.
      static_analysis:
        description: >-
          Au moins un outil d'analyse de code statique DOIT être
          appliqué à toute distribution majeure proposée avant
          sa sortie s'il existe au moins un outil FLOSS qui implémente
          ce critère dans le langage sélectionné.
        details: >-
          Un outil d'analyse statique de code examine le code
          logiciel (au niveau du code source, du code intermédiaire
          ou de l'exécutable) sans l'exécuter avec des entrées
          spécifiques. Aux fins de ce critère, les avertissements
          du compilateur et les modes de langage « sûrs » ne comptent
          pas comme des outils d'analyse statique de code (ceux-ci
          évitent généralement une analyse approfondie car la
          rapidité est vitale). Des exemples de ces outils d'analyse
          statique de code incluent <a href="http://cppcheck.sourceforge.net/">cppcheck</a>,
          <a href="http://clang-analyzer.llvm.org/">clang static
          analyzer</a>, <a href="http://findbugs.sourceforge.net/">FindBugs</a>
          (y compris <a href="https://h3xstream.github.io/find-sec-bugs/">FindSecurityBugs</a>),
          <a href="https://pmd.github.io/">PMD</a>, <a href="http://brakemanscanner.org/">Brakeman</a>,
          <a href="https://scan.coverity.com/">Coverity Quality
          Analyzer</a>, et <a href="https://saas.hpe.com/en-us/software/sca">HP
          Enterprise Fortify Static Code Analyzer</a>. Des listes
          plus vastes d'outils peuvent être trouvées dans des
          endroits tels que <a href="https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis">la
          liste Wikipedia d'outils pour l'analyse statique de
          code</a>, <a href="https://www.owasp.org/index.php/Static_Code_Analysis">l'information
          OWASP sur l'analyse statique de code</a>, <a href="http://samate.nist.gov/index.php/Source_Code_Security_Analyzers.html">la
          liste NIST des analyseurs de sécurité du code source</a>
          et <a href="http://www.dwheeler.com/essays/static-analysis-tools.html">la
          liste des outils d'analyse statique de Wheeler</a >.
          <a href="https://continuousassurance.org/">SWAMP</a>
          est une plate-forme gratuite pour évaluer les vulnérabilités
          dans les logiciels utilisant une variété d'outils. S'il
          n'y a pas d'outil d'analyse statique FLOSS disponible
          pour le(s) langage(s) d'implémentation utilisés, sélectionnez
          « N/A ».
        na_placeholder: >-
          Pourquoi cela ne peut-il pas être satisfait (par exemple,
          il n'existe pas d'outils FLOSS pour ce langage) ?
        met_placeholder: Quel(s) outil(s) d'analyse statique sont
          utilisés ?
      static_analysis_common_vulnerabilities:
        description: >-
          Il est PROPOSÉ qu'au moins l'un des outils d'analyse
          statique utilisés pour le critère d'analyse statique
          inclue des règles ou des approches pour rechercher des
          vulnérabilités courantes dans le langage ou l'environnement
          analysé.
        details:
      static_analysis_fixed:
        description: >-
          Toutes les vulnérabilités exploitables de gravité moyenne
          et élevée découvertes avec une analyse statique de code
          DOIVENT être corrigées en temps approprié après leur
          confirmation.
        details: >-
          Une vulnérabilité est de gravité moyenne à élevée si
          son <a href="https://nvd.nist.gov/cvss.cfm">CVSS 2.0</a>
          est 4 ou supérieur.
      static_analysis_often:
        description: >-
          Il est PROPOSÉ que l'analyse statique du code source
          se produise à chaque commit ou au moins quotidiennement.
      dynamic_analysis:
        description: >-
          Il est PROPOSÉ qu'au moins un outil d'analyse dynamique
          soit appliqué à tout candidat pour une version majeure
          du logiciel avant sa distribution.
        details: >-
          Un outil d'analyse dynamique examine le logiciel en
          l'exécutant avec des entrées spécifiques. Par exemple,
          le projet PEUT utiliser un outil de fuzzing (par exemple,
          <a href="http://lcamtuf.coredump.cx/afl/">American Fuzzy
          Lop</a>) ou un scanner d'application Web (par exemple,
          <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">OWASP
          ZAP</a> ou <a href="http://w3af.org/">w3af</a>). Dans
          certains cas, le projet <a href="https://github.com/google/oss-fuzz#introduction">OSS-Fuzz</a>
          peut être prêt à appliquer des tests de fuzzing à votre
          projet. Aux fins de ce critère, l'outil d'analyse dynamique
          doit varier les entrées d'une manière ou d'une autre
          pour rechercher différents types de problèmes <em>ou</em>
          être une suite de test automatisée avec au moins 80%
          de couverture de branche. La <a href="https://en.wikipedia.org/wiki/Dynamic_program_analysis">page
          Wikipedia sur l'analyse dynamique</a> et la <a href="https://www.owasp.org/index.php/Fuzzing">page
          OWASP sur le fuzzing</a> identifient certains outils
          d'analyse dynamique. Le ou les outils d'analyse PEUVENT
          être axés sur la recherche de vulnérabilités de sécurité,
          mais cela n'est pas nécessaire.
      dynamic_analysis_unsafe:
        description: >-
          Il est PROPOSÉ que, si le logiciel produit par le projet
          comprend un logiciel écrit à l'aide d'un langage non
          sûr pour les accès mémoire (par exemple, C ou C ++),
          au moins un outil dynamique (par exemple, un fuzzer
          ou un scanner d'application Web) soit utilisé de façon
          routinière en combinaison avec un mécanisme pour détecter
          des problèmes de sécurité mémoire tels que les dépassements
          de zone mémoire. Si le projet ne produit pas de logiciel
          écrit dans un langage non sûr pour les accès mémoire,
          choisissez « non applicable » (N/A).
        details: >-
          Des exemples de mécanismes pour détecter les problèmes
          de sécurité de la mémoire comprennent <a href="https://github.com/google/sanitizers/wiki/AddressSanitizer">Address
          Sanitizer (ASAN)</a> (disponible dans GCC et LLVM),
          <a href="http://clang.llvm.org/docs/MemorySanitizer.html">Memory
          Sanitizer</a> et <a href="http://valgrind.org/">valgrind</a>.
          D'autres outils potentiellement utilisés incluent <a
          href="http://clang.llvm.org/docs/ThreadSanitizer.html">thread
          sanitizer</a> et <a href="http://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html">undefined
          behavior sanitizer</a>. La généralisation de l'utilisation
          des assertions fonctionnera également.
      dynamic_analysis_enable_assertions:
        description: >-
          Il est PROPOSÉ que le logiciel produit par le projet
          comprenne de nombreuses assertions à l'exécution qui
          sont vérifiées lors d'une analyse dynamique.
      dynamic_analysis_fixed:
        description: >-
          Toutes les vulnérabilités exploitables de gravité moyenne
          et élevée découvertes avec une analyse de code dynamique
          DOIVENT être corrigées en un temps approprié après leur
          confirmation.
        details: >-
          Une vulnérabilité est de gravité moyenne à élevée si
          son score de base <a href="https://nvd.nist.gov/cvss.cfm">CVSS
          2.0</a> est 4. Si vous n'utilisez pas d'analyse de code
          dynamique et donc n'avez trouvé aucune vulnérabilité
          de cette façon, choisissez « non applicable » (N/A).
      installation_common:
        description: >-
          Le projet DEVRAIT fournir un moyen d'installer et de
          désinstaller facilement le logiciel produit par le projet
          en utilisant une convention couramment utilisée.
        details: >-
          Des exemples comprennent l'utilisation d'un gestionnaire
          de paquets (au niveau du système ou du langage), « make/install/uninstall
          » (supportant DESTDIR), un conteneur dans un format
          standard ou une image de machine virtuelle dans un format
          standard. Le processus d'installation et de désinstallation
          (par exemple, son paquetage) PEUT être mis en œuvre
          par un tiers tant qu'il est FLOSS.
      build_reproducible:
        description: >-
          Il est PROPOSÉ que le projet possède une <a href="https://reproducible-builds.org/">construction
          reproductible</a>. Si aucune construction ne se produit
          (par exemple, les langages de script où le code source
          est utilisé directement au lieu d'être compilé), sélectionnez
          « non applicable » (N/A)
        details: >-
          Une construction reproductible signifie que plusieurs
          parties peuvent refaire indépendamment le processus
          de génération d'informations à partir de fichiers source
          et obtenir exactement le même résultat bit-à-bit. Dans
          certains cas, cela peut être résolu en forçant un ordre
          de tri. Les développeurs JavaScript peuvent envisager
          d'utiliser npm shrinkwrap et webpack OccurenceOrderPlugin.
          Les utilisateurs GGC et clang peuvent trouver l'option
          -frandom-seed utile. L'environnement de construction
          (y compris le jeu d'outils) peut souvent être défini
          pour les parties externes en spécifiant le hachage cryptographique
          d'un conteneur spécifique ou d'une machine virtuelle
          qu'ils peuvent utiliser pour la reconstruction. Le <a
          href="https://reproducible-builds.org/docs/">projet
          de construction reproductible dispose de documentation
          sur la façon de le faire</a>.
      crypto_used_network:
        description: >-
          Le logiciel produit par le projet DEVRAIT supporter
          des protocoles sécurisés pour toutes ses communications
          réseau, tels que SSHv2 ou ultérieur, TLS1.2 ou ultérieur
          (HTTPS), IPsec, SFTP et SNMPv3. Les protocoles non sûrs
          tels que FTP, HTTP, telnet, SSLv3 ou antérieur, et SSHv1
          DEVRAIENT être désactivés par défaut et uniquement activés
          si l'utilisateur le configure spécifiquement. Si le
          logiciel produit par le projet ne prend pas en charge
          les communications réseau, sélectionnez « non applicable
          » (N/A).
      crypto_tls12:
        description: >-
          Le logiciel produit par le projet DEVRAIT, s'il prend
          en charge ou utilise TLS, prendre en charge au moins
          TLS version 1.2. Notez que le prédécesseur de TLS s'appelait
          SSL. Si le logiciel n'utilise pas TLS, sélectionnez
          « non applicable » (N/A).
      crypto_certificate_verification:
        description: >-
          Le logiciel produit par le projet DOIT, s'il prend en
          charge TLS, effectuer la vérification des certificats
          TLS par défaut lors de l'utilisation de TLS, y compris
          sur les sous-ressources. Si le logiciel n'utilise pas
          TLS, sélectionnez « non applicable » (N/A).
        details: >-
          Notez que la vérification incorrecte du certificat TLS
          est une erreur courante. Pour plus d'informations, voir
          <a href="http://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html">«
          Le code le plus dangereux dans le monde : la validation
          des certificats SSL dans du logiciel qui ne vient pas
          d'un navigateur » de Martin Georgiev et al.</a> et <a
          href="https://blogs.gnome.org/mcatanzaro/2016/03/12/do-you-trust-this-application/">«
          Avez-vous confiance en cette application ?» par Michael
          Catanzaro</a>.
      crypto_verification_private:
        description: >-
          Le logiciel produit par le projet DEVRAIT, s'il supporte
          TLS, effectuer une vérification de certificat avant
          d'envoyer des en-têtes HTTP avec des informations privées
          (telles que des cookies sécurisés). Si le logiciel n'utilise
          pas TLS, sélectionnez « non applicable » (N/A).
      hardened_site:
        description: >-
          Il est PROPOSÉ que le site Web du projet, le dépôt (s'il
          est accessible via le Web) et le site de téléchargement
          (si séparé) incluent des en-têtes clés de durcissement
          avec des valeurs non admises.
        details: >-
          Notez que GitHub est connu pour le faire. Des sites
          tels que https://securityheaders.io/ peuvent le vérifier
          rapidement. Les en-têtes clés de durcissement sont :
          Content Security Policy (CSP), HTTP Strict Transport
          Security (HSTS), X-Content-Type-Options (comme « nosniff
          »), X-Frame-Options et X-XSS-Protection.
      hardening:
        description: >-
          Il est PROPOSÉ que des mécanismes de durcissement soient
          utilisés dans le logiciel produit par le projet afin
          que les défauts du logiciel soient moins susceptibles
          d'entraîner des vulnérabilités de sécurité.
        details: >-
          Les mécanismes de durcissement peuvent inclure des en-têtes
          HTTP comme Content Security Policy (CSP), des options
          de compilation pour atténuer les attaques (telles que
          -fstack-protector) ou des options de compilation pour
          éliminer les comportements indéfinis. Pour nos besoins,
          le principe de plus faible privilège n'est pas considéré
          comme un mécanisme de durcissement (le principe de plus
          faible privilège est important, mais séparé).
    '1':
      contribution_requirements:
        description: >-
          Les informations sur la façon de contribuer DOIVENT
          inclure les exigences pour des contributions acceptables
          (par exemple, une référence à toute règle de codage
          requise).
      dco:
        description: >-
          Le projet DEVRAIT avoir un mécanisme juridique par lequel
          tous les développeurs de quantités non triviales de
          logiciel du projet affirment qu'ils sont légalement
          autorisés à effectuer ces contributions. L'approche
          la plus commune et facilement mise en œuvre pour ce
          faire est d'utiliser un <a href="http://developercertificate.org/">Certificat
          d'origine du développeur (DCO)</a>, où les utilisateurs
          ajoutent une information « sign-off-by » dans leurs
          commits et le projet pointe vers le site Web du DCO.
          Cependant, cela PEUT être mis en œuvre en tant que contrat
          de licence de contributeur (CLA), ou tout autre mécanisme
          juridique.
        details: >-
          Le DCO est le mécanisme recommandé, car il est facile
          à mettre en œuvre, suivi dans le code source, et git
          prend directement en charge une fonction « approuvé
          » en utilisant « commit -s ». Pour être plus efficace,
          il est préférable que la documentation du projet explique
          ce que signifie « approuvé » pour ce projet. Un CLA
          est un accord juridique qui définit les termes en vertu
          desquels des travaux intellectuels ont été licenciés
          à une organisation ou un projet. Un accord de cession
          (CAA) est un accord légal qui transfère les droits dans
          un travail intellectuel à une autre partie ; il n'est
          pas exigé d'avoir des CAA pour les projets, car un CAA
          augmente le risque que les contributeurs potentiels
          ne contribuent pas, en particulier si le destinataire
          est un organisme à but lucratif. Les <a href="https://www.apache.org/licenses/">CLA
          de la Fondation Apache (la licence de contributeur individuel
          et la CLA d'entreprise)</a> sont des exemples de CLA
          pour des projets qui déterminent que les risques de
          ces types de CLA au projet sont inférieurs à leurs avantages.
      governance:
        description: >-
          Le projet DOIT définir et documenter clairement son
          modèle de gouvernance de projet (la façon dont il prend
          ses décisions, y compris les rôles clés).
        details: >-
          Il doit y avoir une manière documentée bien établie
          de prendre des décisions et de résoudre les différends.
          Dans les petits projets, cela peut être aussi simple
          que « le propriétaire du projet et dirigeant prend toutes
          les décisions finales ». Il existe différents modèles
          de gouvernance, y compris le dictateur bienveillant
          et la méritocratie formelle ; pour plus de détails,
          voir <a href="http://oss-watch.ac.uk/resources/governancemodels">Modèles
          de gouvernance</a>. Les approches centralisées (par
          exemple, un seul mainteneur) et décentralisées (par
          exemple, les groupes de mainteneurs) ont été utilisées
          avec succès dans des projets. L'information sur la gouvernance
          n'a pas besoin de documenter la possibilité de créer
          une duplication de projet, car cela est toujours possible
          pour les projets FLOSS.
      code_of_conduct:
        description: >-
          Le projet DOIT adopter un code de conduite et le publier
          dans un lieu standard.
        details: >-
          Les projets peuvent être en mesure d'améliorer la civilité
          de leur communauté et d'établir des attentes quant à
          une conduite acceptable en adoptant un code de conduite.
          Cela peut aider à éviter les problèmes avant leur apparition
          et faire du projet un lieu plus accueillant pour encourager
          les contributions. Cela devrait se concentrer uniquement
          sur le comportement au sein de la communauté / lieu
          de travail du projet. Des exemples de codes de conduite
          sont le <a href="http://contributor-covenant.org/">Code
          de conduite du pacte de contributeur</a> et le <a href="https://www.kernel.org/doc/html/latest/process/code-of-conflict.html">code
          de conflit</a> du noyau Linux.
      roles_responsibilities:
        description: >-
          Le projet DOIT clairement définir et documenter publiquement
          les rôles clés dans le projet et leurs responsabilités,
          y compris les tâches que ces rôles doivent accomplir.
          Il DOIT être clair qui a quel(s) rôle(s), mais cela
          pourrait ne pas être documenté de la même manière.
        details: >-
          La documentation pour la <a href="#governance">gouvernance</a>
          et les rôles et responsabilités peut être à un seul
          endroit.
      access_continuity:
        description: >-
          Le projet DOIT pouvoir continuer avec une interruption
          minimale si une personne est invalide ou tuée. En particulier,
          le projet DOIT être en mesure de créer et de fermer
          des problèmes, d'accepter les modifications proposées
          et de publier des versions du logiciel, dans un délai
          d'une semaine après confirmation qu'un individu est
          invalide ou tué. Cela PEUT être fait en s'assurant que
          quelqu'un d'autre possède les clés, les mots de passe
          et les droits juridiques nécessaires pour poursuivre
          le projet. Les personnes qui exécutent un projet FLOSS
          PEUVENT faire cela en fournissant des clés dans un coffre-fort
          et un testament fournissant les droits légaux nécessaires
          (par exemple, pour les noms DNS).
      bus_factor:
        description: Le projet DEVRAIT avoir un « bus factor »
          de 2 ou plus.
        details: >-
          Un « bus factor » (aussi connu en tant que « truck factor
          ») est le nombre minimum de membres du projet qui doivent
          disparaître soudainement d'un projet (« écrasé par un
          bus ») avant que le projet ne se bloque en raison du
          manque de personnel compétent. L'outil <a href="https://github.com/mtov/truck-factor">truck-factor</a>
          peut l'estimer pour des projets sur GitHub. Pour plus
          d'informations, voir <a href="https://www.researchgate.net/publication/272824568_assessing_the_bus_factor_of_git_repositories">Évaluation
          du « bus factor » des dépôts Git</a> par Cosentino et
          al.
      documentation_roadmap:
        description: >-
          Le projet DOIT avoir une feuille de route documentée
          qui décrit ce que le projet a l'intention de faire et
          ne pas faire pour au moins l'année suivante.
        details: >-
          Le projet pourrait ne pas atteindre la feuille de route,
          et c'est acceptable ; le but de la feuille de route
          est d'aider les utilisateurs potentiels et les contributeurs
          à comprendre l'orientation prévue du projet. Elle ne
          doit pas être détaillée.
      documentation_architecture:
        description: >-
          Le projet DOIT inclure la documentation de l'architecture
          (aussi appelée conception de haut niveau) du logiciel
          produit par le projet. Si le projet ne produit pas de
          logiciel, sélectionnez « non applicable » (N/A).
        details: >-
          Une architecture de logiciel explique les structures
          fondamentales d'un programme, c'est-à-dire les principaux
          composants du programme, les relations entre eux et
          les propriétés clés de ces composants et de ces relations.
      documentation_security:
        description: >-
          Le projet DOIT documenter ce à quoi l'utilisateur peut
          et ne peut pas s'attendre en termes de sécurité à partir
          du logiciel produit par le projet (ses « exigences de
          sécurité »).
        details: >-
          Ce sont les exigences de sécurité que le logiciel est
          supposé remplir.
      documentation_quick_start:
        description: >-
          Le projet DOIT fournir un guide de « démarrage rapide
          » pour les nouveaux utilisateurs afin de les aider à
          faire rapidement quelque chose avec le logiciel.
        details: >-
          L'idée est de montrer aux utilisateurs comment démarrer
          et de faire en sorte que le logiciel fasse quelque chose.
          Ceci est d'une importance cruciale pour les utilisateurs
          potentiels pour les aider à démarrer.
      documentation_current:
        description: >-
          Le projet DOIT faire un effort pour maintenir la documentation
          conforme à la version actuelle des résultats du projet
          (y compris les logiciels produits par le projet). Tous
          les défauts de la documentation <em>connus</em> la rendant
          incohérente DOIVENT être corrigés. Si la documentation
          est généralement à jour, mais inclut de manière erronée
          certaines informations antérieures qui ne sont plus
          vraies, considérez cela comme un défaut, puis faites
          le suivi et corrigez comme d'habitude.
        details: >-
          La documentation PEUT inclure des informations sur les
          différences ou les modifications entre les versions
          du logiciel et/ou des liens vers les anciennes versions
          de la documentation. L'objectif de ce critère est de
          faire en sorte que la documentation soit cohérente et
          non pas que la documentation soit parfaite.
      documentation_achievements:
        description: >-
          La page d'accueil et/ou le site Web du dépôt du projet
          DOIVENT identifier et pointer tous les accomplissements,
          y compris ce badge sur les meilleures pratiques, dans
          les 48 heures suivant la reconnaissance publique que
          l'accomplissement a été atteint.
        details: >-
          Un accomplissement est un ensemble de critères externes
          que le projet a spécifiquement cherché à atteindre,
          y compris certains badges. Cette information ne doit
          pas nécessairement être sur la page d'accueil du site
          Web du projet. Un projet utilisant GitHub peut mettre
          des accomplissements sur la page d'accueil du dépôt
          en les ajoutant au fichier README.
      accessibility_best_practices:
        description: >-
          Le projet (à la fois les sites du projet et les résultats
          du projet) DEVRAIT suivre les meilleures pratiques d'accessibilité
          afin que les personnes handicapées puissent encore participer
          au projet et utiliser les résultats du projet où il
          est raisonnable de le faire.
        details: |-
          Pour les applications Web, consultez les <a href="https://www.w3.org/TR/WCAG20/">Directives d'accessibilité des contenus Web (WCAG 2.0)</a> et son document à l'appui <a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/Overview.html">Comprendre WCAG 2.0</a> ; voir aussi <a href="https://www.w3.org/standards/webdesign/accessibility">les informations d'accessibilité du W3C</a>. Pour les applications IHM, envisagez d'utiliser les directives d'accessibilité spécifiques à l'environnement (telles que <a href="https://developer.gnome.org/accessibility-devel-guide/stable/">Gnome</a>, <a href="https://accessibility.kde.org/">KDE</a>, <a href="http://docs.xfce.org/xfce/xfce4-settings/accessibility">XFCE</a>, <a href="https://developer.android.com/guide/topics/ui/accessibility/">Android</a>, <a href="https://developer.apple.com/accessibility/ios/">IOS</a>, <a href="http://www.apple.com/accessibility/osx/voiceover/">Mac</a> et <a href="https://docs.microsoft.com/fr-fr/windows/uwp/accessibility/accessibility-overview">Windows</a>). Certaines applications IHM textuelles (par exemple, les programmes « ncurses ») peuvent faire certaines choses pour se rendre plus accessibles (par exemple, le paramètre « force-arrow-cursor » de « alpine »). La plupart des applications en ligne de commande sont assez accessibles telles quelles. Ce critère est souvent N/A, par exemple, pour les bibliothèques. Voici quelques exemples d'actions à prendre ou de questions à considérer : <ul> <li>Fournir des alternatives de texte pour tout contenu non textuel afin qu'il puisse être changé en d'autres formes dont les gens ont besoin, comme une plus grande taille, le braille, une sortie vocale, des symboles ou une langue plus simple (<a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/text-equiv.html">WCAG 2.0 directive 1.1</a>)
          <li>La couleur n'est pas utilisée comme le seul moyen visuel de transmettre des informations, d'indiquer une action, de provoquer une réponse ou de distinguer un élément visuel. (<a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-without-color.html">WCAG 2.0 directive 1.4.1</a>)
          <li>La présentation visuelle du texte et des images du texte a un taux de contraste d'au moins 4,5:1, à l'exception du grand texte, du texte incident, et des logotypes (<a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html">WCAG 2.0 directive 1.4.3</a>)
          <li>Rendez toutes les fonctionnalités disponibles à partir d'un clavier (WCAG directive 2.1) <li>Une IHM ou un projet basé sur le Web DEVRAIT tester avec au moins un lecteur d'écran sur la (les) plate-forme(s) cible(s) (par exemple NVDA, Jaws ou WindowEyes sur Windows ; VoiceOver sur Mac & iOS ; Orca sous Linux/BSD ; TalkBack sur Android). Les programmes IHM textuels PEUVENT travailler à réduire le retrait excessif pour éviter la lecture redondante par les lecteurs d'écran.</ul>
      internationalization:
        description: >-
          Le logiciel produit par le projet DEVRAIT être internationalisé
          pour permettre une localisation facile pour la culture,
          la région ou la langue du public cible. Si l'internationalisation
          (i18n) ne s'applique pas (par exemple, le logiciel ne
          génère pas de texte destiné aux utilisateurs finaux
          et ne trie pas de texte lisible par les humains), sélectionnez
          « non applicable » (N/A).
        details: >-
          La localisation « réfère à l'adaptation du contenu d'un
          produit, d'une application ou d'un document pour répondre
          aux exigences linguistiques, culturelles et autres d'un
          marché cible spécifique (un lieu). » L'internationalisation
          est la « conception et le développement du contenu d'un
          produit, d'une application ou d'un document qui permette
          une localisation facile pour les publics cibles qui
          varient en culture, en région ou en langue. » (Voir
          <a href="https://www.w3.org/International/questions/qa-i18n">la
          page « Localisation ou Internationalisation » du W3C</a>.)
          Le logiciel répond à ce critère simplement en étant
          internationalisé. Aucune localisation pour une autre
          langue spécifique n'est requise, car une fois que le
          logiciel a été internationalisé, d'autres peuvent travailler
          sur la localisation.
      sites_password_security:
        description: >-
          Si les sites du projet (site Web, dépôt et URL de téléchargement)
          entreposent des mots de passe pour l'authentification
          d'utilisateurs externes, les mots de passe DOIVENT être
          entreposés comme hachages itérés avec salage par utilisateur
          en utilisant un algorithme d'étirement des clés (itéré)
          (par exemple, PBKDF2, Bcrypt ou Scrypt). Si les sites
          du projet n'entreposent pas de mots de passe à cette
          fin, sélectionnez « non applicable » (N/A).
        details: >-
          Notez que l'utilisation de <a href="https://help.github.com/articles/github-security/">GitHub</a>
          répond à ce critère. Ce critère s'applique uniquement
          aux mots de passe utilisés pour l'authentification d'utilisateurs
          externes sur les sites du projet. Si les sites du projet
          doivent se connecter à d'autres sites, ils devront peut-être
          entreposer différemment des mots de passe à cette fin
          (puisque l'utilisation d'un algorithme comme Bcrypt
          rendrait ces mots de passe inutilisables). Ceci applique
          le critère crypto_password_storage aux sites du projet,
          de manière similaire à sites_https.
      maintenance_or_update:
        description: >-
          Le projet DOIT maintenir les anciennes versions les
          plus utilisées du produit <em>ou</em> fournir un chemin
          de mise à niveau vers des versions plus récentes. Si
          le chemin de mise à niveau est difficile, le projet
          DOIT documenter comment effectuer la mise à niveau (par
          exemple, les interfaces qui ont changé et une suggestion
          d'étapes détaillées pour aider la mise à niveau).
      report_tracker:
        description: >-
          Le projet DOIT utiliser un suivi des problèmes pour
          le suivi des problèmes individuels.
      vulnerability_report_credit:
        description: >-
          Le projet DOIT créditer les auteurs de tous les signalements
          de vulnérabilité résolus au cours des 12 derniers mois,
          à l'exception des auteurs qui demandent l'anonymat.
          S'il n'y a pas eu de vulnérabilité résolue au cours
          des 12 derniers mois, sélectionnez « non applicable
          » (N/A).
      vulnerability_response_process:
        description: >-
          Le projet DOIT avoir un processus documenté pour répondre
          aux signalements de vulnérabilité.
        details: >-
          Ceci est fortement lié à vulnerability_report_process,
          qui exige qu'il existe un moyen documenté de signaler
          les vulnérabilités. Il a également trait à la vulnerability_report_response,
          qui nécessite une réponse aux signalements de vulnérabilité
          dans un certain laps de temps.
      coding_standards:
        description: >-
          Le projet DOIT identifier les guides de style de codage
          spécifiques pour les langages principaux qu'il utilise,
          et exiger que les contributions le respectent en général.
        details: >-
          Dans la plupart des cas, cela se fait en se référant
          à certains guides de style existants, ce qui permet
          d'énumérer les différences. Ces guides de style peuvent
          inclure des moyens d'améliorer la lisibilité et les
          moyens de réduire la probabilité de défauts (y compris
          les vulnérabilités). Beaucoup de langages de programmation
          ont un ou plusieurs guides de style largement utilisés.
          Des exemples de guides de style incluent <a href="https://github.com/google/styleguide">les
          guides de style de Google</a> et les <a href="https://www.securecoding.cert.org/">Règles
          de codage du SEI CERT</a>.
      coding_standards_enforced:
        description: >-
          Le projet DOIT imposer automatiquement son ou ses styles
          de codage sélectionnés s'il existe au moins un outil
          FLOSS qui peut le faire dans le(s) langage(s) sélectionné(s).
        details: >-
          Cela PEUT être mis en œuvre en utilisant des outils
          d'analyse statique et/ou en faisant passer le code à
          travers des outils de remise en forme. Dans de nombreux
          cas, la configuration de l'outil est incluse dans le
          dépôt du projet (car différents projets peuvent choisir
          différentes configurations). Les projets PEUVENT permettre
          des exceptions de style (et le font habituellement)
          ; là où les exceptions se produisent, elles DOIVENT
          être rares et documentées dans le code à leur emplacement,
          afin que ces exceptions puissent être revues et que
          les outils puissent les gérer automatiquement à l'avenir.
          Des exemples de ces outils incluent ESLint (JavaScript)
          et Rubocop (Ruby).
      build_standard_variables:
        description: >-
          Les systèmes de construction pour les binaires natifs
          DOIVENT honorer les variables (d'environnement) pertinentes
          du compilateur et du lieur qui leur sont transmises
          (par exemple, CC, CFLAGS, CXX, CXXFLAGS et LDFLAGS)
          et les transmettre aux invocations du compilateur et
          du lieur. Un système de construction PEUT les étendre
          avec des options supplémentaires ; il NE DOIT PAS simplement
          remplacer les valeurs fournies par les siennes. Si aucun
          fichier binaire natif n'est généré, sélectionnez « non
          applicable » (N/A).
        details: >-
          Il devrait être facile d'activer des fonctionnalités
          de construction spéciales telles que Address Sanitizer
          (ASAN), ou de se conformer aux meilleures pratiques
          de durcissement de la distribution (par exemple, en
          activant facilement les options de compilation pour
          le faire).
      build_preserve_debug:
        description: >-
          Le système de construction et d'installation DEVRAIT
          préserver les informations de débogage si elles sont
          demandées dans les options correspondants (par exemple,
          « install -s » n'est pas utilisé). S'il n'y a pas de
          système de construction ou d'installation (par exemple,
          les bibliothèques JavaScript typiques), sélectionnez
          « non applicable » (N/A).
        details: >-
          Par exemple, la définition de CFLAGS (C) ou CXXFLAGS
          (C++) devrait créer les informations de débogage pertinentes
          si ces langages sont utilisés et elles ne devraient
          pas être retirées pendant l'installation. Des informations
          de débogage sont nécessaires pour le support et l'analyse,
          et également utiles pour mesurer la présence de fonctionnalités
          de durcissement dans les binaires compilés.
      build_non_recursive:
        description: >-
          Le système de construction pour le logiciel produit
          par le projet NE DOIT PAS reconstruire de manière récursive
          des sous-répertoires s'il existe des dépendances croisées
          dans les sous-répertoires. S'il n'y a pas de système
          de construction ou d'installation (par exemple, les
          bibliothèques JavaScript typiques), sélectionnez « non
          applicable » (N/A).
        details: >-
          Les informations de dépendance internes du système de
          construction du projet doivent être précises, sinon,
          les modifications apportées au projet peuvent ne pas
          s'effectuer correctement. Des constructions incorrectes
          peuvent entraîner des défauts (y compris des vulnérabilités).
          Une erreur courante dans les grands systèmes de construction
          est d'utiliser une « construction récursive », c'est-à-dire
          une hiérarchie de sous-répertoires contenant des fichiers
          source, chaque sous-répertoire étant construit de manière
          indépendante. Sauf si chaque sous-répertoire est entièrement
          indépendant, ceci est une erreur, car les informations
          de dépendance sont incorrectes.
      build_repeatable:
        description: >-
          Le projet DOIT pouvoir répéter le processus de génération
          d'informations à partir de fichiers source et obtenir
          exactement le même résultat bit-à-bit. Si aucune construction
          ne se produit (par exemple, dans les langages de script
          où le code source est utilisé directement au lieu d'être
          compilé), sélectionnez « non applicable » (N/A).
        details: >-
          Les utilisateurs GCC et Clang peuvent trouver l'option
          -frandom-seed utile ; dans certains cas, cela peut être
          résolu en forçant un ordre de tri. Plus de suggestions
          peuvent être trouvées sur le site <a href="https://reproducible-builds.org/">pour
          une construction reproductible</a>.
      installation_common:
        description: >-
          Le projet DOIT fournir un moyen d'installer et de désinstaller
          facilement le logiciel produit par le projet en utilisant
          une convention couramment utilisée.
        details: >-
          Des exemples comprennent l'utilisation d'un gestionnaire
          de paquets (au niveau du système ou du langage), « make/install/uninstall
          » (supportant DESTDIR), un conteneur dans un format
          standard ou une image de machine virtuelle dans un format
          standard. Le processus d'installation et de désinstallation
          (par exemple, son paquetage) PEUT être mis en œuvre
          par un tiers tant qu'il est FLOSS.
      installation_standard_variables:
        description: >-
          Le système d'installation pour les utilisateurs finaux
          DOIT honorer les conventions standard pour sélectionner
          l'emplacement où les artefacts construits sont écrits
          au moment de l'installation. Par exemple, s'il installe
          des fichiers sur un système POSIX, il DOIT honorer la
          variable d'environnement DESTDIR. S'il n'y a pas de
          système d'installation ou pas de convention standard,
          sélectionnez « non applicable » (N/A).
      installation_development_quick:
        description: >-
          Le projet DOIT fournir un moyen pour les développeurs
          potentiels d'installer rapidement tous les résultats
          du projet ainsi que l'environnement nécessaire pour
          apporter des modifications, y compris les tests et l'environnement
          de test. Cela DOIT être effectué avec une convention
          couramment utilisée.
        details: >-
          Cela PEUT être implémenté à l'aide d'un conteneur généré
          et/ou d'un script d'installation. Les dépendances externes
          sont généralement installées en invoquant des gestionnaires
          de paquets du système et/ou du langage, comme précisé
          dans external_dependencies.
      external_dependencies:
        description: >-
          Le projet DOIT afficher ses dépendances externes de
          manière analysable par ordinateur.
        details: >-
          Généralement, cela se fait en utilisant les conventions
          du gestionnaire de paquets et/ou du système de construction.
          Notez que cela permet d'implémenter <a href="#installation_development_quick">installation_development_quick</a>.
      dependency_monitoring:
        description: >-
          Les projets DOIVENT surveiller ou vérifier périodiquement
          leurs dépendances externes (y compris les copies de
          commodité) pour détecter les vulnérabilités connues,
          et corriger les vulnérabilités exploitables ou les vérifier
          comme inexploitables.
        details: >-
          Cela peut se faire à l'aide d'un outil d'analyse d'origine
          ou de vérification de dépendance tel que <a href="https://www.owasp.org/index.php/OWASP_Dependency_Check">Dependency-Check
          d'OWASP</a>, <a href="https://www.sonatype.com/nexus-auditor">Nexus
          Auditeur de Sonartype</a>, <a href="https://www.blackducksoftware.com/products/protex">Protex
          de Black Duck</a> , <a href="http://www.protecode.com/">Protecode
          de Synopsys</a>, et <a href="https://github.com/rubysec/bundler-audit">Bundler-audit
          (pour Ruby)</a>. Certains gestionnaires de paquets comprennent
          des mécanismes pour le faire. Il est acceptable que
          la vulnérabilité des composants ne puisse pas être exploitée,
          mais cette analyse est difficile et il est parfois plus
          simple de mettre à jour ou de corriger la dépendance.
      updateable_reused_components:
        description: |-
          Le projet DOIT :
          <ol>
          <li> rendre facile l'identification et la mise à jour des composants maintenus extérieurement au projet ; <strong>ou</strong> </li>
          <li> utiliser des composants standards fournis par le système ou le langage de programmation. </li>
          </ol>
          Ensuite, si une vulnérabilité se trouve dans un composant réutilisé, il sera
          facile de mettre à jour ce composant.
        details: >-
          Une façon typique de respecter ce critère est d'utiliser
          les systèmes de gestion des paquets du système et du
          langage de programmation. De nombreux programmes FLOSS
          sont distribués avec des « bibliothèques de commodité
          » qui sont des copies locales de bibliothèques standard
          (éventuellement dupliquées). En soi, c'est acceptable.
          Cependant, si le programme *doit* utiliser ces copies
          locales (dupliquées), la mise à jour des bibliothèques
          « standard » lors de mises à jour de sécurité laissera
          ces copies supplémentaires encore vulnérables. C'est
          particulièrement un problème pour les systèmes basés
          sur le cloud ; si le fournisseur du cloud met à jour
          ses librairies « standard » mais que le programme ne
          les utilise pas, les mises à jour ne vous aideront pas.
          Voir, par exemple, <a href="http://spot.livejournal.com/312320.html">«
          Chromium : pourquoi il n'est pas encore un vrai paquet
          dans Fedora » par Tom Callaway</a>.
      interfaces_current:
        description: >-
          Le projet DEVRAIT éviter d'utiliser des fonctions et
          des API obsolètes quand des alternatives FLOSS sont
          disponibles dans l'ensemble de technologies qu'il utilise
          (sa « pile de technologies ») et disponibles à une large
          majorité des utilisateurs supportés par le projet (afin
          que les utilisateurs puissent avoir accès à l'alternative).
      automated_integration_testing:
        description: >-
          Une suite de tests automatisée DOIT être appliquée à
          chaque commit dans un dépôt partagé pour au moins une
          branche. Cette suite de tests DOIT produire un rapport
          sur le succès ou l'échec du test.
        details: >-
          Cette exigence peut être considérée comme un sous-ensemble
          de test_continuous_integration, mais axée sur le simple
          test, sans nécessiter une intégration continue.
      regression_tests_added50:
        description: >-
          Le projet DOIT ajouter des tests de régression à une
          suite de tests automatisée pour au moins 50% des bogues
          corrigés au cours des six derniers mois.
      test_statement_coverage80:
        description: >-
          Le projet DOIT avoir une ou des suites de tests automatisées
          FLOSS qui fournissent une couverture d'instructions
          d'au moins 80% s'il existe au moins un outil FLOSS qui
          peut mesurer ce critère dans le langage sélectionné.
        details: >-
          De nombreux outils FLOSS sont disponibles pour mesurer
          la couverture des tests, y compris gcov/lcov, Blanket.js,
          Istanbul et JCov. Notez que respecter ce critère n'est
          pas une garantie que la suite de tests est complète,
          mais, à l'inverse, ne pas respecter ce critère est un
          indicateur fort d'une suite de tests insuffisante.
      test_policy_mandated:
        description: >-
          Le projet DOIT avoir une politique écrite formelle,
          que dès qu'une nouvelle fonctionnalité majeure est ajoutée,
          des tests pour la nouvelle fonctionnalité DOIVENT être
          ajoutés à une suite de tests automatisée.
      tests_documented_added:
        description: >-
          Le projet DOIT inclure, dans ses instructions documentées
          pour les propositions de changement, la politique selon
          laquelle des tests doivent être ajoutés pour toute nouvelle
          fonctionnalité majeure.
      warnings_strict:
        description: >-
          Les projets DOIVENT être maximalement stricts avec les
          avertissements dans le logiciel produit par le projet,
          quand cela est approprié.
      implement_secure_design:
        description: >-
          Le projet DOIT implémenter des principes de conception
          sécurisés (à partir de « know_secure_design »), quand
          cela est approprié. Si le projet ne produit pas de logiciel,
          sélectionnez « non applicable » (N/A).
        details: >-
          Par exemple, les résultats du projet devraient avoir
          des valeurs sécurisées par défaut (les décisions d'accès
          devraient être de refuser par défaut et l'installation
          des projets devrait être sécurisée par défaut). Ils
          devraient également avoir une médiation complète (tout
          accès qui pourrait être limité doit être vérifié pour
          l'autorité et être non contournable). Notez que, dans
          certains cas, ces principes entrent en conflit, auquel
          cas un choix doit être fait (par exemple, de nombreux
          mécanismes peuvent rendre les choses plus complexes,
          en contravention de « l'économie de mécanisme » / principe
          KISS).
      input_validation:
        description: >-
          Les résultats du projet DOIVENT vérifier toutes les
          entrées provenant de sources potentiellement non fiables
          pour s'assurer qu'elles sont valides (une *liste blanche*)
          et rejeter les entrées non valides, en cas de restrictions
          sur les données.
        details: >-
          Notez que la comparaison de l'entrée par rapport à une
          liste de « mauvais formats » (aussi appelée *liste noire*)
          n'est normalement pas suffisante, car les attaquants
          peuvent souvent contourner une liste noire. En particulier,
          les nombres sont convertis en formats internes puis
          vérifiés pour s'assurer s'ils se situent entre leur
          minimum et maximum (inclus), et les chaînes de texte
          sont vérifiées pour s'assurer qu'elles sont des motifs
          de texte valides (par exemple, UTF-8 valide, longueur
          valide, syntaxe valide, etc.). Certaines données peuvent
          avoir besoin d'être « du tout venant » (par exemple,
          un téléchargement de fichier), mais celles-ci sont généralement
          rares.
      hardening:
        description: >-
          Les mécanismes de durcissement DOIVENT être utilisés
          dans le logiciel produit par le projet afin que les
          défauts du logiciel soient moins susceptibles d'entraîner
          des vulnérabilités de sécurité.
        details: >-
          Les mécanismes de durcissement peuvent inclure des en-têtes
          HTTP comme Content Security Policy (CSP), des options
          de compilation pour atténuer les attaques (telles que
          -fstack-protector) ou des options de compilation pour
          éliminer les comportements indéfinis. Pour nos besoins,
          le principe de plus faible privilège n'est pas considéré
          comme un mécanisme de durcissement (le principe de plus
          faible privilège est important, mais séparé).
      crypto_weaknesses:
        description: >-
          Les mécanismes de sécurité par défaut dans le logiciel
          produit par le projet NE DOIVENT PAS dépendre d'algorithmes
          ou de modes cryptographiques avec des faiblesses sérieuses
          connues (par exemple, l'algorithme de hachage cryptographique
          SHA-1 ou le mode CBC en SSH).
      crypto_algorithm_agility:
        description: >-
          Le projet DEVRAIT supporter plusieurs algorithmes cryptographiques,
          afin que les utilisateurs puissent rapidement changer
          si l'un deux est cassé. Les algorithmes à clés symétriques
          courants incluent AES, Twofish et Serpent. Les alternatives
          d'algorithme de hachage cryptographique courantes incluent
          SHA-2 (y compris SHA-224, SHA-256, SHA-384 ET SHA-512)
          et SHA-3.
      crypto_credential_agility:
        description: >-
          Le projet DOIT supporter le stockage des informations
          d'authentification (comme les mots de passe et les jetons
          dynamiques) et des clés cryptographiques privées dans
          des fichiers distincts des autres informations (fichiers
          de configuration, bases de données et journaux) et permettre
          aux utilisateurs de les mettre à jour et de les remplacer
          sans recompilation de code. Si le projet ne traite jamais
          d'informations d'authentification et de clés cryptographiques
          privées, sélectionnez « non applicable » (N/A).
      crypto_used_network:
        description: >-
          Le logiciel produit par le projet DEVRAIT supporter
          des protocoles sécurisés pour toutes ses communications
          réseau, tels que SSHv2 ou ultérieur, TLS1.2 ou ultérieur
          (HTTPS), IPsec, SFTP et SNMPv3. Les protocoles non sûrs
          tels que FTP, HTTP, telnet, SSLv3 ou antérieur, et SSHv1
          DEVRAIENT être désactivés par défaut et uniquement activés
          si l'utilisateur le configure spécifiquement. Si le
          logiciel produit par le projet ne prend pas en charge
          les communications réseau, sélectionnez « non applicable
          » (N/A).
      crypto_tls12:
        description: >-
          Le logiciel produit par le projet DEVRAIT, s'il prend
          en charge ou utilise TLS, prendre en charge au moins
          TLS version 1.2. Notez que le prédécesseur de TLS s'appelait
          SSL. Si le logiciel n'utilise pas TLS, sélectionnez
          « non applicable » (N/A).
      crypto_certificate_verification:
        description: >-
          Le logiciel produit par le projet DOIT, s'il prend en
          charge TLS, effectuer la vérification des certificats
          TLS par défaut lors de l'utilisation de TLS, y compris
          sur les sous-ressources. Si le logiciel n'utilise pas
          TLS, sélectionnez « non applicable » (N/A).
        details: >-
          Notez que la vérification incorrecte du certificat TLS
          est une erreur courante. Pour plus d'informations, voir
          <a href="http://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html">«
          Le code le plus dangereux du monde : la validation des
          certificats SSL dans du logiciel qui ne vient pas d'un
          navigateur » de Martin Georgiev et al.</a> et <a href="https://blogs.gnome.org/mcatanzaro/2016/03/12/do-you-trust-this-application/">«
          Avez-vous confiance en cette application ? » par Michael
          Catanzaro</a>.
      crypto_verification_private:
        description: >-
          Le logiciel produit par le projet DOIT, s'il supporte
          TLS, effectuer une vérification de certificat avant
          d'envoyer des en-têtes HTTP avec des informations privées
          (telles que des cookies sécurisés). Si le logiciel n'utilise
          pas TLS, sélectionnez « non applicable » (N/A).
      signed_releases:
        description: >-
          Le projet DOIT signer cryptographiquement les versions
          des résultats du projet destinées à une utilisation
          répandue, et il DOIT y avoir un processus documenté
          expliquant aux utilisateurs comment ils peuvent obtenir
          les clés de signature publique et vérifier la ou les
          signatures. La clé privée pour ces signature(s) NE DOIT
          PAS être sur le(s) site(s) utilisé(s) pour distribuer
          directement le logiciel au public. Si les versions ne
          sont pas destinées à une utilisation répandue, sélectionnez
          « non applicable » (N/A).
        details: >-
          Les résultats du projet incluent à la fois le code source
          et les produits livrés générés, le cas échéant (par
          exemple, les exécutables, les paquetages et les conteneurs).
          Les livrables générés PEUVENT être signés séparément
          du code source. Ces signatures PEUVENT être mises en
          œuvre sous forme de tags git signées (utilisant des
          signatures numériques cryptographiques). Les projets
          PEUVENT fournir des résultats générés séparément d'outils
          comme git, mais dans ce cas, les résultats distincts
          DOIVENT être signés séparément.
      version_tags_signed:
        description: >-
          Il est PROPOSÉ que, dans le système de contrôle de la
          version, chaque tag d'une version importante (un tag
          faisant partie d'une version majeure, d'une version
          mineure ou qui corrige des vulnérabilités notées publiquement)
          soit cryptographiquement signé et vérifiable comme décrit
          dans <a href="#signed_releases">signed_releases</a>.
      static_analysis_common_vulnerabilities:
        description: >-
          Le projet DOIT utiliser au moins un outil d'analyse
          statique avec des règles ou des approches pour rechercher
          des vulnérabilités courantes dans le langage ou l'environnement
          analysé, s'il existe au moins un outil FLOSS qui peut
          mettre en œuvre ce critère dans le langage sélectionné.
      dynamic_analysis_unsafe:
        description: >-
          <em>Si</em> le logiciel produit par le projet inclut
          un logiciel écrit à l'aide d'un langage non sûr pour
          les accès mémoire (par exemple C ou C++), <em>alors</em>
          le projet DOIT utiliser au moins un outil dynamique
          (par exemple, un fuzzer ou un scanneur d'application
          Web) utilisé de manière routinière en combinaison avec
          un mécanisme permettant de détecter des problèmes de
          sécurité mémoire tels que les dépassement mémoire. Si
          le projet ne produit pas de logiciel écrit dans un langage
          non sûr pour les accès mémoire, sélectionnez « non applicable
          » (N/A).
      assurance_case:
        description: >-
          Le projet DOIT fournir une analyse de fiabilité qui
          justifie pourquoi ses exigences de sécurité sont respectées.
          L'analyse de fiabilité DOIT inclure : une description
          du modèle de menace, une identification claire des limites
          de confiance, un argument selon lequel des principes
          de conception sécurisés ont été appliqués et un argument
          selon lequel les faiblesses de sécurité courantes de
          l'implémentation ont été contrées.
        details: >-
          Une analyse de fiabilité est « une preuve documentée
          qui fournit un argumentaire convaincant et correct selon
          lequel un ensemble spécifié de revendications critiques
          concernant les propriétés d'un système est adéquatement
          justifié pour une application donnée dans un environnement
          donné » (<a href="http://nvlpubs.nist.gov/nistpubs/ir/2009/ir7608.pdf">«
          Software Assurance Using Structured Assurance Case Models
          », Thomas Rhodes et al, NIST Interagency Report 7608</a>).
          Les limites de confiance sont des limites où les données
          ou l'exécution modifient leur niveau de confiance, par
          exemple, les limites d'un serveur dans une application
          Web typique. Il est fréquent d'énumérer des principes
          de conception sécurisés (tels que Saltzer et Schroeer)
          et des faiblesses de sécurité courantes de l'implémentation
          (comme le OWASP top 10 ou le CWE/SANS top 25) et de
          montrer comment chacun est contré. L'<a href="https://github.com/coreinfrastructure/best-practices-badge/blob/master/doc/security.md">analyse
          de fiabilité de BadgeApp</a> peut être un exemple utile.
          Ceci est lié à documentation_security, documentation_architecture
          et implement_secure_design.
      achieve_passing:
        description: Le projet DOIT atteindre un badge de niveau
          basique.
    '2':
      bus_factor:
        description: Le projet DOIT avoir un « facteur bus » de
          2 ou plus.
      contributors_unassociated:
        description: >-
          Le projet DOIT avoir au moins deux contributeurs significatifs
          non associés.
        details: >-
          Les contributeurs sont associés s'ils sont payés pour
          leur travail par la même organisation (en tant qu'employé
          ou contractuel) et si l'organisation bénéficie des résultats
          du projet. Les subventions financières ne comptent pas
          comme provenant de la même organisation si elles passent
          par d'autres organisations (par exemple, les subventions
          scientifiques versées à différentes organisations par
          un même gouvernement ou ONG ne rendent pas les contributeurs
          associés). Quelqu'un est un contributeur significatif
          s'il a apporté des contributions non triviales au projet
          au cours de la dernière année. Des exemples de bons
          indicateurs d'un contributeur significatif sont : écrit
          au moins 1 000 lignes de code, a contribué à 50 commits
          ou au moins 20 pages de documentation.
      copyright_per_file:
        description: >-
          Le projet DOIT inclure une déclaration de copyright
          dans chaque fichier source, identifiant au moins une
          année pertinente et un titulaire du droit d'auteur.
        details: >-
          Cela PEUT être fait en incluant ce qui suit dans un
          commentaire près du début de chaque fichier : « <tt>Copyright
          [année où ce projet ou contenu a commencé] - [dernière
          année de modification], [fondateur du projet] et les
          contributeurs de [nom du projet].</tt> »
      license_per_file:
        description: >-
          Le projet DOIT inclure une déclaration de licence dans
          chaque fichier source. Cela PEUT être fait en incluant
          ce qui suit dans un commentaire près du début de chaque
          fichier : <a href="https://spdx.org/using-spdx#identifiers">
          <tt>SPDX-License-Identifier : [expression d'une licence
          SPDX pour le projet]</tt> </a>.
        details: >-
          Cela PEUT également être fait en incluant une déclaration
          en langage naturel identifiant la licence. Le projet
          PEUT également inclure une URL stable indiquant le texte
          de la licence ou directement le texte complet de la
          licence. Notez que le critère license_location requiert
          que la licence du projet soit dans un emplacement standard.
          Voir <a href="https://github.com/david-a-wheeler/spdx-tutorial">ce
          didacticiel SPDX</a> pour plus d'informations sur les
          expressions de licence SPDX. Notez la relation avec
          <a href="#copyright_per_file">copyright_per_file</a>,
          dont le contenu devrait généralement précéder les informations
          sur la licence.
      repo_distributed:
        description: >-
          Le dépôt source du projet DOIT utiliser un logiciel
          courant de contrôle de version distribué (par exemple,
          git ou mercurial).
      small_tasks:
        description: >-
          Le projet DOIT identifier clairement les petites tâches
          qui peuvent être effectuées par des contributeurs nouveaux
          ou occasionnels.
        details: >-
          Cette identification se fait typiquement en marquant
          les problèmes sélectionnés dans un outil de suivi de
          problèmes avec une ou plusieurs étiquettes que le projet
          utilise à cet effet, par exemple <a href="http://up-for-grabs.net/#/">up-for-grabs</a>,
          <a href="http://www.firsttimersonly.com/">first-timers-only</a>,
          « Small fix », microtask ou IdealFirstBug. Ces nouvelles
          tâches n'ont pas besoin d'ajouter des fonctionnalités
          ; elles peuvent améliorer la documentation, ajouter
          des cas de test ou toute autre chose qui aide le projet
          et aide le contributeur à en comprendre davantage sur
          le projet.
      require_2FA:
        description: >-
          Le projet DOIT exiger l'authentification à deux facteurs
          (2FA) des développeurs pour changer un dépôt central
          ou accéder à des données sensibles (telles que des signalements
          de vulnérabilités privés). Ce mécanisme 2FA PEUT utiliser
          des mécanismes sans mécanismes cryptographiques tels
          que SMS, mais cela n'est pas recommandé.
      secure_2FA:
        description: >-
          L'authentification à deux facteurs du projet (2FA) DOIT
          utiliser des mécanismes cryptographiques pour empêcher
          l'emprunt d'identité. Une 2FA basée sur un service de
          messages courts (SMS), par elle-même, ne satisfait PAS
          à ce critère, car elle n'est pas chiffrée.
        details: >-
          Un mécanisme 2FA qui répond à ce critère serait une
          application de mot de passe à usage unique basé sur
          le temps (TOTP) qui génère automatiquement un code d'authentification
          qui change après un certain laps de temps. Notez que
          <a href="https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/">GitHub
          prend en charge TOTP</a>.
      code_review_standards:
        description: >-
          Le projet DOIT documenter ses exigences en matière de
          revue de code, y compris la façon dont la revue de code
          est menée, ce qui doit être vérifié et ce qui est requis
          pour être acceptable.
        details: >-
          Voir aussi <a href="#two_person_review">two_person_review</a>
          et contribution_requirements.
      two_person_review:
        description: >-
          Le projet DOIT avoir au moins 50% de toutes les modifications
          proposées revues avant la sortie par une personne autre
          que l'auteur, afin de déterminer s'il s'agit d'une modification
          valable et sans problèmes connus qui risqueraient de
          s'opposer à son inclusion.
      build_reproducible:
        description: >-
          Le projet DOIT avoir une <a href="https://reproducible-builds.org/">construction
          reproductible</a>. Si aucune construction ne se produit
          (par exemple, les langages de script où le code source
          est utilisé directement au lieu d'être compilé), sélectionnez
          « non applicable » (N/A).
        details: >-
          Une construction reproductible signifie que plusieurs
          parties peuvent refaire indépendamment le processus
          de génération d'informations à partir de fichiers source
          et obtenir exactement le même résultat bit-à-bit. Dans
          certains cas, cela peut être résolu en forçant un ordre
          de tri. Les développeurs JavaScript peuvent envisager
          d'utiliser npm shrinkwrap et webpack OccurenceOrderPlugin.
          Les utilisateurs GGC et clang peuvent trouver l'option
          -frandom-seed utile. L'environnement de construction
          (y compris le jeu d'outils) peut souvent être défini
          pour les parties externes en spécifiant le hachage cryptographique
          d'un conteneur spécifique ou d'une machine virtuelle
          qu'ils peuvent utiliser pour la reconstruction. Le <a
          href="https://reproducible-builds.org/docs/">projet
          de construction reproductible dispose de documentation
          sur la façon de le faire</a>.
      test_invocation:
        description: >-
          Une suite de tests DOIT être invocable d'une manière
          standard pour ce langage.
      test_continuous_integration:
        description: >-
          Le projet DOIT utiliser une intégration continue, où
          le code nouveau ou modifié est fréquemment intégré dans
          un dépôt de code central et des tests automatisés sont
          exécutés sur le résultat.
        details: >-
          Dans la plupart des cas, cela signifie que chaque développeur
          qui travaille à plein temps sur le projet intègre son
          code au moins tous les jours.
      test_statement_coverage90:
        description: >-
          Le projet DOIT avoir une ou des suites de tests automatisées
          FLOSS qui fournissent une couverture d'instructions
          d'au moins 90% s'il existe au moins un outil FLOSS qui
          peut mesurer ce critère dans le langage sélectionné.
      test_branch_coverage80:
        description: >-
          Le projet DOIT avoir une ou des suites de tests automatisées
          FLOSS qui fournissent une couverture de branche d'au
          moins 80% s'il existe au moins un outil FLOSS qui peut
          mesurer ce critère dans le langage sélectionné.
      crypto_used_network:
        description: >-
          Le logiciel produit par le projet DOIT supporter des
          protocoles sécurisés pour toutes ses communications
          réseau, tels que SSHv2 ou ultérieur, TLS1.2 ou ultérieur
          (HTTPS), IPsec, SFTP et SNMPv3. Les protocoles non sûrs
          tels que FTP, HTTP, telnet, SSLv3 ou antérieur, et SSHv1
          DOIVENT être désactivés par défaut et uniquement activés
          si l'utilisateur le configure spécifiquement. Si le
          logiciel produit par le projet ne prend pas en charge
          les communications réseau, sélectionnez « non applicable
          » (N/A).
      crypto_tls12:
        description: >-
          Le logiciel produit par le projet DOIT, s'il prend en
          charge ou utilise TLS, prendre en charge au moins TLS
          version 1.2. Notez que le prédécesseur de TLS s'appelait
          SSL. Si le logiciel n'utilise pas TLS, sélectionnez
          « non applicable » (N/A).
      hardened_site:
        description: >-
          Le site Web du projet, le dépôt (s'il est accessible
          via le Web) et le site de téléchargement (si séparé)
          DOIVENT inclure des en-têtes clés de durcissement avec
          des valeurs non admises.
        details: >-
          Notez que GitHub est connu pour le faire. Des sites
          tels que https://securityheaders.io/ peuvent le vérifier
          rapidement. Les en-têtes clés de durcissement sont :
          Content Security Policy (CSP), HTTP Strict Transport
          Security (HSTS), X-Content-Type-Options (comme « nosniff
          »), X-Frame-Options et X-XSS-Protection.
      security_review:
        description: >-
          Le projet DOIT avoir effectué une évaluation de la sécurité
          au cours des 5 dernières années. Cette revue DOIT prendre
          en considération les exigences de sécurité et les limites
          de sécurité.
        details: >-
          Cela PEUT être fait par les membres du projet et/ou
          une évaluation indépendante. Cette évaluation PEUT être
          soutenue par des outils d'analyse statiques et dynamiques,
          mais il doit aussi y avoir une revue par des humains
          pour identifier les problèmes (en particulier dans la
          conception) que les outils ne peuvent pas détecter.
      hardening:
        description: >-
          Des mécanismes de durcissement DOIVENT être utilisés
          dans le logiciel produit par le projet afin que les
          défauts du logiciel soient moins susceptibles d'entraîner
          des vulnérabilités de sécurité.
      dynamic_analysis:
        description: >-
          Le projet DOIT appliquer au moins un outil d'analyse
          dynamique à tout candidat pour une version majeure du
          logiciel produit par le projet avant sa sortie.
      dynamic_analysis_enable_assertions:
        description: >-
          Le projet DEVRAIT inclure de nombreuses assertions à
          l'exécution dans le logiciel qu'il produit, et vérifier
          ces assertions lors d'une analyse dynamique.
      achieve_silver:
        description: Le projet DOIT atteindre un badge de niveau
          argent.
  static_pages:
    home:
      badge_program: Programme de badge des meilleures pratiques
        de la CII
      get_your_badge: Obtenez votre badge immédiatement !
      p1_html: |-
        Le programme de badge des meilleures pratiques de
        la <a href="https://www.coreinfrastructure.org/">Core Infrastructure Initiative (CII)</a> de la <a href="https://www.linuxfoundation.org/">Fondation Linux</a> est un moyen pour les projets de logiciel libre (FLOSS) de montrer qu'ils suivent les meilleures pratiques de développement. Les projets peuvent s'auto-évaluer de manière volontaire, sans frais, en utilisant cette application Web pour expliquer comment ils suivent chacune des meilleures pratiques.  Le programme de badge des meilleures pratiques de la CII s'inspire des nombreux badges disponibles aux projets sur GitHub. Les consommateurs du badge pourront évaluer rapidement quels projets de logiciel libre suivent les meilleures pratiques et, par conséquent, sont plus susceptibles de produire des logiciels sûrs et de meilleure qualité.
      p2_html: |-
        Plus d'informations sur le programme de badge
        des meilleures pratiques de la CII,
        incluant des renseignements généraux et
        <a href='https://github.com/coreinfrastructure/cii-best-practices-badge/blob/master/doc/criteria.md'>les
        critères</a>, sont
        <a href='https://github.com/coreinfrastructure/cii-best-practices-badge'>disponibles sur GitHub</a>.
        <a href="/fr/project_stats">Les statistiques du projet</a> et
        <a href="/fr/criteria">des statistiques sur les critères</a> sont
        disponibles.  La <a href="/fr/projects">page des projets</a> liste les
        projets participants et permet des requêtes (par exemple, vous
        pouvez y voir
        <a href="/fr/projects?gteq=100">les projets ayant obtenu le
        badge</a>). Vous pouvez également y voir
        <a href='/fr/projects/1'>un exemple (où nous essayons
        d'obtenir notre propre badge)</a>.
      p3_html: >-
        <em>Confidentialité et problèmes juridiques </em>: Consultez
        notre <a href="https://www.linuxfoundation.org/privacy">politique
        de confidentialité</a> et nos <a href="https://www.linuxfoundation.org/terms">conditions
        d'utilisation</a>.  Tout les contenus publiquement disponibles
        qui ne sont pas sous forme de code sont publiés sous la
        license <a href="https://creativecommons.org/licenses/by/3.0/">Creative
        Commons Attribution License version 3.0 (CC-BY-3.0)</a>
        ou plus permissive ; les contenus similaires plus récents
        sont diffusés sous la license CC-BY version 3.0 ou ultérieure
        (CC-BY-3.0+).  Pour faire référence globalement à ces
        contenus, ou en l'absence d'instructions spécifiques,
        veuillez mentionner comme source les contributeurs du
        programme de badge des meilleures pratiques de la CII.
      check_us_out:
      share_header_html:
      twitter:
      reddit:
      facebook:
      linkedin:
      googleplus:
      email:
    criteria:
      criteria: Critères
      detailed_criteria_on_github: Les critères détaillés sont
        disponibles sur GitHub.
      current_criteria: >-
        Nombre actuel de critères : %{active} (actifs) + %{future}
        (futurs) = %{total} (total).
      criteria_must_should_suggested: >-
        Les critères actifs se décomposent en %{must} DOIT, %{should}
        DEVRAIT, et %{suggested} PROPOSÉ.
      criteria_na_met_details: >-
        Parmi les critères actifs, %{na_allowed} autorisent la
        mention N/A, %{met_url_required} nécessitent une URL pour
        être atteints, et %{details_present} nécessitent des détails
        dans leur description.
      project_counts: >-
        Il existe %{projects} soumissions de projets ; %{passing}
        ont obtenu le badge et %{in_progress} sont en cours d'obtention.
      project_stats_html: >-
        Vous pouvez voir des statistiques sur les projets au cours
        du temps sur la <a href="/fr/project_stats">page des statistiques
        du projet</a>.
      level: Niveau
      must: DOIT
      should: DEVRAIT
      suggested: PROPOSÉ
      total_active: Total actif
      allow_na: Autoriser N/A
      require_url: Exiger une URL
      details: Comprend des détails
      future: Futur
      new_this_level: Nouveau à ce niveau
      met_justification_required: Justification requise
      met_justification_or_url_required: Justification ou URL
        requise
    cookies:
      cookies_header:
      cookies_info_html:
  headings:
    Accessibility and internationalization: Accessibilité et internationalisation
    Analysis: Analyse
    Automated test suite: Suite de tests automatisée
    Basic project website content: Contenu basique du site Web
      du projet
    Basics: Notions de base
    Bug-reporting process: Procédure de signalement des bogues
    Change Control: Contrôle des modifications
    Coding standards: Normes de codage
    Documentation: Documentation
    Dynamic code analysis: Analyse dynamique de code
    Externally-maintained components: Composants maintenus à l'extérieur
    Future: Futur
    future: futur
    Installation system: Système d'installation
    New functionality testing: Nouveau test de fonctionnalité
    OSS License: Licence OSS
    Other: Autre
    Other security issues: Autres problèmes de sécurité
    Previous versions: Versions précédentes
    Project oversight: Supervision du projet
    Public version-controlled source repository: Dépôt source
      public sous contrôle de version
    Publicly known vulnerabilities fixed: Vulnérabilités publiquement
      identifiées et corrigées
    Quality: Qualité
    Release notes: Notes de version
    Reporting: Compte-rendu
    Secure development knowledge: Connaissance du développement
      sécurisé
    Secure release: Livraison sécurisée
    Secured delivery against man-in-the-middle (MITM) attacks: >-
      Livraison sécurisée contre les attaques man-in-the-middle
      (MITM)
    Security: Sécurité
    Static code analysis: Analyse statique de code
    Unique version numbering: Numérotation unique de la version
    Use basic good cryptographic practices: Utiliser de bonnes
      pratiques de base de cryptographie
    Vulnerability report process: Processus de signalement de
      vulnérabilité
    Warning flags: Options d'avertissement
    Working build system: Système de construction opérationnel
    Identification: Identification
    Prerequisites: Conditions préalables
    FLOSS license: Licence FLOSS
  last_entry: Dernière entrée de traduction
  admin_only: Admin seulement.
  criterion_status:
    Met: Atteint
    Unmet: Non atteint
    NA: N/A
  error_messages:
    need_home_page_or_url: >-
      Au minimum une page d'accueil ou une URL de dépôt est nécessaire
    form_contains:
      one: Le formulaire contient 1 erreur.
      other: Le formulaire contient %{count} erreurs.
      few: Le formulaire contient %{count} erreurs.
      many: Le formulaire contient %{count} erreurs.
    comma_separated_list: " doit être une liste de noms séparés
      par des virgules"
    begin_with_cpe: " doit commencer par « cpe : »"
    not_an_email: " n'est pas un email"
    known_bad_password: " est un (mauvais) mot de passe bien connu"
    valid_text: >2-
       doit avoir un codage UTF-8 valide et aucun caractère de
      contrôle invalide
    url_message: |2-
       doit commencer par http: ou https: et utiliser un jeu de caractères
          limité