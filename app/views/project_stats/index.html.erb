<%= javascript_include_tag 'project-stats', defer: true%>

<%
  # Force deletion of the obsolete cached information, if it exists.
  # It will age out eventually anyway, but this is a large cache entry
  # and we can easily determine what the previous one was. Immediately
  # forcing its deletion provides more cache space for other (useful) things.
  Rails.cache.delete ActiveSupport::Cache.expand_cache_key(
    ['project_stats', locale, ProjectStat.all.size-1]
  )
  cache ['project_stats', locale, ProjectStat.all.size] do
%>

<p id="notice"><%= notice %></p>

<h1><%= t('.project_stats_header') %></h1>

<h2><%= t '.all_projects' %></h2>

<%
  date_chart_options = {
    scales: {
      xAxes: [{
        type: 'time',
        unit: 'day',
        unitStepSize: 1,
        ticks: { minRotation: 20 },
        time: {
          displayFormats: {
             'day': 'YYYY-MM-DD'
          } } }]}
  }
%>

<%=
  # Show a chart with just total # projects.
  # This gets its own chart because its scale hides everything else.
  series_dataset = ProjectStat.all.reduce({}) do |h,e|
    h.merge(e.created_at => e.percent_ge_0)
  end
  line_chart series_dataset, library: date_chart_options, defer: true
%>

<br><br><br>

<h2><%= t '.projects_nontrivial' %></h2>
<%=
  # Show project counts, but skip <25% because that makes chart scale unusable
  gt0_stats = ProjectStat::STAT_VALUES.select do |e|
    e.to_i > 0
  end.freeze
  dataset = gt0_stats.map do |minimum|
    desired_field = 'percent_ge_' + minimum.to_s
    series_dataset = ProjectStat.all.reduce({}) do |h,e|
     h.merge(e.created_at => e[desired_field])
    end
    {name: '>=' + minimum.to_s + '%', data: series_dataset}
  end
  # Done transforming data; display it.
  line_chart dataset, library: date_chart_options, defer: true
%>

<br><br><br>

<h2><%= t '.projects_activity_30' %></h2>
<%=
  dataset = []
  # Active projects
  active_dataset = ProjectStat.all.reduce({}) do |h,e|
    h.merge(e.created_at => e.active_projects)
  end
  dataset << {name: 'Active projects (created/updated within 30 days)',
              data: active_dataset}
  # Active in-progress projects
  active_in_progress_dataset = ProjectStat.all.reduce({}) do |h,e|
    h.merge(e.created_at => e.active_in_progress)
  end
  dataset << {name: 'Active in-progress projects (created/updated within 30 days)',
              data: active_in_progress_dataset}
  # Active edited projects
  active_edited_dataset = ProjectStat.all.reduce({}) do |h,e|
    h.merge(e.created_at => e.active_edited_projects)
  end
  dataset << {name: 'Active edited projects (updated within 30 days)',
              data: active_edited_dataset}
  # Active edited in-progress projects
  active_edited_in_progress_dataset = ProjectStat.all.reduce({}) do |h,e|
    h.merge(e.created_at => e.active_edited_in_progress)
  end
  dataset << {name: 'Active edited in-progress projects (updated within 30 days)',
              data: active_edited_in_progress_dataset}
  # Done transforming data; display it.
  line_chart dataset, library: date_chart_options, defer: true
%>

<br><br><br>

<h2><%= t '.daily_activity' %></h2>
<%=
  # Show new and edited projects, reminders sent, reactivated after reminders
  # These are expected to be smaller numbers, and show detailed activity,
  # so showring them separately will let us use scales that show more info.
  dataset = []
  ndays = 7
  actions = ['created', 'updated'].freeze
  actions.each do |action|
    desired_field = action + '_since_yesterday'
    series_dataset = ProjectStat.all.reduce({}) do |h,e|
      h.merge(e.created_at => e[desired_field])
    end
    dataset << {name: 'projects ' + action + ' since day before',
                data: series_dataset}
    # Calculate moving average over ndays
    series_counts = ProjectStat.all.map { |e| e[desired_field] }
    series_moving_average = series_counts.each_cons(ndays).map do |e|
      e.reduce(&:+).to_f/ndays
    end
    moving_average_dataset = {}
    ProjectStat.all.each_with_index do |e, index|
      if index >= ndays
        moving_average_dataset[e.created_at] =
          series_moving_average[index-ndays]
      end
    end
    dataset << {name: 'projects ' + action + " average over #{ndays} days",
                data: moving_average_dataset,
                library: {borderDash: [5,5]}}
  end
  line_chart dataset, colors: ['green', 'darkgreen', 'blue', 'darkblue',
                               'red', 'purple'],
    library: date_chart_options, defer: true
%>

<br><br><br>

<h2><%= t '.reminders' %></h2>
<%=
  # Show reminders sent, reactivated after reminders
  dataset = []
  # Reminders sent
  reminders_dataset = ProjectStat.all.reduce({}) do |h,e|
    h.merge(e.created_at => e.reminders_sent)
  end
  dataset << {name: 'Reminders sent since yesterday',
              data: reminders_dataset}
  # Reactivated after reminders
  reactivated_dataset = ProjectStat.all.reduce({}) do |h,e|
    h.merge(e.created_at => e.reactivated_after_reminder)
  end
  dataset <<
    {name: 'Reactivated projects in 14 days after receiving reminder',
     data: reactivated_dataset}
  line_chart dataset, colors: ['green', 'blue'],
    library: date_chart_options, defer: true
%>

<%# End cache *before* showing any admin-specific data %>
<% end %>

<% if current_user&.admin? %>
<p>
<%= t '.admin' %>
<% end %>

<br>
<br>
<%= t '.raw_data' %>
<ul>
<li><%= link_to t('.json_format'), project_stats_path(format: :json) %>
<li><%= link_to t('.csv_format'), project_stats_path(format: :csv) %>.
</ul>
